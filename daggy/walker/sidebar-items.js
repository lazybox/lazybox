initSidebarItems({"struct":[["Chain","Walks the entirety of `a` before walking the entirety of `b`."],["Cycle","A walker that repeats its internal walker endlessly."],["Filter","A walker that applies some given predicate to each element returned by its walker. The only index pairs that will be yielded are those that make the predicate evaluate to true."],["Inspect","A walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline."],["Iter","An iterator yielding index pairs produced by its internal walker and graph."],["IterEdgeWeights","An iterator yielding edge weights associated with the indices produced by its internal walker and graph."],["IterEdges","An iterator yielding edge indices produced by its internal walker and graph."],["IterNodeWeights","An iterator yielding node weights associated with the indices produced by its internal walker and graph."],["IterNodes","An iterator yielding node indices produced by its internal walker and graph."],["IterWeights","An iterator yielding weights associated with the index pairs produced by its internal walker and graph."],["Peekable","A walker that has a `.peek(&graph)` method that returns an optional next neighbor."],["Recursive","Recursively walks a graph using the recursive function `recursive_fn`."],["Skip","A walker that skips the first n steps of this walk, and then yields all further steps."],["SkipWhile","A walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded."],["Take","A walker that yields the first n steps of this walk."],["TakeWhile","A walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded."]],"trait":[["Walker","A trait providing a variety of useful methods for traversing some graph type **G**."]],"type":[["IndexPair","Short-hand for an edge node index pair."]]});