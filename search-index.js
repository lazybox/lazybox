var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"inputs":[],"output":{"name":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"inputs":[{"name":"u32"}],"output":{"name":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"Relative","approx","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",0,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",0,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",0,null],[3,"Ulps","","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",1,null],[8,"ApproxEq","","Equality comparisons based on floating point tolerances.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",2,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",2,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",2,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",2,{"inputs":[],"output":{"name":"u32"}}],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",2,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",2,null],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",2,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",2,null],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",1,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ulps"}}],[11,"eq","","Peform the equality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_eq","","",null,null],[14,"assert_ulps_ne","","",null,null]],"paths":[[3,"Relative"],[3,"Ulps"],[8,"ApproxEq"]]};
searchIndex["arrayvec"] = {"doc":"**arrayvec** provides the types `ArrayVec` and `ArrayString`: array-backed vector and string types, which store their contents inline.","items":[[8,"RangeArgument","arrayvec","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings's length.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",3,null],[11,"insert","","Insert `element` in position `index`.",3,null],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector's length without dropping or moving out elements",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",3,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as `&str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying representation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to hold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`. See union_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`. See intersect_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`. See difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`. See symmetric_difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"len","","Returns the number of set bits in this set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",0,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if this set contains the specified integer.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1's in the bitwise repr",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element to `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits, with the most significant bits of each byte coming first. Each bit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index is `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the bitwise `and` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the `BitVec` becomes the high-order bit of the first byte. If the size of the `BitVec` is not a multiple of eight then trailing bits will be filled-in with `false`.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s. Both the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given `BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the given `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["cgmath"] = {"doc":"A low-dimensional linear algebra library, targeted at computer graphics.","items":[[8,"One","cgmath","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",0,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"Matrix2","","A 2 x 2, column major matrix",null,null],[12,"x","","The first column of the matrix.",2,null],[12,"y","","The second column of the matrix.",2,null],[3,"Matrix3","","A 3 x 3, column major matrix",null,null],[12,"x","","The first column of the matrix.",3,null],[12,"y","","The second column of the matrix.",3,null],[12,"z","","The third column of the matrix.",3,null],[3,"Matrix4","","A 4 x 4, column major matrix",null,null],[12,"x","","The first column of the matrix.",4,null],[12,"y","","The second column of the matrix.",4,null],[12,"z","","The third column of the matrix.",4,null],[12,"w","","The fourth column of the matrix.",4,null],[3,"Quaternion","","A quaternion in scalar/vector form.",null,null],[12,"s","","The scalar part of the quaternion.",5,null],[12,"v","","The vector part of the quaternion.",5,null],[3,"Vector1","","A 1-dimensional vector.",null,null],[12,"x","","The x component of the vector.",6,null],[3,"Vector2","","A 2-dimensional vector.",null,null],[12,"x","","The x component of the vector.",7,null],[12,"y","","The y component of the vector.",7,null],[3,"Vector3","","A 3-dimensional vector.",null,null],[12,"x","","The x component of the vector.",8,null],[12,"y","","The y component of the vector.",8,null],[12,"z","","The z component of the vector.",8,null],[3,"Vector4","","A 4-dimensional vector.",null,null],[12,"x","","The x component of the vector.",9,null],[12,"y","","The y component of the vector.",9,null],[12,"z","","The z component of the vector.",9,null],[12,"w","","The w component of the vector.",9,null],[3,"Deg","","An angle, in degrees.",null,null],[12,"0","","",10,null],[3,"Rad","","An angle, in radians.",null,null],[12,"0","","",11,null],[3,"Euler","","A set of [Euler angles] representing a rotation in three-dimensional space.",null,null],[12,"x","","The angle to apply around the _x_ axis. Also known at the _pitch_.",12,null],[12,"y","","The angle to apply around the _y_ axis. Also known at the _yaw_.",12,null],[12,"z","","The angle to apply around the _z_ axis. Also known at the _roll_.",12,null],[3,"Point1","","A point in 1-dimensional space.",null,null],[12,"x","","",13,null],[3,"Point2","","A point in 2-dimensional space.",null,null],[12,"x","","",14,null],[12,"y","","",14,null],[3,"Point3","","A point in 3-dimensional space.",null,null],[12,"x","","",15,null],[12,"y","","",15,null],[12,"z","","",15,null],[3,"Basis2","","A two-dimensional rotation matrix.",null,null],[3,"Basis3","","A three-dimensional rotation matrix.",null,null],[3,"Decomposed","","A generic transformation consisting of a rotation, displacement vector and scale amount.",null,null],[12,"scale","","",16,null],[12,"rot","","",16,null],[12,"disp","","",16,null],[3,"PerspectiveFov","","A perspective projection based on a vertical field-of-view angle.",null,null],[12,"fovy","","",17,null],[12,"aspect","","",17,null],[12,"near","","",17,null],[12,"far","","",17,null],[3,"Perspective","","A perspective projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",18,null],[12,"right","","",18,null],[12,"bottom","","",18,null],[12,"top","","",18,null],[12,"near","","",18,null],[12,"far","","",18,null],[3,"Ortho","","An orthographic projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",19,null],[12,"right","","",19,null],[12,"bottom","","",19,null],[12,"top","","",19,null],[12,"near","","",19,null],[12,"far","","",19,null],[5,"dot","","Dot product of two vectors.",null,null],[5,"vec1","","The short constructor.",null,{"inputs":[{"name":"s"}],"output":{"name":"vector1"}}],[5,"vec2","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[5,"vec3","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[5,"vec4","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[5,"perspective","","Create a perspective projection matrix.",null,{"inputs":[{"name":"a"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"frustum","","Create a perspective matrix from a view frustrum.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"ortho","","Create an orthographic projection matrix.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[0,"conv","","Constrained conversion functions for assisting in situations where type inference is difficult.",null,null],[5,"array2","cgmath::conv","Force a conversion into a 2-element array.",null,null],[5,"array3","","Force a conversion into a 3-element array.",null,null],[5,"array4","","Force a conversion into a 4-element array.",null,null],[5,"array2x2","","Force a conversion into a 2x2-element array.",null,null],[5,"array3x3","","Force a conversion into a 3x3-element array.",null,null],[5,"array4x4","","Force a conversion into a 4x4-element array.",null,null],[0,"prelude","cgmath","This module contains the most common traits used in `cgmath`. By glob-importing this module, you can avoid the need to import each trait individually, while still being selective about what types you import.",null,null],[8,"One","cgmath::prelude","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",0,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Array","","An array containing elements of type `Element`",null,null],[16,"Element","","",20,null],[10,"from_value","","Construct a vector from a single value, replicating it.",20,null],[11,"as_ptr","","Get the pointer to the first element of the array.",20,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",20,null],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"sum","","The sum of the elements of the array.",20,null],[10,"product","","The product of the elements of the array.",20,null],[10,"min","","The minimum element of the array.",20,null],[10,"max","","The maximum element of the array.",20,null],[8,"ElementWise","","Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.",null,null],[10,"add_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"sub_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"mul_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"div_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"rem_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"add_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"sub_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"mul_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"div_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"rem_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"VectorSpace","","Vectors that can be added together and multiplied by scalars.",null,null],[16,"Scalar","","The associated scalar.",22,null],[8,"MetricSpace","","A type with a distance function between values.",null,null],[16,"Metric","","The metric to be returned by the `distance` function.",23,null],[10,"distance2","","Returns the squared distance.",23,null],[11,"distance","","The distance between two values.",23,null],[8,"InnerSpace","","Vectors that also have a dot (or inner) product.",null,null],[10,"dot","","Vector dot (or inner) product.",24,null],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"magnitude2","","Returns the squared magnitude.",24,null],[11,"magnitude","","The distance from the tail to the tip of the vector.",24,null],[11,"angle","","Returns the angle between two vectors in radians.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",24,null],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",24,null],[8,"EuclideanSpace","","Points in a Euclidean space with an associated space of displacement vectors.",null,null],[16,"Scalar","","The associated scalar over which the space is defined.",25,null],[16,"Diff","","The associated space of displacement vectors.",25,null],[10,"origin","","The point at the origin of the Euclidean space.",25,{"inputs":[],"output":{"name":"self"}}],[10,"from_vec","","Convert a displacement vector to a point.",25,null],[10,"to_vec","","Convert a point to a displacement vector.",25,null],[11,"midpoint","","Returns the middle point between two other points.",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"centroid","","Returns the average position of all points in the slice.",25,null],[10,"dot","","This is a weird one, but its useful for plane calculations.",25,null],[8,"Matrix","","A column-major matrix of arbitrary dimensions.",null,null],[16,"Row","","The row vector of the matrix.",26,null],[16,"Column","","The column vector of the matrix.",26,null],[16,"Transpose","","The result of transposing the matrix",26,null],[11,"as_ptr","","Get the pointer to the first element of the array.",26,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",26,null],[11,"replace_col","","Replace a column in the array.",26,null],[10,"row","","Get a row from this matrix by-value.",26,null],[10,"swap_rows","","Swap two rows of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_columns","","Swap two columns of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_elements","","Swap the values at index `a` and `b`",26,null],[10,"transpose","","Transpose this matrix, returning a new matrix.",26,null],[8,"SquareMatrix","","A column-major major matrix where the rows and column vectors are of the same dimensions.",null,null],[16,"ColumnRow","","The row/column vector of the matrix.",27,null],[10,"from_value","","Create a new diagonal matrix using the supplied value.",27,null],[10,"from_diagonal","","Create a matrix from a non-uniform scale",27,null],[11,"identity","","The [identity matrix]. Multiplying this matrix with another should have no effect.",27,{"inputs":[],"output":{"name":"self"}}],[10,"transpose_self","","Transpose this matrix in-place.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"determinant","","Take the determinant of this matrix.",27,null],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",27,null],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",27,null],[10,"invert","","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is the identity matrix. Returns `None` if this matrix is not invertible (has a determinant of zero).",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_invertible","","Test if this matrix is invertible.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_diagonal","","Test if this is a diagonal matrix. That is, every element outside of the diagonal is 0.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its transpose.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Angle","","Angles and their associated trigonometric functions.",null,null],[16,"Unitless","","",28,null],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Return the angle rotated by half a turn.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"full_turn","","A full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_2","","Half of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_3","","A third of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_4","","A quarter of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_6","","A sixth of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[10,"sin","","Compute the sine of the angle, returning a unitless ratio.",28,null],[10,"cos","","Compute the cosine of the angle, returning a unitless ratio.",28,null],[10,"tan","","Compute the tangent of the angle, returning a unitless ratio.",28,null],[10,"sin_cos","","Compute the sine and cosine of the angle, returning the result as a pair.",28,null],[11,"csc","","Compute the cosecant of the angle.",28,null],[11,"cot","","Compute the cotangent of the angle.",28,null],[11,"sec","","Compute the secant of the angle.",28,null],[10,"asin","","Compute the arcsine of the ratio, returning the resulting angle.",28,null],[10,"acos","","Compute the arccosine of the ratio, returning the resulting angle.",28,null],[10,"atan","","Compute the arctangent of the ratio, returning the resulting angle.",28,null],[10,"atan2","","",28,null],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.",null,null],[10,"look_at","","Create a rotation to a given direction with an 'up' vector",29,null],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'. Both given vectors are assumed to have unit length.",29,null],[10,"rotate_vector","","Rotate a vector using this rotation.",29,null],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its representation as a vector.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"invert","","Create a new rotation which \"un-does\" this rotation. That is, `r * r.invert()` is the identity.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Rotation2","","A two-dimensional rotation.",null,null],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both from_axis_angle() and from_euler() for 2D space.",30,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Rotation3","","A three-dimensional rotation.",null,null],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",31,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Transform","","A trait representing an affine transformation that can be applied to points or vectors. An affine transformation is one which",null,null],[10,"one","","Create an identity transformation. That is, a transformation which does nothing.",32,{"inputs":[],"output":{"name":"self"}}],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from `eye`, using `up` for orientation.",32,null],[10,"transform_vector","","Transform a vector using this transform.",32,null],[10,"transform_point","","Transform a point using this transform.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"concat","","Combine this transform with another, yielding a new transformation which has the effects of both.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"inverse_transform","","Create a transform that \"un-does\" this one.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"concat_self","","Combine this transform with another, in-place.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"Transform2","","",null,null],[8,"Transform3","","",null,null],[11,"as_ptr","","Get the pointer to the first element of the array.",20,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",20,null],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"distance","","The distance between two values.",23,null],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"magnitude2","","Returns the squared magnitude.",24,null],[11,"magnitude","","The distance from the tail to the tip of the vector.",24,null],[11,"angle","","Returns the angle between two vectors in radians.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",24,null],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",24,null],[11,"midpoint","","Returns the middle point between two other points.",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"centroid","","Returns the average position of all points in the slice.",25,null],[11,"as_ptr","","Get the pointer to the first element of the array.",26,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",26,null],[11,"replace_col","","Replace a column in the array.",26,null],[11,"identity","","The [identity matrix]. Multiplying this matrix with another should have no effect.",27,{"inputs":[],"output":{"name":"self"}}],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",27,null],[11,"is_invertible","","Test if this matrix is invertible.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Return the angle rotated by half a turn.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"turn_div_2","","Half of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_3","","A third of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_4","","A quarter of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_6","","A sixth of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"csc","","Compute the cosecant of the angle.",28,null],[11,"cot","","Compute the cotangent of the angle.",28,null],[11,"sec","","Compute the secant of the angle.",28,null],[11,"decode","cgmath","",2,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"decode","","",3,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"decode","","",4,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"new","","Create a new matrix, providing values for each index.",2,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_cols","","Create a new matrix, providing columns.",2,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at `dir`, using `up` for orientation.",2,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"from_angle","","",2,{"inputs":[{"name":"a"}],"output":{"name":"matrix2"}}],[11,"new","","Create a new matrix, providing values for each index.",3,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_cols","","Create a new matrix, providing columns.",3,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"look_at","","Create a rotation matrix that will cause a vector to point at `dir`, using `up` for orientation.",3,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"from_angle_x","","Create a rotation matrix from a rotation around the `x` axis (pitch).",3,{"inputs":[{"name":"a"}],"output":{"name":"matrix3"}}],[11,"from_angle_y","","Create a rotation matrix from a rotation around the `y` axis (yaw).",3,{"inputs":[{"name":"a"}],"output":{"name":"matrix3"}}],[11,"from_angle_z","","Create a rotation matrix from a rotation around the `z` axis (roll).",3,{"inputs":[{"name":"a"}],"output":{"name":"matrix3"}}],[11,"from_axis_angle","","Create a rotation matrix from an angle around an arbitrary axis.",3,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"matrix3"}}],[11,"new","","Create a new matrix, providing values for each index.",4,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_cols","","Create a new matrix, providing columns.",4,{"inputs":[{"name":"vector4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"from_translation","","Create a homogeneous transformation matrix from a translation vector.",4,{"inputs":[{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"from_scale","","Create a homogeneous transformation matrix from a scale value.",4,{"inputs":[{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_nonuniform_scale","","Create a homogeneous transformation matrix from a set of scale values.",4,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"look_at","","Create a homogeneous transformation matrix that will cause a vector to point at `dir`, using `up` for orientation.",4,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"from_angle_x","","Create a homogeneous transformation matrix from a rotation around the `x` axis (pitch).",4,{"inputs":[{"name":"a"}],"output":{"name":"matrix4"}}],[11,"from_angle_y","","Create a homogeneous transformation matrix from a rotation around the `y` axis (yaw).",4,{"inputs":[{"name":"a"}],"output":{"name":"matrix4"}}],[11,"from_angle_z","","Create a homogeneous transformation matrix from a rotation around the `z` axis (roll).",4,{"inputs":[{"name":"a"}],"output":{"name":"matrix4"}}],[11,"from_axis_angle","","Create a homogeneous transformation matrix from an angle around an arbitrary axis.",4,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"matrix4"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"matrix2"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"matrix4"}}],[11,"is_zero","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"matrix2"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"matrix4"}}],[11,"row","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"swap_rows","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elements","","",2,null],[11,"transpose","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"from_value","","",2,{"inputs":[{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_diagonal","","",2,{"inputs":[{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"transpose_self","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"determinant","","",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"diagonal","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"invert","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_diagonal","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"row","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"swap_rows","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elements","","",3,null],[11,"transpose","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"from_value","","",3,{"inputs":[{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_diagonal","","",3,{"inputs":[{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"transpose_self","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"determinant","","",3,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"diagonal","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"invert","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_diagonal","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"row","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"swap_rows","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elements","","",4,null],[11,"transpose","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"from_value","","",4,{"inputs":[{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_diagonal","","",4,{"inputs":[{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"transpose_self","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"determinant","","",4,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"diagonal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"invert","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_diagonal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",2,null],[11,"default_max_relative","","",2,null],[11,"default_max_ulps","","",2,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",2,null],[11,"ulps_eq","","",2,null],[11,"default_epsilon","","",3,null],[11,"default_max_relative","","",3,null],[11,"default_max_ulps","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",3,null],[11,"ulps_eq","","",3,null],[11,"default_epsilon","","",4,null],[11,"default_max_relative","","",4,null],[11,"default_max_ulps","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",4,null],[11,"ulps_eq","","",4,null],[11,"one","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"look_at","","",3,{"inputs":[{"name":"point2"},{"name":"point2"},{"name":"vector2"}],"output":{"name":"matrix3"}}],[11,"transform_vector","","",3,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"transform_point","","",3,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"concat","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"inverse_transform","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"look_at","","",3,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"transform_vector","","",3,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",3,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"inverse_transform","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"matrix4"}}],[11,"look_at","","",4,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"transform_vector","","",4,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",4,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"inverse_transform","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"mul_assign","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add_assign","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"sub_assign","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"rem","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"add_assign","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"sub_assign","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"index_mut","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"from","","",3,{"inputs":[{"name":"euler"}],"output":{"name":"matrix3"}}],[11,"from","","",4,{"inputs":[{"name":"euler"}],"output":{"name":"matrix4"}}],[11,"into","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"from","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"into","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"from","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"into","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner of a 3-dimensional identity matrix.",3,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix3"}}],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner of a 4-dimensional identity matrix.",4,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix4"}}],[11,"from","","Clone the elements of a 3-dimensional matrix into the top-left corner of a 4-dimensional identity matrix.",4,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix4"}}],[11,"from","","Convert the matrix to a quaternion",5,{"inputs":[{"name":"matrix3"}],"output":{"name":"quaternion"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"matrix2"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"matrix3"}}],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"matrix4"}}],[11,"decode","","",5,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"new","","Construct a new quaternion from one scalar component and three imaginary components",5,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"from_sv","","Construct a new quaternion from a scalar and a vector",5,{"inputs":[{"name":"s"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"from_arc","","Construct a new quaternion as a closest arc between two vectors",5,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"option"}],"output":{"name":"quaternion"}}],[11,"conjugate","","The conjugate of the quaternion.",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",5,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"slerp","","Spherical Linear Intoperlation",5,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"quaternion"}}],[11,"is_zero","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"quaternion"}}],[11,"distance2","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"dot","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"s"}}],[11,"from","","",5,{"inputs":[{"name":"euler"}],"output":{"name":"quaternion"}}],[11,"neg","","",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"div_assign","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"default_epsilon","","",5,null],[11,"default_max_relative","","",5,null],[11,"default_max_ulps","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",5,null],[11,"ulps_eq","","",5,null],[11,"from","","Convert the quaternion to a 3 x 3 rotation matrix",3,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix3"}}],[11,"from","","Convert the quaternion to a 4 x 4 rotation matrix",4,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix4"}}],[11,"from","","",33,{"inputs":[{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"look_at","","",5,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"between_vectors","","",5,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"rotate_vector","","",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"invert","","",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"from_axis_angle","","",5,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"quaternion"}}],[11,"into","","",5,null],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"into","","",5,null],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"name":"quaternion"}}],[11,"decode","","",6,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"decode","","",8,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"decode","","",9,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",6,{"inputs":[{"name":"s"}],"output":{"name":"vector1"}}],[11,"cast","","Component-wise casting to another type",6,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"distance2","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",6,{"inputs":[{"name":"s"}],"output":{"name":"vector1"}}],[11,"sum","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"min","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"max","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"vector1"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"neg","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"default_epsilon","","",6,null],[11,"default_max_relative","","",6,null],[11,"default_max_ulps","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",6,null],[11,"ulps_eq","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"name":"vector1"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"mul_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"div_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"rem_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"add_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"mul_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"div_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"rem_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"add_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"sub_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"mul_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"div_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"rem_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"add_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"new","","Construct a new vector, using the provided values.",7,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"cast","","Component-wise casting to another type",7,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"distance2","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",7,{"inputs":[{"name":"s"}],"output":{"name":"vector2"}}],[11,"sum","","",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"min","","",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"max","","",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"vector2"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"default_epsilon","","",7,null],[11,"default_max_relative","","",7,null],[11,"default_max_ulps","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",7,null],[11,"ulps_eq","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"vector2"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"div_assign","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"rem_assign","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rem_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"mul_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"div_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"rem_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"add_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"sub_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"mul_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"div_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"rem_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"new","","Construct a new vector, using the provided values.",8,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"cast","","Component-wise casting to another type",8,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"distance2","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",8,{"inputs":[{"name":"s"}],"output":{"name":"vector3"}}],[11,"sum","","",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"min","","",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"max","","",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"neg","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"default_epsilon","","",8,null],[11,"default_max_relative","","",8,null],[11,"default_max_ulps","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",8,null],[11,"ulps_eq","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"vector3"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_assign","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_assign","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"mul_assign","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"div_assign","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"rem_assign","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rem_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"mul_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"div_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"rem_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"add_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"sub_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"mul_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"div_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"rem_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"new","","Construct a new vector, using the provided values.",9,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"cast","","Component-wise casting to another type",9,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"distance2","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",9,{"inputs":[{"name":"s"}],"output":{"name":"vector4"}}],[11,"sum","","",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"min","","",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"max","","",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"neg","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"default_epsilon","","",9,null],[11,"default_max_relative","","",9,null],[11,"default_max_ulps","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",9,null],[11,"ulps_eq","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"vector4"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_assign","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_assign","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"mul_assign","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"div_assign","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"rem_assign","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"rem_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"sub_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"mul_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"div_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"rem_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"add_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"sub_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"mul_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"div_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"rem_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"into","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"into","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"into","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"into","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,null],[11,"into","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"into","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"into","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"into","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,null],[11,"unit_x","","A unit vector in the `x` direction.",6,{"inputs":[],"output":{"name":"vector1"}}],[11,"unit_x","","A unit vector in the `x` direction.",7,{"inputs":[],"output":{"name":"vector2"}}],[11,"unit_y","","A unit vector in the `y` direction.",7,{"inputs":[],"output":{"name":"vector2"}}],[11,"perp_dot","","The perpendicular dot product of the vector and `other`.",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the provided `z`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"unit_x","","A unit vector in the `x` direction.",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"unit_y","","A unit vector in the `y` direction.",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"unit_z","","A unit vector in the `w` direction.",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"cross","","Returns the cross product of the vector and `other`.",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the provided `w`.",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector2`, dropping the `z` value.",8,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"unit_x","","A unit vector in the `x` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"unit_y","","A unit vector in the `y` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"unit_z","","A unit vector in the `z` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"unit_w","","A unit vector in the `w` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector3`, dropping the `w` value.",9,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"truncate_n","","Create a `Vector3`, dropping the nth element",9,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"vector3"}}],[11,"dot","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"s"}}],[11,"dot","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"angle","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"rad"}}],[11,"dot","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"s"}}],[11,"angle","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"rad"}}],[11,"dot","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"s"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rad"}}],[11,"decode","","",10,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"deg"}}],[11,"from","","",10,{"inputs":[{"name":"rad"}],"output":{"name":"deg"}}],[11,"from","","",11,{"inputs":[{"name":"deg"}],"output":{"name":"rad"}}],[11,"zero","","",11,{"inputs":[],"output":{"name":"rad"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"full_turn","","",11,{"inputs":[],"output":{"name":"rad"}}],[11,"sin","","",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"cos","","",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"tan","","",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sin_cos","","",11,null],[11,"asin","","",11,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[11,"acos","","",11,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[11,"atan","","",11,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[11,"atan2","","",11,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"rad"}}],[11,"neg","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rad"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"s"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"s"}}],[11,"rem","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"rem","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":null}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":null}],[11,"rem_assign","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"rad"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"rad"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"default_epsilon","","",11,null],[11,"default_max_relative","","",11,null],[11,"default_max_ulps","","",11,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",11,null],[11,"ulps_eq","","",11,null],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"rad"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"deg"}}],[11,"is_zero","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"full_turn","","",10,{"inputs":[],"output":{"name":"deg"}}],[11,"sin","","",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"cos","","",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"tan","","",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sin_cos","","",10,null],[11,"asin","","",10,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[11,"acos","","",10,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[11,"atan","","",10,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[11,"atan2","","",10,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"deg"}}],[11,"neg","","",10,{"inputs":[{"name":"self"}],"output":{"name":"deg"}}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"s"}}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"s"}}],[11,"rem","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"rem","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"add_assign","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":null}],[11,"sub_assign","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":null}],[11,"rem_assign","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":null}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"deg"}}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"deg"}}],[11,"mul_assign","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"default_epsilon","","",10,null],[11,"default_max_relative","","",10,null],[11,"default_max_ulps","","",10,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",10,null],[11,"ulps_eq","","",10,null],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"deg"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"__da"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__sa"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"euler"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"euler"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"euler"}}],[11,"new","","Construct a set of euler angles.",12,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"euler"}}],[11,"from","","",12,{"inputs":[{"name":"quaternion"}],"output":{"name":"euler"}}],[11,"default_epsilon","","",12,null],[11,"default_max_relative","","",12,null],[11,"default_max_ulps","","",12,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",12,null],[11,"ulps_eq","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"euler"}}],[11,"decode","","",13,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"point1"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"decode","","",14,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"decode","","",15,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"new","","",13,{"inputs":[{"name":"s"}],"output":{"name":"point1"}}],[11,"new","","",14,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"point2"}}],[11,"new","","",15,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"point3"}}],[11,"from_homogeneous","","",15,{"inputs":[{"name":"vector4"}],"output":{"name":"point3"}}],[11,"to_homogeneous","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"from_value","","",13,{"inputs":[{"name":"s"}],"output":{"name":"point1"}}],[11,"sum","","",13,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",13,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"min","","",13,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"max","","",13,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"distance2","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"origin","","",13,{"inputs":[],"output":{"name":"point1"}}],[11,"from_vec","","",13,{"inputs":[{"name":"vector1"}],"output":{"name":"point1"}}],[11,"to_vec","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"dot","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"s"}}],[11,"default_epsilon","","",13,null],[11,"default_max_relative","","",13,null],[11,"default_max_ulps","","",13,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",13,null],[11,"ulps_eq","","",13,null],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"point1"}}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"point1"}}],[11,"add_assign","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"vector1"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"vector1"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point1"}}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point1"}}],[11,"rem","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point1"}}],[11,"mul_assign","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"from_value","","",14,{"inputs":[{"name":"s"}],"output":{"name":"point2"}}],[11,"sum","","",14,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",14,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"min","","",14,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"max","","",14,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"distance2","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"origin","","",14,{"inputs":[],"output":{"name":"point2"}}],[11,"from_vec","","",14,{"inputs":[{"name":"vector2"}],"output":{"name":"point2"}}],[11,"to_vec","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"dot","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"default_epsilon","","",14,null],[11,"default_max_relative","","",14,null],[11,"default_max_ulps","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",14,null],[11,"ulps_eq","","",14,null],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"add_assign","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point2"}}],[11,"div","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point2"}}],[11,"rem","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point2"}}],[11,"mul_assign","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"from_value","","",15,{"inputs":[{"name":"s"}],"output":{"name":"point3"}}],[11,"sum","","",15,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",15,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"min","","",15,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"max","","",15,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"distance2","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"origin","","",15,{"inputs":[],"output":{"name":"point3"}}],[11,"from_vec","","",15,{"inputs":[{"name":"vector3"}],"output":{"name":"point3"}}],[11,"to_vec","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"dot","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"s"}}],[11,"default_epsilon","","",15,null],[11,"default_max_relative","","",15,null],[11,"default_max_ulps","","",15,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",15,null],[11,"ulps_eq","","",15,null],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"add_assign","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point3"}}],[11,"div","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point3"}}],[11,"rem","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point3"}}],[11,"mul_assign","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"into","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"into","","",14,null],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"from","","",14,null],[11,"into","","",15,null],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"from","","",15,null],[11,"into","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"into","","",14,null],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"from","","",14,null],[11,"into","","",15,null],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"from","","",15,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rotate_point","cgmath::prelude","Rotate a point using this rotation, by converting it to its representation as a vector.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"decode","cgmath","",34,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"basis2"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"from","","",2,{"inputs":[{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"look_at","","",34,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"between_vectors","","",34,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"rotate_vector","","",34,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"invert","","",34,{"inputs":[{"name":"self"}],"output":{"name":"basis2"}}],[11,"one","","",34,{"inputs":[],"output":{"name":"basis2"}}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"default_epsilon","","",34,null],[11,"default_max_relative","","",34,null],[11,"default_max_ulps","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",34,null],[11,"ulps_eq","","",34,null],[11,"from_angle","","",34,{"inputs":[{"name":"a"}],"output":{"name":"basis2"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"basis3"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"from_quaternion","","Create a new rotation matrix from a quaternion.",33,{"inputs":[{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"from","","",3,{"inputs":[{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"from","","",5,{"inputs":[{"name":"basis3"}],"output":{"name":"quaternion"}}],[11,"look_at","","",33,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"between_vectors","","",33,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"rotate_vector","","",33,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"invert","","",33,{"inputs":[{"name":"self"}],"output":{"name":"basis3"}}],[11,"one","","",33,{"inputs":[],"output":{"name":"basis3"}}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"default_epsilon","","",33,null],[11,"default_max_relative","","",33,null],[11,"default_max_ulps","","",33,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",33,null],[11,"ulps_eq","","",33,null],[11,"from_axis_angle","","",33,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"basis3"}}],[11,"from_angle_x","","",33,{"inputs":[{"name":"a"}],"output":{"name":"basis3"}}],[11,"from_angle_y","","",33,{"inputs":[{"name":"a"}],"output":{"name":"basis3"}}],[11,"from_angle_z","","",33,{"inputs":[{"name":"a"}],"output":{"name":"basis3"}}],[11,"from","","Create a three-dimensional rotation matrix from a set of euler angles.",33,{"inputs":[{"name":"euler"}],"output":{"name":"basis3"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"concat_self","cgmath::prelude","Combine this transform with another, in-place.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"decode","cgmath","",16,{"inputs":[{"name":"__dvr"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__svr"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decomposed"}}],[11,"one","","",16,{"inputs":[],"output":{"name":"decomposed"}}],[11,"look_at","","",16,null],[11,"transform_vector","","",16,null],[11,"transform_point","","",16,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"concat","","",16,{"inputs":[{"name":"self"},{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"inverse_transform","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix3"}}],[11,"from","","",4,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix4"}}],[11,"default_epsilon","","",16,{"inputs":[],"output":{"name":"e"}}],[11,"default_max_relative","","",16,{"inputs":[],"output":{"name":"e"}}],[11,"default_max_ulps","","",16,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",16,{"inputs":[{"name":"self"},{"name":"self"},{"name":"e"},{"name":"e"}],"output":{"name":"bool"}}],[11,"ulps_eq","","",16,{"inputs":[{"name":"self"},{"name":"self"},{"name":"e"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"decode","","",17,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"perspectivefov"}}],[11,"to_perspective","","",17,{"inputs":[{"name":"self"}],"output":{"name":"perspective"}}],[11,"from","","",4,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"matrix4"}}],[11,"decode","","",18,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"perspective"}}],[11,"from","","",4,{"inputs":[{"name":"perspective"}],"output":{"name":"matrix4"}}],[11,"decode","","",19,{"inputs":[{"name":"__ds"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__ss"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ortho"}}],[11,"from","","",4,{"inputs":[{"name":"ortho"}],"output":{"name":"matrix4"}}],[8,"PartialOrd","","A trait providing a partial ordering.",null,null],[10,"partial_min","","",35,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_max","","",35,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"BaseNum","","Base numeric types with partial ordering",null,null],[8,"BaseInt","","Base integer types",null,null],[8,"BaseFloat","","Base floating point types",null,null],[8,"Array","","An array containing elements of type `Element`",null,null],[16,"Element","","",20,null],[10,"from_value","","Construct a vector from a single value, replicating it.",20,null],[11,"as_ptr","cgmath::prelude","Get the pointer to the first element of the array.",20,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",20,null],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"sum","cgmath","The sum of the elements of the array.",20,null],[10,"product","","The product of the elements of the array.",20,null],[10,"min","","The minimum element of the array.",20,null],[10,"max","","The maximum element of the array.",20,null],[8,"ElementWise","","Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.",null,null],[10,"add_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"sub_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"mul_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"div_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"rem_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"add_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"sub_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"mul_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"div_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"rem_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"VectorSpace","","Vectors that can be added together and multiplied by scalars.",null,null],[16,"Scalar","","The associated scalar.",22,null],[8,"MetricSpace","","A type with a distance function between values.",null,null],[16,"Metric","","The metric to be returned by the `distance` function.",23,null],[10,"distance2","","Returns the squared distance.",23,null],[11,"distance","cgmath::prelude","The distance between two values.",23,null],[8,"InnerSpace","cgmath","Vectors that also have a dot (or inner) product.",null,null],[10,"dot","","Vector dot (or inner) product.",24,null],[11,"is_perpendicular","cgmath::prelude","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"magnitude2","","Returns the squared magnitude.",24,null],[11,"magnitude","","The distance from the tail to the tip of the vector.",24,null],[11,"angle","","Returns the angle between two vectors in radians.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",24,null],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",24,null],[8,"EuclideanSpace","cgmath","Points in a Euclidean space with an associated space of displacement vectors.",null,null],[16,"Scalar","","The associated scalar over which the space is defined.",25,null],[16,"Diff","","The associated space of displacement vectors.",25,null],[10,"origin","","The point at the origin of the Euclidean space.",25,{"inputs":[],"output":{"name":"self"}}],[10,"from_vec","","Convert a displacement vector to a point.",25,null],[10,"to_vec","","Convert a point to a displacement vector.",25,null],[11,"midpoint","cgmath::prelude","Returns the middle point between two other points.",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"centroid","","Returns the average position of all points in the slice.",25,null],[10,"dot","cgmath","This is a weird one, but its useful for plane calculations.",25,null],[8,"Matrix","","A column-major matrix of arbitrary dimensions.",null,null],[16,"Row","","The row vector of the matrix.",26,null],[16,"Column","","The column vector of the matrix.",26,null],[16,"Transpose","","The result of transposing the matrix",26,null],[11,"as_ptr","cgmath::prelude","Get the pointer to the first element of the array.",26,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",26,null],[11,"replace_col","","Replace a column in the array.",26,null],[10,"row","cgmath","Get a row from this matrix by-value.",26,null],[10,"swap_rows","","Swap two rows of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_columns","","Swap two columns of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_elements","","Swap the values at index `a` and `b`",26,null],[10,"transpose","","Transpose this matrix, returning a new matrix.",26,null],[8,"SquareMatrix","","A column-major major matrix where the rows and column vectors are of the same dimensions.",null,null],[16,"ColumnRow","","The row/column vector of the matrix.",27,null],[10,"from_value","","Create a new diagonal matrix using the supplied value.",27,null],[10,"from_diagonal","","Create a matrix from a non-uniform scale",27,null],[11,"identity","cgmath::prelude","The [identity matrix]. Multiplying this matrix with another should have no effect.",27,{"inputs":[],"output":{"name":"self"}}],[10,"transpose_self","cgmath","Transpose this matrix in-place.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"determinant","","Take the determinant of this matrix.",27,null],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",27,null],[11,"trace","cgmath::prelude","Return the trace of this matrix. That is, the sum of the diagonal.",27,null],[10,"invert","cgmath","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is the identity matrix. Returns `None` if this matrix is not invertible (has a determinant of zero).",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_invertible","cgmath::prelude","Test if this matrix is invertible.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_diagonal","cgmath","Test if this is a diagonal matrix. That is, every element outside of the diagonal is 0.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its transpose.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Angle","","Angles and their associated trigonometric functions.",null,null],[16,"Unitless","","",28,null],[11,"normalize","cgmath::prelude","Return the angle, normalized to the range `[0, full_turn)`.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Return the angle rotated by half a turn.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"full_turn","cgmath","A full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_2","cgmath::prelude","Half of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_3","","A third of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_4","","A quarter of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_6","","A sixth of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[10,"sin","cgmath","Compute the sine of the angle, returning a unitless ratio.",28,null],[10,"cos","","Compute the cosine of the angle, returning a unitless ratio.",28,null],[10,"tan","","Compute the tangent of the angle, returning a unitless ratio.",28,null],[10,"sin_cos","","Compute the sine and cosine of the angle, returning the result as a pair.",28,null],[11,"csc","cgmath::prelude","Compute the cosecant of the angle.",28,null],[11,"cot","","Compute the cotangent of the angle.",28,null],[11,"sec","","Compute the secant of the angle.",28,null],[10,"asin","cgmath","Compute the arcsine of the ratio, returning the resulting angle.",28,null],[10,"acos","","Compute the arccosine of the ratio, returning the resulting angle.",28,null],[10,"atan","","Compute the arctangent of the ratio, returning the resulting angle.",28,null],[10,"atan2","","",28,null],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.",null,null],[10,"look_at","","Create a rotation to a given direction with an 'up' vector",29,null],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'. Both given vectors are assumed to have unit length.",29,null],[10,"rotate_vector","","Rotate a vector using this rotation.",29,null],[11,"rotate_point","cgmath::prelude","Rotate a point using this rotation, by converting it to its representation as a vector.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"invert","cgmath","Create a new rotation which \"un-does\" this rotation. That is, `r * r.invert()` is the identity.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Rotation2","","A two-dimensional rotation.",null,null],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both from_axis_angle() and from_euler() for 2D space.",30,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Rotation3","","A three-dimensional rotation.",null,null],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",31,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_x","cgmath::prelude","Create a rotation from an angle around the `x` axis (pitch).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Transform","cgmath","A trait representing an affine transformation that can be applied to points or vectors. An affine transformation is one which",null,null],[10,"one","","Create an identity transformation. That is, a transformation which does nothing.",32,{"inputs":[],"output":{"name":"self"}}],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from `eye`, using `up` for orientation.",32,null],[10,"transform_vector","","Transform a vector using this transform.",32,null],[10,"transform_point","","Transform a point using this transform.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"concat","","Combine this transform with another, yielding a new transformation which has the effects of both.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"inverse_transform","","Create a transform that \"un-does\" this one.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"concat_self","cgmath::prelude","Combine this transform with another, in-place.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"Transform2","cgmath","",null,null],[8,"Transform3","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"assert_ulps_ne","","",null,null],[14,"assert_ulps_eq","","",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_relative_eq","","",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null]],"paths":[[8,"One"],[8,"Zero"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Quaternion"],[3,"Vector1"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Deg"],[3,"Rad"],[3,"Euler"],[3,"Point1"],[3,"Point2"],[3,"Point3"],[3,"Decomposed"],[3,"PerspectiveFov"],[3,"Perspective"],[3,"Ortho"],[8,"Array"],[8,"ElementWise"],[8,"VectorSpace"],[8,"MetricSpace"],[8,"InnerSpace"],[8,"EuclideanSpace"],[8,"Matrix"],[8,"SquareMatrix"],[8,"Angle"],[8,"Rotation"],[8,"Rotation2"],[8,"Rotation3"],[8,"Transform"],[3,"Basis3"],[3,"Basis2"],[8,"PartialOrd"]]};
searchIndex["color_quant"] = {"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage ``` let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba(); ```","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex["conrod"] = {"doc":"Conrod","items":[[3,"Padding","conrod","The distance between the inner edge of a border and the outer edge of the inner content.",null,null],[12,"x","","Padding on the start and end of the *x* axis.",0,null],[12,"y","","Padding on the start and end of the *y* axis.",0,null],[3,"Range","","Some start and end position along a single axis.",null,null],[12,"start","","The start of some `Range` along an axis.",1,null],[12,"end","","The end of some `Range` along an axis.",1,null],[3,"Rect","","Defines a Rectangle's bounds across the x and y axes.",null,null],[12,"x","","The start and end positions of the Rectangle on the x axis.",2,null],[12,"y","","The start and end positions of the Rectangle on the y axis.",2,null],[3,"Ui","","`Ui` is the most important type within Conrod and is necessary for rendering and maintaining widget state. # Ui Handles the following: * Contains the state of all widgets which can be indexed via their widget::Id. * Stores rendering state for each widget until the end of each render cycle. * Contains the theme used for default styling of the widgets. * Maintains the latest user input state (for mouse and keyboard). * Maintains the latest window dimensions.",null,null],[12,"theme","","The theme used to set default styling for widgets.",3,null],[12,"window","","An index into the root widget of the graph, representing the entire window.",3,null],[12,"global_input","","Handles aggregation of events and providing them to Widgets",3,null],[12,"fonts","","Manages all fonts that have been loaded by the user.",3,null],[12,"win_w","","Window width.",3,null],[12,"win_h","","Window height.",3,null],[3,"UiCell","","A wrapper around the `Ui` that restricts the user from mutating the `Ui` in certain ways while in the scope of the `Ui::set_widgets` function and within `Widget`s' `update` methods. Using the `UiCell`, users may access the `Ui` immutably (via `Deref`) however they wish, however they may only mutate the `Ui` via the `&mut self` methods provided by the `UiCell`.",null,null],[3,"UiBuilder","","A constructor type for building a `Ui` instance with a set of optional parameters.",null,null],[12,"window_dimensions","","The initial dimensions of the window in which the `Ui` exists.",4,null],[12,"maybe_theme","","The theme used to set default styling for widgets.",4,null],[12,"maybe_widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",4,null],[4,"Bordering","","To be used as a parameter for defining the aesthetic of the widget border.",null,null],[13,"Border","","Border width and color.",5,null],[13,"NoBorder","","No border.",5,null],[4,"Align","","The orientation of **Align**ment along some **Axis**.",null,null],[13,"Start","","**Align** our **Start** with the **Start** of some other widget along the **Axis**.",6,null],[13,"Middle","","**Align** our **Middle** with the **Middle** of some other widget along the **Axis**.",6,null],[13,"End","","**Align** our **End** with the **End** of some other widget along the **Axis**.",6,null],[4,"Axis","","Represents either **Axis** in the 2-dimensional plane.",null,null],[13,"X","","The horizontal plane's Axis.",7,null],[13,"Y","","The vertical plane's Axis.",7,null],[4,"Corner","","Either of the four corners of a **Rect**.",null,null],[13,"TopLeft","","The top left corner of a **Rect**.",8,null],[13,"TopRight","","The top right corner of a **Rect**.",8,null],[13,"BottomLeft","","The bottom left corner of a **Rect**.",8,null],[13,"BottomRight","","The bottom right corner of a **Rect**.",8,null],[4,"Direction","","Directionally positioned, normally relative to some other widget.",null,null],[13,"Forwards","","Positioned forwards (*positive* **Scalar**) along some **Axis**.",9,null],[13,"Backwards","","Positioned backwards (*negative* **Scalar**) along some **Axis**.",9,null],[4,"Dimension","","The length of a **Widget** over either the *x* or *y* axes.",null,null],[13,"Absolute","","Some specific length has been given.",10,null],[13,"Of","","The dimension should match that of the widget at the given index.",10,null],[13,"KidAreaOf","","The dimension should match that of the `kid_area` of the widget at the given index.",10,null],[4,"Edge","","Represents either the **Start** or **End** **Edge** of a **Range**.",null,null],[13,"Start","","The beginning of a **Range**.",11,null],[13,"End","","The end of a **Range**.",11,null],[4,"Place","","Place the widget at a position on some other widget.",null,null],[13,"Start","","Place upon the **Start** of the Widget's `kid_area`.",12,null],[13,"Middle","","Place upon the **Middle** of the Widget's `kid_area`.",12,null],[13,"End","","Place upon the **End** of the Widget's `kid_area`.",12,null],[4,"Position","","Some **Position** of some **Widget** along a single axis.",null,null],[13,"Absolute","","A specific position.",13,null],[13,"Relative","","A position relative to some other Widget.",13,null],[13,"Align","","A position aligned with some other Widget.",13,null],[13,"Direction","","A direction relative to some other Widget.",13,null],[13,"Place","","A position at a place on some other Widget.",13,null],[0,"backend","","Feature-gated, backend-specific functionality.",null,null],[0,"glutin","conrod::backend","A function for converting a `glutin::Event` to a `conrod::event::Input`.",null,null],[5,"convert","conrod::backend::glutin","A function for converting a `glutin::Event` to a `conrod::event::Input`.",null,{"inputs":[{"name":"event"},{"name":"w"}],"output":{"name":"option"}}],[5,"map_key","","Maps Glutin's key to a conrod `Key`.",null,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"key"}}],[5,"map_mouse","","Maps Glutin's mouse button to Piston's mouse button.",null,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"clone","conrod","",5,{"inputs":[{"name":"self"}],"output":{"name":"bordering"}}],[0,"color","","",null,null],[3,"Hsla","conrod::color","The parts of HSL along with an alpha for transparency.",null,null],[12,"0","","",14,null],[12,"1","","",14,null],[12,"2","","",14,null],[12,"3","","",14,null],[3,"Rgba","","The parts of RGB along with an alpha for transparency.",null,null],[12,"0","","",15,null],[12,"1","","",15,null],[12,"2","","",15,null],[12,"3","","",15,null],[4,"Color","","Color supporting RGB and HSL variants.",null,null],[13,"Rgba","","Red, Green, Blue, Alpha - All values' scales represented between 0.0 and 1.0.",16,null],[13,"Hsla","","Hue, Saturation, Lightness, Alpha - all valuess scales represented between 0.0 and 1.0.",16,null],[4,"Gradient","","Linear or Radial Gradient.",null,null],[13,"Linear","","Takes a start and end point and then a series of color stops that indicate how to interpolate between the start and end points.",17,null],[13,"Radial","","First takes a start point and inner radius. Then takes an end point and outer radius. It then takes a series of color stops that indicate how to interpolate between the inner and outer circles.",17,null],[5,"rgba","","Create RGB colors with an alpha component for transparency. The alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb","","Create RGB colors from numbers between 0.0 and 1.0.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgba_bytes","","Create RGB colors from numbers between 0 and 255 inclusive. The alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb_bytes","","Create RGB colors from numbers between 0 and 255 inclusive.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[5,"hsla","","Create HSL colors with an alpha component for transparency.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"hsl","","Create HSL colors. This gives you access to colors more like a color wheel, where all hues are arranged in a circle that you specify with radians.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"grayscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"greyscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"f32_to_byte","","Convert an f32 color to a byte.",null,{"inputs":[{"name":"f32"}],"output":{"name":"u8"}}],[5,"rgb_to_hsl","","Pure function for converting rgb to hsl.",null,null],[5,"hsl_to_rgb","","Pure function for converting hsl to rgb.",null,null],[5,"linear","","Create a linear gradient.",null,null],[5,"radial","","Create a radial gradient.",null,null],[6,"Colour","","Regional spelling alias.",null,null],[17,"LIGHT_RED","","Scarlet Red - Light - #EF2929",null,null],[17,"RED","","Scarlet Red - Regular - #CC0000",null,null],[17,"DARK_RED","","Scarlet Red - Dark - #A30000",null,null],[17,"LIGHT_ORANGE","","Orange - Light - #FCAF3E",null,null],[17,"ORANGE","","Orange - Regular - #F57900",null,null],[17,"DARK_ORANGE","","Orange - Dark - #CE5C00",null,null],[17,"LIGHT_YELLOW","","Butter - Light - #FCE94F",null,null],[17,"YELLOW","","Butter - Regular - #EDD400",null,null],[17,"DARK_YELLOW","","Butter - Dark - #C4A000",null,null],[17,"LIGHT_GREEN","","Chameleon - Light - #8AE234",null,null],[17,"GREEN","","Chameleon - Regular - #73D216",null,null],[17,"DARK_GREEN","","Chameleon - Dark - #4E9A06",null,null],[17,"LIGHT_BLUE","","Sky Blue - Light - #729FCF",null,null],[17,"BLUE","","Sky Blue - Regular - #3465A4",null,null],[17,"DARK_BLUE","","Sky Blue - Dark - #204A87",null,null],[17,"LIGHT_PURPLE","","Plum - Light - #AD7FA8",null,null],[17,"PURPLE","","Plum - Regular - #75507B",null,null],[17,"DARK_PURPLE","","Plum - Dark - #5C3566",null,null],[17,"LIGHT_BROWN","","Chocolate - Light - #E9B96E",null,null],[17,"BROWN","","Chocolate - Regular - #C17D11",null,null],[17,"DARK_BROWN","","Chocolate - Dark - #8F5902",null,null],[17,"BLACK","","Straight Black.",null,null],[17,"WHITE","","Straight White.",null,null],[17,"LIGHT_GRAY","","Alluminium - Light",null,null],[17,"GRAY","","Alluminium - Regular",null,null],[17,"DARK_GRAY","","Alluminium - Dark",null,null],[17,"LIGHT_GREY","","Aluminium - Light - #EEEEEC",null,null],[17,"GREY","","Aluminium - Regular - #D3D7CF",null,null],[17,"DARK_GREY","","Aluminium - Dark - #BABDB6",null,null],[17,"LIGHT_CHARCOAL","","Charcoal - Light - #888A85",null,null],[17,"CHARCOAL","","Charcoal - Regular - #555753",null,null],[17,"DARK_CHARCOAL","","Charcoal - Dark - #2E3436",null,null],[17,"TRANSPARENT","","Transparent",null,null],[8,"Colorable","","Types that can be colored.",null,null],[10,"color","","Set the color of the widget.",18,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"rgba","","Set the color of the widget from rgba values.",18,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"rgb","","Set the color of the widget from rgb values.",18,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsla","","Set the color of the widget from hsla values.",18,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsl","","Set the color of the widget from hsl values.",18,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"complement","","Produce a complementary color. The two colors will accent each other. This is the same as rotating the hue by 180 degrees.",16,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"luminance","","Calculate and return the luminance of the Color.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"plain_contrast","","Return either black or white, depending which contrasts the Color the most. This will be useful for determining a readable color for text on any given background Color.",16,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_hsl","","Extract the components of a color in the HSL format.",16,{"inputs":[{"name":"self"}],"output":{"name":"hsla"}}],[11,"to_rgb","","Extract the components of a color in the RGB format.",16,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_fsa","","Extract the components of a color in the RGB format within a fixed-size array.",16,null],[11,"to_byte_fsa","","Same as `to_fsa`, except r, g, b and a are represented in byte form.",16,null],[11,"with_luminance","","Return the same color but with the given luminance.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"alpha","","Return the same color but with the alpha multiplied by the given alpha.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"with_alpha","","Return the same color but with the given alpha.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"highlighted","","Return a highlighted version of the current Color.",16,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clicked","","Return a clicked version of the current Color.",16,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"invert","","Return the Color's invert.",16,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"red","","Return the red value.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"green","","Return the green value.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"blue","","Return the blue value.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_red","","Set the red value.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_green","","Set the green value.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_blue","","Set the blue value.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"hsla"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[0,"event","conrod","Contains all types used to describe the input events that `Widget`s may handle.",null,null],[4,"Input","conrod::event","Models input events.",null,null],[13,"Press","","Pressed a button.",19,null],[13,"Release","","Released a button.",19,null],[13,"Move","","Moved mouse cursor.",19,null],[13,"Text","","Text (usually from keyboard).",19,null],[13,"Resize","","Window got resized.",19,null],[13,"Focus","","Window gained or lost focus.",19,null],[13,"Cursor","","Window gained or lost cursor.",19,null],[13,"Close","","Window closed.",19,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",20,null],[13,"MouseRelative","","x and y in relative coordinates.",20,null],[13,"MouseScroll","","x and y in scroll ticks.",20,null],[13,"ControllerAxis","","controller axis move event.",20,null],[13,"Touch","","touch event.",20,null],[3,"Text","","Contains all relevant information for a Text event.",null,null],[12,"string","","All text that was entered as a part of the event.",21,null],[12,"modifiers","","The modifier keys that were down at the time.",21,null],[3,"Move","","Contains all relevant information for a Motion event.",null,null],[12,"motion","","The type of `Motion` that occurred.",22,null],[12,"modifiers","","The modifier keys that were down at the time.",22,null],[3,"Press","","Contains all relevant information for a Press event.",null,null],[12,"button","","The `Button` that was pressed.",23,null],[12,"modifiers","","The modifier keys that were down at the time.",23,null],[3,"MousePress","","Contains all relevant information for the event where a mouse button was pressed.",null,null],[12,"button","","The mouse button that was pressed.",24,null],[12,"xy","","The location at which the mouse was pressed.",24,null],[12,"modifiers","","The modifier keys that were down at the time.",24,null],[3,"KeyPress","","Contains all relevant information for the event where a keyboard button was pressed.",null,null],[12,"key","","The key that was pressed.",25,null],[12,"modifiers","","The modifier keys that were down at the time.",25,null],[3,"Release","","Contains all relevant information for a Release event.",null,null],[12,"button","","The `Button` that was released.",26,null],[12,"modifiers","","The modifier keys that were down at the time.",26,null],[3,"MouseRelease","","Contains all relevant information for the event where a mouse button was released.",null,null],[12,"button","","The mouse button that was released.",27,null],[12,"xy","","The location at which the mouse was released.",27,null],[12,"modifiers","","The modifier keys that were down at the time.",27,null],[3,"KeyRelease","","Contains all relevant information for the event where a keyboard button was release.",null,null],[12,"key","","The key that was release.",28,null],[12,"modifiers","","The modifier keys that were down at the time.",28,null],[3,"Drag","","Contains all the relevant information for a mouse drag.",null,null],[12,"button","","Which mouse button was being held during the drag",29,null],[12,"origin","","The point from which the current series of drag events began.",29,null],[12,"from","","The point from which this drag event began.",29,null],[12,"to","","The point at which this drag event ended.",29,null],[12,"delta_xy","","The magnitude of the vector between `from` and `to`.",29,null],[12,"total_delta_xy","","The magnitude of the vector between `origin` and `to`.",29,null],[12,"modifiers","","Which modifier keys are being held during the mouse drag.",29,null],[3,"Click","","Contains all the relevant information for a mouse click.",null,null],[12,"button","","Which mouse button was clicked",30,null],[12,"xy","","The position at which the mouse was released.",30,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",30,null],[3,"DoubleClick","","Contains all the relevant information for a double click.",null,null],[12,"button","","Which mouse button was clicked",31,null],[12,"xy","","The position at which the mouse was released.",31,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",31,null],[3,"Scroll","","Holds all the relevant information about a scroll event",null,null],[12,"x","","The amount of scroll along the x axis.",32,null],[12,"y","","The amount of scroll along the y axis.",32,null],[12,"modifiers","","Which modifier keys, if any, that were being held down while the scroll occured",32,null],[4,"Event","","Enum containing all the events that the `Ui` may provide.",null,null],[13,"Raw","","Represents a raw `input::Input` event.",33,null],[13,"Ui","","Events that have been interpreted from `backend::RawEvent`s by the `Ui`.",33,null],[4,"Ui","","Represents all events interpreted by the `Ui`.",null,null],[13,"Text","","Entered text, along with the widget that was capturing the keyboard at the time.",34,null],[13,"Press","","Some button was pressed, along with the widget that was capturing the device whose button which was pressed.",34,null],[13,"Release","","Some button was released, along with the widget that was capturing the device whose button which was released.",34,null],[13,"Move","","Represents all forms of motion input, alongside with the widget that was capturing the mouse at the time.",34,null],[13,"WindowResized","","The window's dimensions were resized.",34,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",34,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",34,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",34,null],[13,"Scroll","","A generic scroll event.",34,null],[13,"WidgetCapturesMouse","","Indicates that the given widget has captured the mouse.",34,null],[13,"WidgetUncapturesMouse","","Indicates that the given widget has released the mouse from capturing.",34,null],[13,"WidgetCapturesKeyboard","","Indicates that the given widget has captured the keyboard.",34,null],[13,"WidgetUncapturesKeyboard","","Indicates that the given widget has released the keyboard from capturing.",34,null],[4,"Widget","","Events that apply to a specific widget.",null,null],[13,"Text","","Entered text.",35,null],[13,"Move","","Represents all forms of motion input.",35,null],[13,"Press","","Some button was pressed.",35,null],[13,"Release","","Some button was released.",35,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",35,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",35,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",35,null],[13,"Scroll","","Represents the amount of scroll that has been applied to this widget.",35,null],[13,"WindowResized","","The window's dimensions were resized.",35,null],[13,"CapturesMouse","","The widget has captured the mouse.",35,null],[13,"UncapturesMouse","","The widget has released the mouse from capturing.",35,null],[13,"CapturesKeyboard","","The widget has captured the keyboard.",35,null],[13,"UncapturesKeyboard","","Indicates that the given widget has released the keyboard from capturing.",35,null],[4,"Button","","The different kinds of `Button`s that may be `Press`ed or `Release`d.",null,null],[13,"Keyboard","","A keyboard button.",36,null],[13,"Mouse","","A mouse button along with the location at which it was `Press`ed/`Release`d.",36,null],[13,"Controller","","A controller button.",36,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"press"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"press"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"press"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"mousepress"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"mousepress"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mousepress"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"keypress"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"keypress"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"keypress"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"release"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"release"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"release"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"mouserelease"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"mouserelease"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"mouserelease"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"keyrelease"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"keyrelease"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"keyrelease"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"click"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"click"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"click"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"doubleclick"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"doubleclick"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"doubleclick"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"scroll"}}],[11,"relative_to","","Returns a copy of the `Move` relative to the given `xy`",22,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"move"}}],[11,"relative_to","","Returns a copy of the Button relative to the given `xy`",36,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"button"}}],[11,"relative_to","","Returns a copy of the Press relative to the given `xy`",23,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"press"}}],[11,"mouse","","If the `Press` event represents the pressing of a mouse button, return `Some`.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"key","","If the `Press` event represents the pressing of keyboard button, return `Some`.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"relative_to","","Returns a copy of the Release relative to the given `xy`",26,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"release"}}],[11,"mouse","","If the `Release` event represents the releasing of a mouse button, return `Some`.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"key","","If the `Release` event represents the release of keyboard button, return `Some`.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"relative_to","","Returns a copy of the Click relative to the given `xy`",30,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"click"}}],[11,"relative_to","","Returns a copy of the DoubleClick relative to the given `xy`",31,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"doubleclick"}}],[11,"relative_to","","Returns a copy of the Drag relative to the given `xy`",29,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"drag"}}],[11,"from","","",33,{"inputs":[{"name":"ui"}],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"input"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"move"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"press"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"release"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"click"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"doubleclick"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"scroll"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"drag"}],"output":{"name":"self"}}],[0,"graph","conrod","Conrod uses a directed acyclic graph to manage both storing widgets and describing their relationships.",null,null],[8,"Walker","conrod::graph","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",37,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given **Graph**.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given **Graph**.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_node","","The next node in our walk for the given **Graph**.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",37,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",37,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",37,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",37,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",37,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",37,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",37,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",37,{"inputs":[{"name":"self"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",37,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iterweights"}}],[3,"UniqueWidgetState","","The state type that we'll dynamically cast to and from `Any` for storage within the cache.",null,null],[12,"state","","A **Widget**'s unique \"State\".",38,null],[12,"style","","A **Widget**'s unique \"Style\".",38,null],[3,"Container","","A container for caching a Widget's state inside a Graph Node.",null,null],[12,"maybe_state","","Dynamically stored widget state.",39,null],[12,"type_id","","The unique `TypeId` associated with the `Widget::State`.",39,null],[12,"rect","","The rectangle describing the Widget's area.",39,null],[12,"depth","","The depth at which the widget will be rendered comparatively to its siblings.",39,null],[12,"kid_area","","The area in which child widgets are placed.",39,null],[12,"maybe_floating","","Whether or not the widget is a \"Floating\" widget.",39,null],[12,"crop_kids","","Whether or not children widgets should be cropped to the `kid_area`.",39,null],[12,"maybe_x_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",39,null],[12,"maybe_y_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",39,null],[12,"instantiation_order_idx","","Represents the Widget's position within the overall instantiation ordering of the widgets.",39,null],[3,"Graph","","Stores the dynamic state of a UI tree of Widgets.",null,null],[4,"Node","","A node for use within the **Graph**.",null,null],[13,"Widget","","A widget constructed by a user.",40,null],[13,"Placeholder","","A placeholder node - used when reserving a place for a **Widget** within the **Graph**.",40,null],[4,"Edge","","An edge between nodes within the UI Graph.",null,null],[13,"Position","","Describes the relative positioning of widgets.",41,null],[13,"Depth","","Describes the rendering order of the widgets.",41,null],[13,"Graphic","","Describes when a widget is used solely as a graphical element for another widget.",41,null],[0,"algo","","This module was created in order to keep the `graph` module clean and focused upon the **Graph** data structure behaviour.",null,null],[3,"PickWidgets","conrod::graph::algo","A node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[3,"PickScrollableWidgets","","A node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_widgets","","Produces a graph node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_scrollable_widgets","","Produces a graph node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"cropped_area_of_widget","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"}],"output":{"name":"option"}}],[5,"cropped_area_of_widget_within_depth","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"},{"name":"id"}],"output":{"name":"option"}}],[5,"kids_bounding_box","","Find the absolute `Rect` that bounds all widgets that are `Depth` children of the widget at the given `idx`.",null,{"inputs":[{"name":"graph"},{"name":"hashset"},{"name":"id"}],"output":{"name":"option"}}],[5,"scroll_offset","","Return the `scroll_offset` for the widget at the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"}],"output":{"name":"point"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pickwidgets"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"pickscrollablewidgets"}}],[11,"next_including_graphics_children","","The next `widget::Id` under the `xy` location.",42,null],[11,"next","","The `widget::Id` of the next `Widget` under the `xy` location.",42,null],[11,"next","","The `widget::Id` of the next scrollable `Widget` under the `xy` location.",43,null],[0,"depth_order","conrod::graph","Types and functionality related to the calculation of a **Graph**'s rendering depth order.",null,null],[3,"DepthOrder","conrod::graph::depth_order","Contains Node indices in order of depth, starting with the deepest.",null,null],[12,"indices","","The primary **Vec** storing the **DepthOrder**'s ordered indices.",44,null],[11,"new","","Construct a new empty **DepthOrder**.",44,{"inputs":[],"output":{"name":"depthorder"}}],[11,"with_node_capacity","","Construct a new empty **DepthOrder**.",44,{"inputs":[{"name":"usize"}],"output":{"name":"depthorder"}}],[11,"update","","Update the **DepthOrder** (starting with the deepest) for all nodes in the given **Graph**.",44,{"inputs":[{"name":"self"},{"name":"graph"},{"name":"id"},{"name":"hashset"}],"output":null}],[6,"EdgeIndex","conrod::graph","An alias for our Graph's Edge Index.",null,null],[6,"IndexPair","","An alias for a tuple containing an associated `Edge/widget::Id` pair.",null,null],[6,"Parents","","A **Walker** over some node's parent nodes.",null,null],[6,"Children","","A **Walker** over some node's child nodes.",null,null],[6,"PositionParents","","An alias for the iterator yielding both **X** and **Y** **Position** parents.",null,null],[6,"FilteredChildren","","An alias for some filtered children walker.",null,null],[6,"DepthChildren","","An alias for a **Walker** over a node's **Depth** children.",null,null],[6,"XPositionChildren","","An alias for a **Walker** over a node's **X Position** children.",null,null],[6,"YPositionChildren","","An alias for a **Walker** over a node's **Y Position** children.",null,null],[6,"PositionChildren","","An alias for a **Walker** over a node's **X** and **Y** **Position** children respectively.",null,null],[6,"GraphicChildren","","An alias for a **Walker** over a node's **Graphic** children.",null,null],[6,"RecursiveWalk","","An alias for our Graph's recursive walker.",null,null],[6,"WouldCycle","","An alias for our Graph's **WouldCycle** error type.",null,null],[17,"NUM_EDGE_VARIANTS","","The number of different variants within the **Edge** enum.",null,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"state_and_style","","Borrow the **Container**'s unique widget State and Style if there is any.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unique_widget_state","","Same as **Container::state_and_style** but accessed using a **Widget** type parameter instead of the unique State and Style types.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_widget","","Whether or not the **Node** is of the **Widget** variant.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","A new empty **Graph**.",45,{"inputs":[],"output":{"name":"self"}}],[11,"with_node_capacity","","A new **Graph** with the given node capacity.",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all **Node**s and **Edge**s from the **Graph**.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"node_count","","The total number of **Node**s in the **Graph**.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"widget_count","","The total number of **Node::Widget**s in the **Graph**.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of **Edge**s in the **Graph**.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"node_capacity","","The current capacity for the **Graph**'s internal node `Vec`.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_placeholder","","Add a new placeholder node and return it's `widget::Id` into the `Graph`.",45,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node","","Borrow the node at the given **widget::Id** if there is one.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"node_mut","","Mutably borrow the node at the given **widget::Id** if there is one.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"edge","","Borrow the edge at the given **EdgeIndex** if there is one.",45,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_mut","","Mutably borrow the edge at the given **EdgeIndex** if there is one.",45,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Return the parent and child nodes on either end of the **Edge** at the given index.",45,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"widget","","If there is a Widget for the given index, return a reference to it.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"widget_mut","","If there is a Widget for the given Id, return a mutable reference to it.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"parents"}}],[11,"recursive_walk","","A **Walker** type that recursively walks the **Graph** using the given `recursive_fn`.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"edge_parent","","If the widget at the given index has some parent along an **Edge** of the given variant, return an index to it.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"edge"}],"output":{"name":"option"}}],[11,"depth_parent","","Return the index of the parent along the given widget's **Depth** **Edge**.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"x_position_parent","","Return the index of the parent along the given widget's **Position** **Edge**.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"y_position_parent","","Return the index of the parent along the given widget's **Position** **Edge**.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"position_parents","","Produces an iterator yielding the parents along both the **X** and **Y** **Position** **Edge**s respectively.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"positionparents"}}],[11,"graphic_parent","","Return the index of the parent along the given widget's **Graphic** **Edge**.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"depth_parent_recursion","","A **Walker** type that recursively walks **Depth** parents starting from the given node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"x_position_parent_recursion","","A **Walker** type that recursively walks **X** **Position** parents starting from the given node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"y_position_parent_recursion","","A **Walker** type that recursively walks **Y** **Position** parents starting from the given node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"graphic_parent_recursion","","A **Walker** type that recursively walks **Graphic** parents starting from the given node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"scrollable_y_parent_recursion","","A **Walker** type that recursively walks **Depth** parents that are scrollable along the *y* axis for the given node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"scrollable_x_parent_recursion","","A **Walker** type that recursively walks **Depth** parents that are scrollable along the *x* axis for the given node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"children","","A **Walker** type that may be used to step through the children of the given parent node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"children"}}],[11,"depth_children","","For walking the **Depth** children of the given parent node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"depthchildren"}}],[11,"x_position_children","","For walking the **Position(X)** children of the given parent node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"xpositionchildren"}}],[11,"y_position_children","","For walking the **Position(Y)** children of the given parent node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ypositionchildren"}}],[11,"position_children","","For walking the **Position** children of the given parent node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"positionchildren"}}],[11,"graphic_children","","For walking the **Graphic** children of the given parent node.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"graphicchildren"}}],[11,"does_edge_exist","","Does the given edge type exist between the nodes `parent` -> `child`.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_depth_edge_exist","","Does a **Edge::Depth** exist between the nodes `parent` -> `child`.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_position_edge_exist","","Does a **Edge::Position** exist between the nodes `parent` -> `child`.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_graphic_edge_exist","","Does a **Edge::Graphic** exist between the nodes `parent` -> `child`.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_recursive_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of edges of the given kind?",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_recursive_depth_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of **Depth** edges?",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_recursive_graphic_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of **Graphic** edges?",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"pre_update_cache","","Cache some `PreUpdateCache` widget data into the graph.",45,{"inputs":[{"name":"self"},{"name":"id"},{"name":"preupdatecache"},{"name":"usize"}],"output":null}],[11,"post_update_cache","","Cache some `PostUpdateCache` widget data into the graph.",45,{"inputs":[{"name":"self"},{"name":"postupdatecache"}],"output":null}],[11,"next","","",46,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next","","",47,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"index","","",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"node"}}],[11,"index_mut","","",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"node"}}],[11,"index","","",45,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"index_mut","","",45,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[0,"guide","conrod","**The Conrod Guide**",null,null],[0,"chapter_1","conrod::guide","**What is Conrod?**",null,null],[0,"chapter_2","","**Getting Started**",null,null],[0,"image","conrod","A type used to manage a user's image data and map them to `Image` widgets:",null,null],[3,"Map","conrod::image","A type used to map the `widget::Id` of `Image` widgets to their associated `Img` data.",null,null],[12,"trigger_redraw","","Whether or not the `image::Map` will trigger a redraw the next time `Ui::draw` is called.",48,null],[6,"HashMap","","The type of `std::collections::HashMap` used within the `image::Map`.",null,null],[11,"deref","","",48,null],[11,"new","","Construct a new, empty `image::Map`.",48,{"inputs":[],"output":{"name":"self"}}],[11,"get_mut","","Uniquely borrow the `Img` associated with the given widget.",48,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"insert","","Inserts the given widget-image pair into the map.",48,{"inputs":[{"name":"self"},{"name":"id"},{"name":"img"}],"output":{"name":"option"}}],[11,"extend","","",48,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"input","conrod","This module contains all the logic for handling input events and providing them to widgets.",null,null],[3,"ModifierKey","conrod::input","",null,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",49,null],[13,"Mouse","","A mouse button.",49,null],[13,"Controller","","A controller button.",49,null],[3,"ControllerButton","","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",50,null],[12,"button","","Which button was pressed.",50,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",51,null],[12,"axis","","The axis that moved.",51,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",51,null],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","conrod::input::keyboard","",null,null],[17,"NO_MODIFIER","","No modifier.",null,null],[17,"CTRL","","Ctrl.",null,null],[17,"SHIFT","","Shift.",null,null],[17,"ALT","","Alt.",null,null],[17,"GUI","","Gui.",null,null],[17,"CTRL_SHIFT","","Ctrl + Shift.",null,null],[17,"CTRL_ALT","","Ctrl + Alt.",null,null],[17,"CTRL_GUI","","Ctrl + Gui.",null,null],[17,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",null,null],[17,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",null,null],[17,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",null,null],[17,"SHIFT_ALT","","Shift + Alt.",null,null],[17,"SHIFT_GUI","","Shift + Gui.",null,null],[17,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",null,null],[17,"ALT_GUI","","Alt + Gui.",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",52,null],[13,"Backspace","","",52,null],[13,"Tab","","",52,null],[13,"Return","","",52,null],[13,"Escape","","",52,null],[13,"Space","","",52,null],[13,"Exclaim","","",52,null],[13,"Quotedbl","","",52,null],[13,"Hash","","",52,null],[13,"Dollar","","",52,null],[13,"Percent","","",52,null],[13,"Ampersand","","",52,null],[13,"Quote","","",52,null],[13,"LeftParen","","",52,null],[13,"RightParen","","",52,null],[13,"Asterisk","","",52,null],[13,"Plus","","",52,null],[13,"Comma","","",52,null],[13,"Minus","","",52,null],[13,"Period","","",52,null],[13,"Slash","","",52,null],[13,"D0","","",52,null],[13,"D1","","",52,null],[13,"D2","","",52,null],[13,"D3","","",52,null],[13,"D4","","",52,null],[13,"D5","","",52,null],[13,"D6","","",52,null],[13,"D7","","",52,null],[13,"D8","","",52,null],[13,"D9","","",52,null],[13,"Colon","","",52,null],[13,"Semicolon","","",52,null],[13,"Less","","",52,null],[13,"Equals","","",52,null],[13,"Greater","","",52,null],[13,"Question","","",52,null],[13,"At","","",52,null],[13,"LeftBracket","","",52,null],[13,"Backslash","","",52,null],[13,"RightBracket","","",52,null],[13,"Caret","","",52,null],[13,"Underscore","","",52,null],[13,"Backquote","","",52,null],[13,"A","","",52,null],[13,"B","","",52,null],[13,"C","","",52,null],[13,"D","","",52,null],[13,"E","","",52,null],[13,"F","","",52,null],[13,"G","","",52,null],[13,"H","","",52,null],[13,"I","","",52,null],[13,"J","","",52,null],[13,"K","","",52,null],[13,"L","","",52,null],[13,"M","","",52,null],[13,"N","","",52,null],[13,"O","","",52,null],[13,"P","","",52,null],[13,"Q","","",52,null],[13,"R","","",52,null],[13,"S","","",52,null],[13,"T","","",52,null],[13,"U","","",52,null],[13,"V","","",52,null],[13,"W","","",52,null],[13,"X","","",52,null],[13,"Y","","",52,null],[13,"Z","","",52,null],[13,"Delete","","",52,null],[13,"CapsLock","","",52,null],[13,"F1","","",52,null],[13,"F2","","",52,null],[13,"F3","","",52,null],[13,"F4","","",52,null],[13,"F5","","",52,null],[13,"F6","","",52,null],[13,"F7","","",52,null],[13,"F8","","",52,null],[13,"F9","","",52,null],[13,"F10","","",52,null],[13,"F11","","",52,null],[13,"F12","","",52,null],[13,"PrintScreen","","",52,null],[13,"ScrollLock","","",52,null],[13,"Pause","","",52,null],[13,"Insert","","",52,null],[13,"Home","","",52,null],[13,"PageUp","","",52,null],[13,"End","","",52,null],[13,"PageDown","","",52,null],[13,"Right","","",52,null],[13,"Left","","",52,null],[13,"Down","","",52,null],[13,"Up","","",52,null],[13,"NumLockClear","","",52,null],[13,"NumPadDivide","","",52,null],[13,"NumPadMultiply","","",52,null],[13,"NumPadMinus","","",52,null],[13,"NumPadPlus","","",52,null],[13,"NumPadEnter","","",52,null],[13,"NumPad1","","",52,null],[13,"NumPad2","","",52,null],[13,"NumPad3","","",52,null],[13,"NumPad4","","",52,null],[13,"NumPad5","","",52,null],[13,"NumPad6","","",52,null],[13,"NumPad7","","",52,null],[13,"NumPad8","","",52,null],[13,"NumPad9","","",52,null],[13,"NumPad0","","",52,null],[13,"NumPadPeriod","","",52,null],[13,"Application","","",52,null],[13,"Power","","",52,null],[13,"NumPadEquals","","",52,null],[13,"F13","","",52,null],[13,"F14","","",52,null],[13,"F15","","",52,null],[13,"F16","","",52,null],[13,"F17","","",52,null],[13,"F18","","",52,null],[13,"F19","","",52,null],[13,"F20","","",52,null],[13,"F21","","",52,null],[13,"F22","","",52,null],[13,"F23","","",52,null],[13,"F24","","",52,null],[13,"Execute","","",52,null],[13,"Help","","",52,null],[13,"Menu","","",52,null],[13,"Select","","",52,null],[13,"Stop","","",52,null],[13,"Again","","",52,null],[13,"Undo","","",52,null],[13,"Cut","","",52,null],[13,"Copy","","",52,null],[13,"Paste","","",52,null],[13,"Find","","",52,null],[13,"Mute","","",52,null],[13,"VolumeUp","","",52,null],[13,"VolumeDown","","",52,null],[13,"NumPadComma","","",52,null],[13,"NumPadEqualsAS400","","",52,null],[13,"AltErase","","",52,null],[13,"Sysreq","","",52,null],[13,"Cancel","","",52,null],[13,"Clear","","",52,null],[13,"Prior","","",52,null],[13,"Return2","","",52,null],[13,"Separator","","",52,null],[13,"Out","","",52,null],[13,"Oper","","",52,null],[13,"ClearAgain","","",52,null],[13,"CrSel","","",52,null],[13,"ExSel","","",52,null],[13,"NumPad00","","",52,null],[13,"NumPad000","","",52,null],[13,"ThousandsSeparator","","",52,null],[13,"DecimalSeparator","","",52,null],[13,"CurrencyUnit","","",52,null],[13,"CurrencySubUnit","","",52,null],[13,"NumPadLeftParen","","",52,null],[13,"NumPadRightParen","","",52,null],[13,"NumPadLeftBrace","","",52,null],[13,"NumPadRightBrace","","",52,null],[13,"NumPadTab","","",52,null],[13,"NumPadBackspace","","",52,null],[13,"NumPadA","","",52,null],[13,"NumPadB","","",52,null],[13,"NumPadC","","",52,null],[13,"NumPadD","","",52,null],[13,"NumPadE","","",52,null],[13,"NumPadF","","",52,null],[13,"NumPadXor","","",52,null],[13,"NumPadPower","","",52,null],[13,"NumPadPercent","","",52,null],[13,"NumPadLess","","",52,null],[13,"NumPadGreater","","",52,null],[13,"NumPadAmpersand","","",52,null],[13,"NumPadDblAmpersand","","",52,null],[13,"NumPadVerticalBar","","",52,null],[13,"NumPadDblVerticalBar","","",52,null],[13,"NumPadColon","","",52,null],[13,"NumPadHash","","",52,null],[13,"NumPadSpace","","",52,null],[13,"NumPadAt","","",52,null],[13,"NumPadExclam","","",52,null],[13,"NumPadMemStore","","",52,null],[13,"NumPadMemRecall","","",52,null],[13,"NumPadMemClear","","",52,null],[13,"NumPadMemAdd","","",52,null],[13,"NumPadMemSubtract","","",52,null],[13,"NumPadMemMultiply","","",52,null],[13,"NumPadMemDivide","","",52,null],[13,"NumPadPlusMinus","","",52,null],[13,"NumPadClear","","",52,null],[13,"NumPadClearEntry","","",52,null],[13,"NumPadBinary","","",52,null],[13,"NumPadOctal","","",52,null],[13,"NumPadDecimal","","",52,null],[13,"NumPadHexadecimal","","",52,null],[13,"LCtrl","","",52,null],[13,"LShift","","",52,null],[13,"LAlt","","",52,null],[13,"LGui","","",52,null],[13,"RCtrl","","",52,null],[13,"RShift","","",52,null],[13,"RAlt","","",52,null],[13,"RGui","","",52,null],[13,"Mode","","",52,null],[13,"AudioNext","","",52,null],[13,"AudioPrev","","",52,null],[13,"AudioStop","","",52,null],[13,"AudioPlay","","",52,null],[13,"AudioMute","","",52,null],[13,"MediaSelect","","",52,null],[13,"Www","","",52,null],[13,"Mail","","",52,null],[13,"Calculator","","",52,null],[13,"Computer","","",52,null],[13,"AcSearch","","",52,null],[13,"AcHome","","",52,null],[13,"AcBack","","",52,null],[13,"AcForward","","",52,null],[13,"AcStop","","",52,null],[13,"AcRefresh","","",52,null],[13,"AcBookmarks","","",52,null],[13,"BrightnessDown","","",52,null],[13,"BrightnessUp","","",52,null],[13,"DisplaySwitch","","",52,null],[13,"KbdIllumToggle","","",52,null],[13,"KbdIllumDown","","",52,null],[13,"KbdIllumUp","","",52,null],[13,"Eject","","",52,null],[13,"Sleep","","",52,null],[4,"Key","conrod::input","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",52,null],[13,"Backspace","","",52,null],[13,"Tab","","",52,null],[13,"Return","","",52,null],[13,"Escape","","",52,null],[13,"Space","","",52,null],[13,"Exclaim","","",52,null],[13,"Quotedbl","","",52,null],[13,"Hash","","",52,null],[13,"Dollar","","",52,null],[13,"Percent","","",52,null],[13,"Ampersand","","",52,null],[13,"Quote","","",52,null],[13,"LeftParen","","",52,null],[13,"RightParen","","",52,null],[13,"Asterisk","","",52,null],[13,"Plus","","",52,null],[13,"Comma","","",52,null],[13,"Minus","","",52,null],[13,"Period","","",52,null],[13,"Slash","","",52,null],[13,"D0","","",52,null],[13,"D1","","",52,null],[13,"D2","","",52,null],[13,"D3","","",52,null],[13,"D4","","",52,null],[13,"D5","","",52,null],[13,"D6","","",52,null],[13,"D7","","",52,null],[13,"D8","","",52,null],[13,"D9","","",52,null],[13,"Colon","","",52,null],[13,"Semicolon","","",52,null],[13,"Less","","",52,null],[13,"Equals","","",52,null],[13,"Greater","","",52,null],[13,"Question","","",52,null],[13,"At","","",52,null],[13,"LeftBracket","","",52,null],[13,"Backslash","","",52,null],[13,"RightBracket","","",52,null],[13,"Caret","","",52,null],[13,"Underscore","","",52,null],[13,"Backquote","","",52,null],[13,"A","","",52,null],[13,"B","","",52,null],[13,"C","","",52,null],[13,"D","","",52,null],[13,"E","","",52,null],[13,"F","","",52,null],[13,"G","","",52,null],[13,"H","","",52,null],[13,"I","","",52,null],[13,"J","","",52,null],[13,"K","","",52,null],[13,"L","","",52,null],[13,"M","","",52,null],[13,"N","","",52,null],[13,"O","","",52,null],[13,"P","","",52,null],[13,"Q","","",52,null],[13,"R","","",52,null],[13,"S","","",52,null],[13,"T","","",52,null],[13,"U","","",52,null],[13,"V","","",52,null],[13,"W","","",52,null],[13,"X","","",52,null],[13,"Y","","",52,null],[13,"Z","","",52,null],[13,"Delete","","",52,null],[13,"CapsLock","","",52,null],[13,"F1","","",52,null],[13,"F2","","",52,null],[13,"F3","","",52,null],[13,"F4","","",52,null],[13,"F5","","",52,null],[13,"F6","","",52,null],[13,"F7","","",52,null],[13,"F8","","",52,null],[13,"F9","","",52,null],[13,"F10","","",52,null],[13,"F11","","",52,null],[13,"F12","","",52,null],[13,"PrintScreen","","",52,null],[13,"ScrollLock","","",52,null],[13,"Pause","","",52,null],[13,"Insert","","",52,null],[13,"Home","","",52,null],[13,"PageUp","","",52,null],[13,"End","","",52,null],[13,"PageDown","","",52,null],[13,"Right","","",52,null],[13,"Left","","",52,null],[13,"Down","","",52,null],[13,"Up","","",52,null],[13,"NumLockClear","","",52,null],[13,"NumPadDivide","","",52,null],[13,"NumPadMultiply","","",52,null],[13,"NumPadMinus","","",52,null],[13,"NumPadPlus","","",52,null],[13,"NumPadEnter","","",52,null],[13,"NumPad1","","",52,null],[13,"NumPad2","","",52,null],[13,"NumPad3","","",52,null],[13,"NumPad4","","",52,null],[13,"NumPad5","","",52,null],[13,"NumPad6","","",52,null],[13,"NumPad7","","",52,null],[13,"NumPad8","","",52,null],[13,"NumPad9","","",52,null],[13,"NumPad0","","",52,null],[13,"NumPadPeriod","","",52,null],[13,"Application","","",52,null],[13,"Power","","",52,null],[13,"NumPadEquals","","",52,null],[13,"F13","","",52,null],[13,"F14","","",52,null],[13,"F15","","",52,null],[13,"F16","","",52,null],[13,"F17","","",52,null],[13,"F18","","",52,null],[13,"F19","","",52,null],[13,"F20","","",52,null],[13,"F21","","",52,null],[13,"F22","","",52,null],[13,"F23","","",52,null],[13,"F24","","",52,null],[13,"Execute","","",52,null],[13,"Help","","",52,null],[13,"Menu","","",52,null],[13,"Select","","",52,null],[13,"Stop","","",52,null],[13,"Again","","",52,null],[13,"Undo","","",52,null],[13,"Cut","","",52,null],[13,"Copy","","",52,null],[13,"Paste","","",52,null],[13,"Find","","",52,null],[13,"Mute","","",52,null],[13,"VolumeUp","","",52,null],[13,"VolumeDown","","",52,null],[13,"NumPadComma","","",52,null],[13,"NumPadEqualsAS400","","",52,null],[13,"AltErase","","",52,null],[13,"Sysreq","","",52,null],[13,"Cancel","","",52,null],[13,"Clear","","",52,null],[13,"Prior","","",52,null],[13,"Return2","","",52,null],[13,"Separator","","",52,null],[13,"Out","","",52,null],[13,"Oper","","",52,null],[13,"ClearAgain","","",52,null],[13,"CrSel","","",52,null],[13,"ExSel","","",52,null],[13,"NumPad00","","",52,null],[13,"NumPad000","","",52,null],[13,"ThousandsSeparator","","",52,null],[13,"DecimalSeparator","","",52,null],[13,"CurrencyUnit","","",52,null],[13,"CurrencySubUnit","","",52,null],[13,"NumPadLeftParen","","",52,null],[13,"NumPadRightParen","","",52,null],[13,"NumPadLeftBrace","","",52,null],[13,"NumPadRightBrace","","",52,null],[13,"NumPadTab","","",52,null],[13,"NumPadBackspace","","",52,null],[13,"NumPadA","","",52,null],[13,"NumPadB","","",52,null],[13,"NumPadC","","",52,null],[13,"NumPadD","","",52,null],[13,"NumPadE","","",52,null],[13,"NumPadF","","",52,null],[13,"NumPadXor","","",52,null],[13,"NumPadPower","","",52,null],[13,"NumPadPercent","","",52,null],[13,"NumPadLess","","",52,null],[13,"NumPadGreater","","",52,null],[13,"NumPadAmpersand","","",52,null],[13,"NumPadDblAmpersand","","",52,null],[13,"NumPadVerticalBar","","",52,null],[13,"NumPadDblVerticalBar","","",52,null],[13,"NumPadColon","","",52,null],[13,"NumPadHash","","",52,null],[13,"NumPadSpace","","",52,null],[13,"NumPadAt","","",52,null],[13,"NumPadExclam","","",52,null],[13,"NumPadMemStore","","",52,null],[13,"NumPadMemRecall","","",52,null],[13,"NumPadMemClear","","",52,null],[13,"NumPadMemAdd","","",52,null],[13,"NumPadMemSubtract","","",52,null],[13,"NumPadMemMultiply","","",52,null],[13,"NumPadMemDivide","","",52,null],[13,"NumPadPlusMinus","","",52,null],[13,"NumPadClear","","",52,null],[13,"NumPadClearEntry","","",52,null],[13,"NumPadBinary","","",52,null],[13,"NumPadOctal","","",52,null],[13,"NumPadDecimal","","",52,null],[13,"NumPadHexadecimal","","",52,null],[13,"LCtrl","","",52,null],[13,"LShift","","",52,null],[13,"LAlt","","",52,null],[13,"LGui","","",52,null],[13,"RCtrl","","",52,null],[13,"RShift","","",52,null],[13,"RAlt","","",52,null],[13,"RGui","","",52,null],[13,"Mode","","",52,null],[13,"AudioNext","","",52,null],[13,"AudioPrev","","",52,null],[13,"AudioStop","","",52,null],[13,"AudioPlay","","",52,null],[13,"AudioMute","","",52,null],[13,"MediaSelect","","",52,null],[13,"Www","","",52,null],[13,"Mail","","",52,null],[13,"Calculator","","",52,null],[13,"Computer","","",52,null],[13,"AcSearch","","",52,null],[13,"AcHome","","",52,null],[13,"AcBack","","",52,null],[13,"AcForward","","",52,null],[13,"AcStop","","",52,null],[13,"AcRefresh","","",52,null],[13,"AcBookmarks","","",52,null],[13,"BrightnessDown","","",52,null],[13,"BrightnessUp","","",52,null],[13,"DisplaySwitch","","",52,null],[13,"KbdIllumToggle","","",52,null],[13,"KbdIllumDown","","",52,null],[13,"KbdIllumUp","","",52,null],[13,"Eject","","",52,null],[13,"Sleep","","",52,null],[4,"MouseButton","","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",53,null],[13,"Left","","Left mouse button.",53,null],[13,"Right","","Right mouse button.",53,null],[13,"Middle","","Middle mouse button.",53,null],[13,"X1","","Extra mouse button number 1.",53,null],[13,"X2","","Extra mouse button number 2.",53,null],[13,"Button6","","Mouse button number 6.",53,null],[13,"Button7","","Mouse button number 7.",53,null],[13,"Button8","","Mouse button number 8.",53,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",54,null],[12,"width","","The width of rendered area in points.",54,null],[12,"height","","The height of rendered area in points.",54,null],[12,"draw_width","","The width of rendered area in pixels.",54,null],[12,"draw_height","","The height of rendered area in pixels.",54,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",55,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",55,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",55,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",55,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",56,null],[12,"id","","A unique identifier for touch event.",56,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",56,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",56,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",56,null],[12,"px","","The x coordinate of the touch pressure direction.",56,null],[12,"py","","The y coordinate of the touch pressure direction.",56,null],[12,"pz","","The z coordinate of the touch pressure direction.",56,null],[12,"is_3d","","Whether the touch is in 3D.",56,null],[12,"touch","","The touch state.",56,null],[0,"state","","Everything related to storing the state of user input.",null,null],[3,"State","conrod::input::state","Holds the current state of user input.",null,null],[12,"mouse","","Mouse position and button state.",57,null],[12,"widget_capturing_keyboard","","Which widget, if any, is currently capturing the keyboard",57,null],[12,"widget_capturing_mouse","","Which widget, if any, is currently capturing the mouse",57,null],[12,"widget_under_mouse","","The widget that is currently under the mouse cursor.",57,null],[12,"modifiers","","Which modifier keys are being held down.",57,null],[0,"mouse","","Mouse specific state.",null,null],[4,"Button","conrod::input::state::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",53,null],[13,"Left","","Left mouse button.",53,null],[13,"Right","","Right mouse button.",53,null],[13,"Middle","","Middle mouse button.",53,null],[13,"X1","","Extra mouse button number 1.",53,null],[13,"X2","","Extra mouse button number 2.",53,null],[13,"Button6","","Mouse button number 6.",53,null],[13,"Button7","","Mouse button number 7.",53,null],[13,"Button8","","Mouse button number 8.",53,null],[3,"Mouse","","The state of the `Mouse`, including it's position and button states.",null,null],[12,"buttons","","A map that stores the up/down state of each button.",58,null],[12,"xy","","The current position of the mouse.",58,null],[3,"ButtonMap","","Stores the state of all mouse buttons.",null,null],[3,"PressedButtons","","An iterator yielding all pressed buttons.",null,null],[4,"ButtonPosition","","Whether the button is up or down.",null,null],[13,"Up","","The button is up (i.e. pressed).",59,null],[13,"Down","","The button is down and was originally pressed down at the given `Point` over the widget at the given widget::Id.",59,null],[17,"NUM_BUTTONS","","The max total number of buttons on a mouse.",null,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"mouse"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"mouse"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"mouse"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"buttonposition"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"buttonposition"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"buttonmap"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"pressedbuttons"}}],[11,"new","","Construct a new default `Mouse`.",58,{"inputs":[],"output":{"name":"self"}}],[11,"relative_to","","If the mouse button is down, return a new one with position relative to the given `xy`.",59,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_down","","Is the `ButtonPosition` down.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_up","","Is the `ButtonPosition` up.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"if_down","","Returns the position at which the button was pressed along with the widget that was under the mouse at the time of pressing if the position is `Down`.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"xy_if_down","","Returns the position at which the button was pressed if it's down.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Returns a new button map with all states set to `None`",60,{"inputs":[],"output":{"name":"self"}}],[11,"relative_to","","Returns a copy of the ButtonMap relative to the given `Point`",60,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"left","","The state of the left mouse button.",60,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"middle","","The state of the middle mouse button.",60,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"right","","The state of the right mouse button.",60,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"press","","Sets the `Button` in the `Down` position.",60,{"inputs":[{"name":"self"},{"name":"button"},{"name":"point"},{"name":"option"}],"output":null}],[11,"release","","Set's the `Button` in the `Up` position.",60,{"inputs":[{"name":"self"},{"name":"button"}],"output":null}],[11,"pressed","","An iterator yielding all pressed mouse buttons along with the location at which they were originally pressed.",60,{"inputs":[{"name":"self"}],"output":{"name":"pressedbuttons"}}],[11,"index","","",60,null],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","conrod::input::state","",57,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new","","Returns a fresh new input state",57,{"inputs":[],"output":{"name":"state"}}],[11,"relative_to","","Returns a copy of the input::State relative to the given `position::Point`",57,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"state"}}],[0,"widget","conrod::input","Contains all the logic for filtering input events and making them relative to widgets.",null,null],[3,"Widget","conrod::input::widget","Provides only events and input state that are relevant to a specific widget.",null,null],[3,"Mouse","","A view of the `input::state::Mouse` that is specific to a single widget.",null,null],[12,"buttons","","The state of each `MouseButton`.",62,null],[3,"Events","","An iterator yielding all events that are relevant to a specific widget.",null,null],[3,"Presses","","An `Iterator` yielding all button presses occuring within the given sequence of `widget::Event`s.",null,null],[3,"MousePresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses`.",null,null],[3,"MouseButtonPresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses` for some specific mouse button.",null,null],[3,"KeyPresses","","An `Iterator` yielding all keyboard button presses occuring within the given sequence of `Presses`.",null,null],[3,"Releases","","An `Iterator` yielding all button releases occuring within the given sequence of `widget::Event`s.",null,null],[3,"MouseButtonReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases` for some specific mouse button.",null,null],[3,"MouseReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases`.",null,null],[3,"KeyReleases","","An `Iterator` yielding all keyboard button releases occuring within the given sequence of `Releases`.",null,null],[3,"Clicks","","An `Iterator` yielding all mouse clicks occuring within the given sequence of `widget::Event`s.",null,null],[3,"ButtonClicks","","An `Iterator` yielding all mouse `button` clicks occuring within the given sequence of `widget::Click`s.",null,null],[3,"Drags","","An iterator that yields all `event::Drag` events yielded by the `Events` iterator.",null,null],[3,"ButtonDrags","","An `Iterator` yielding all mouse `button` drags occuring within the given sequence of `widget::Drag`s.",null,null],[3,"Texts","","An iterator that yields all `Input::Text` events yielded by the `Events` iterator.",null,null],[3,"Scrolls","","An iterator that yields all `Scroll` events yielded by the given `Events` iterator.",null,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mouse"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"presses"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"mousepresses"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"keypresses"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"releases"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"mousereleases"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"keyreleases"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"clicks"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"drags"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"texts"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"scrolls"}}],[11,"for_widget","","Returns a `Widget` with events specifically for the given widget.",63,{"inputs":[{"name":"id"},{"name":"rect"},{"name":"global"}],"output":{"name":"self"}}],[11,"mouse","","If the widget is currently capturing the mouse, this returns the state of the mouse.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"events","","Produces an iterator yielding all events that are relevant to a specific widget.",63,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"presses","","Filters all events yielded by `Self::events` other than `event::Press`es.",63,{"inputs":[{"name":"self"}],"output":{"name":"presses"}}],[11,"releases","","Filters all events yielded by `Self::events` other than `event::Release`es.",63,{"inputs":[{"name":"self"}],"output":{"name":"releases"}}],[11,"clicks","","Filters all events yielded by `Self::events` for all `event::Click`s.",63,{"inputs":[{"name":"self"}],"output":{"name":"clicks"}}],[11,"drags","","Produces an iterator that yields all `event::Drag` events yielded by the `Events` iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"drags"}}],[11,"texts","","Produces an iterator that yields all `Input::Text` events that have occurred as `&str`s since the last time `Ui::set_widgets` was called.",63,{"inputs":[{"name":"self"}],"output":{"name":"texts"}}],[11,"scrolls","","Produce an iterator that yields only the `Scroll` events yielded by the `Events` iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"scrolls"}}],[11,"abs_xy","","The absolute position of the mouse within the window.",62,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"rel_xy","","The position of the mouse relative to the middle of the widget's `Rect`.",62,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"is_over","","Is the mouse currently over the widget.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mouse","","Produces an `Iterator` that yields only the press events that correspond with mouse buttons.",65,{"inputs":[{"name":"self"}],"output":{"name":"mousepresses"}}],[11,"key","","Produces an `Iterator` that yields only the press events that correspond with keyboard buttons.",65,{"inputs":[{"name":"self"}],"output":{"name":"keypresses"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",66,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"mousebuttonpresses"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button press events.",66,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button press events.",66,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button press events.",66,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"mouse","","Produces an `Iterator` that yields only the release events that correspond with mouse buttons.",69,{"inputs":[{"name":"self"}],"output":{"name":"mousereleases"}}],[11,"key","","Produces an `Iterator` that yields only the release events that correspond with keyboard buttons.",69,{"inputs":[{"name":"self"}],"output":{"name":"keyreleases"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",71,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"mousebuttonreleases"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button release events.",71,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button release events.",71,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button release events.",71,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"button","","Yield only the `Click`s that occurred from the given button.",73,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"buttonclicks"}}],[11,"left","","Yield only left mouse button `Click`s.",73,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"middle","","Yields only middle mouse button `Click`s.",73,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"right","","Yield only right mouse button `Click`s.",73,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"button","","Yield only the `Drag`s that occurred from the given button.",75,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"buttondrags"}}],[11,"left","","Yield only left mouse button `Drag`s.",75,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"middle","","Yields only middle mouse button `Drag`s.",75,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"right","","Yield only right mouse button `Drag`s.",75,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"next","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"global","conrod::input","Handles all of the global input events and state. The core of this module is the `Global` struct. It is responsible for aggregating and interpreting raw input events into high-level semantic events.",null,null],[3,"Global","conrod::input::global","Global input event handler that also implements `input::Provider`. The `Ui` passes all events to it's `Global` instance, which aggregates and interprets the events to provide so-called 'high-level' events to widgets. This input gets reset after every update by the `Ui`.",null,null],[12,"start","","The `input::State` as it was at the end of the last update cycle.",79,null],[12,"current","","The most recent `input::State`, with updates from handling all the events this update cycle",79,null],[12,"last_click","","Tracks the last click that occurred and the time at which it occurred in order to create double-click events.",79,null],[3,"Events","","Iterator over all global `event::Event`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[3,"UiEvents","","An iterator yielding all `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"uievents"}}],[11,"new","","Returns a fresh new `Global`",79,{"inputs":[],"output":{"name":"global"}}],[11,"events","","Returns an iterator yielding all events that have occurred since the last time `Ui::set_widgets` was called.",79,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"push_event","","Add the new event to the stack.",79,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"clear_events_and_update_start_state","","Called at the end of every update cycle in order to prepare the `Global` to handle events for the next one.",79,{"inputs":[{"name":"self"}],"output":null}],[11,"ui","","Converts the `Events` into a `UiEvents`, yielding only the `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",80,{"inputs":[{"name":"self"}],"output":{"name":"uievents"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","conrod","",1,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"new","","Construct a new `Range` from a given range, i.e. `Range::new(start, end)`.",1,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"from_pos_and_len","","Construct a new `Range` from a given length and its centered position.",1,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"magnitude","","The `start` value subtracted from the `end` value.",1,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"len","","The absolute length of the Range aka the absolute magnitude.",1,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"middle","","Return the value directly between the start and end values.",1,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"invert","","The current range with its start and end values swapped.",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"map_value_to","","Map the given Scalar from `Self` to some other given `Range`.",1,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"range"}],"output":{"name":"scalar"}}],[11,"shift","","Shift the `Range` start and end points by a given `Scalar`.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"direction","","The direction of the Range represented as a normalised scalar.",1,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"undirected","","Converts the Range to an undirected Range. By ensuring that `start` <= `end`.",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"max","","The Range that encompasses both self and the given Range.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[11,"overlap","","The Range that represents the range of the overlap between two Ranges if there is some.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"max_directed","","The Range that encompasses both self and the given Range.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[11,"is_over","","Is the given scalar within our range.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"bool"}}],[11,"round","","Round the values at both ends of the Range and return the result.",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"floor","","Floor the values at both ends of the Range and return the result.",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"pad_start","","The Range with some padding given to the `start` value.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_end","","The Range with some padding given to the `end` value.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad","","The Range with some given padding to be applied to each end.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_ends","","The Range with some padding given for each end.",1,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"clamp_value","","Clamp the given value to the range.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"stretch_to_value","","Stretch the end that is closest to the given value only if it lies outside the Range.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"has_same_direction","","Does `self` have the same direction as `other`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"align_start_of","","Align the `start` of `self` to the `start` of the `other` **Range**.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_end_of","","Align the `end` of `self` to the `end` of the `other` **Range**.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_of","","Align the middle of `self` to the middle of the `other` **Range**.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_after","","Aligns the `start` of `self` with the `end` of `other`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_before","","Aligns the `end` of `self` with the `start` of `other`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_to","","Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.",1,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_edge","","The closest **Edge** of `self` to the given `scalar`.",1,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"edge"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"corner"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"corner"}}],[11,"from_xy_dim","","Construct a Rect from a given `Point` and `Dimensions`.",2,{"inputs":[{"name":"point"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"from_corners","","Construct a Rect from the coordinates of two points.",2,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"overlap","","The Rect representing the area in which two Rects overlap.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"max","","The Rect that encompass the two given sets of Rect.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"x","","The position in the middle of the x bounds.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"y","","The position in the middle of the y bounds.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"xy","","The xy position in the middle of the bounds.",2,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"x_y","","The centered x and y coordinates as a tuple.",2,null],[11,"w","","The width of the Rect.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"h","","The height of the Rect.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"dim","","The total dimensions of the Rect.",2,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"w_h","","The width and height of the Rect as a tuple.",2,null],[11,"xy_dim","","Convert the Rect to a `Point` and `Dimensions`.",2,null],[11,"x_y_w_h","","The Rect's centered coordinates and dimensions in a tuple.",2,null],[11,"len","","The length of the longest side of the rectangle.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"bottom","","The Rect's lowest y value.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"top","","The Rect's highest y value.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"left","","The Rect's lowest x value.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"right","","The Rect's highest x value.",2,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"top_left","","The top left corner **Point**.",2,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_left","","The bottom left corner **Point**.",2,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"top_right","","The top right corner **Point**.",2,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_right","","The bottom right corner **Point**.",2,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"l_r_b_t","","The edges of the **Rect** in a tuple (top, bottom, left, right).",2,null],[11,"l_t_w_h","","The left and top edges of the **Rect** along with the width and height.",2,null],[11,"l_b_w_h","","The left and bottom edges of the **Rect** along with the width and height.",2,null],[11,"shift_x","","Shift the Rect along the x axis.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift_y","","Shift the Rect along the y axis.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift","","Shift the Rect by the given Point.",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"relative_to_x","","Returns a `Rect` with a position relative to the given position on the *x* axis.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"relative_to_y","","Returns a `Rect` with a position relative to the given position on the *y* axis.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"relative_to","","Returns a `Rect` with a position relative to the given position.",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_over","","Does the given point touch the Rectangle.",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pad_left","","The Rect with some padding applied to the left edge.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","The Rect with some padding applied to the right edge.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","The rect with some padding applied to the bottom edge.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","The Rect with some padding applied to the top edge.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad","","The Rect with some padding amount applied to each edge.",2,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","The Rect with some padding applied.",2,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"self"}}],[11,"stretch_to_point","","Stretches the closest edge(s) to the given point if the point lies outside of the Rect area.",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"left_of","","Align `self`'s right edge with the left edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"right_of","","Align `self`'s left edge with the right dge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"below","","Align `self`'s top edge with the bottom edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"above","","Align `self`'s bottom edge with the top edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_x_of","","Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.",2,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_y_of","","Align `self` to `other` along the *y* axis in accordance with the given `Align` variant.",2,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_left_of","","Align `self`'s left edge with the left edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the middle of `self` with the middle of the `other` **Rect** along the *x* axis.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_right_of","","Align `self`'s right edge with the right edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align `self`'s bottom edge with the bottom edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the middle of `self` with the middle of the `other` **Rect** along the *y* axis.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_top_of","","Align `self`'s top edge with the top edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_of","","Place `self` along the top left edges of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_of","","Place `self` along the top right edges of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place `self` along the bottom left edges of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place `self` along the bottom right edges of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place `self` in the middle of the top edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place `self` in the middle of the bottom edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place `self` in the middle of the left edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place `self` in the middle of the right edge of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"middle_of","","Place `self` directly in the middle of the `other` **Rect**.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_corner","","Return the **Corner** of `self` that is closest to the given **Point**.",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"corner"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"place"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"dimension"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"none","","No padding.",0,{"inputs":[],"output":{"name":"padding"}}],[0,"render","","Conrod's generic graphics backend.",null,null],[3,"Primitives","conrod::render","An iterator-like type that yields a reference to each primitive in order of depth for rendering.",null,null],[3,"OwnedPrimitives","","An owned alternative to the `Primitives` type.",null,null],[3,"Primitive","","Data required for rendering a single primitive widget.",null,null],[12,"id","","The id of the widget within the widget graph.",82,null],[12,"kind","","State and style for this primitive widget.",82,null],[12,"scizzor","","The Rect to which the primitive widget should be cropped.",82,null],[12,"rect","","The bounding rectangle for the `Primitive`.",82,null],[3,"Text","","A type used for producing a `PositionedGlyph` iterator.",null,null],[3,"WalkOwnedPrimitives","","An iterator-like type for yielding `Primitive`s from an `OwnedPrimitives`.",null,null],[4,"PrimitiveKind","","The unique kind for each primitive element in the Ui.",null,null],[13,"Rectangle","","A filled `Rectangle`.",83,null],[12,"color","conrod::render::PrimitiveKind","The fill colour for the rectangle.",83,null],[13,"Polygon","conrod::render","A filled `Polygon`.",83,null],[12,"color","conrod::render::PrimitiveKind","The fill colour for the inner part of the polygon",83,null],[12,"points","","The ordered points that, when joined with lines, represent each side of the `Polygon`.",83,null],[13,"Lines","conrod::render","A series of consecutive `Line`s.",83,null],[12,"color","conrod::render::PrimitiveKind","The colour of each `Line`.",83,null],[12,"cap","","Whether the end of the lines should be `Flat` or `Round`.",83,null],[12,"thickness","","The thickness of the lines, i.e. the width of a vertical line or th height of a horizontal line.",83,null],[12,"points","","The ordered points which should be joined by lines.",83,null],[13,"Image","conrod::render","A single `Image`, produced by the primitive `Image` widget.",83,null],[12,"color","conrod::render::PrimitiveKind","When `Some`, colours the `Image`. When `None`, the `Image` uses its regular colours.",83,null],[12,"source_rect","","The area of the texture that will be drawn to the `Image`'s `Rect`.",83,null],[13,"Text","conrod::render","A single block of `Text`, produced by the primitive `Text` widget.",83,null],[12,"color","conrod::render::PrimitiveKind","The colour of the `Text`.",83,null],[12,"text","","All glyphs within the `Text` laid out in their correct positions in order from top-left to bottom right.",83,null],[12,"font_id","","The unique identifier for the font, useful for the `glyph_cache.rect_for(id, glyph)` method when using the `conrod::text::GlyphCache` (rusttype's GPU `Cache`).",83,null],[13,"Other","conrod::render","An `Other` variant will be yielded for every non-primitive widget in the list.",83,null],[8,"PrimitiveWalker","","A trait that allows the user to remain generic over types yielding `Primitive`s.",null,null],[10,"next_primitive","","Yield the next `Primitive` in order of depth, bottom to top.",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"ownedprimitives"}}],[11,"next_primitive","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_primitive","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"positioned_glyphs","","Produces a list of `PositionedGlyph`s which may be used to cache and render the text.",88,null],[11,"new","","Constructor for the `Primitives` iterator.",86,null],[11,"next","","Yield the next `Primitive` for rendering.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned","","Collect the `Primitives` list into an owned collection.",86,{"inputs":[{"name":"self"}],"output":{"name":"ownedprimitives"}}],[11,"walk","","Produce an iterator-like type for yielding `Primitive`s.",85,{"inputs":[{"name":"self"}],"output":{"name":"walkownedprimitives"}}],[11,"next","","Yield the next `Primitive` in order or rendering depth, bottom to top.",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"text","conrod","Text layout logic.",null,null],[3,"Glyph","conrod::text","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",89,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor *f* in the horizontal direction is achieved by setting `x` equal to *f* times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",90,null],[12,"y","","Vertical scale, in pixels.",90,null],[3,"GlyphCache","","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[3,"Lines","","An iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,null],[5,"height","","Determine the total height of a block of text with the given number of lines, font size and `line_spacing` (the space that separates each line of text).",null,{"inputs":[{"name":"usize"},{"name":"fontsize"},{"name":"scalar"}],"output":{"name":"scalar"}}],[5,"lines","","Produce an iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"lines"}}],[5,"pt_to_px","","Converts the given font size in \"points\" to its font size in pixels.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"f32"}}],[5,"pt_to_scale","","Converts the given font size in \"points\" to a uniform `rusttype::Scale`.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"scale"}}],[0,"rt","","Re-exported RustType geometrical types.",null,null],[3,"Point","conrod::text::rt","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",91,null],[12,"y","","",91,null],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",92,null],[12,"max","","",92,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",93,null],[12,"y","","",93,null],[5,"point","","A convenience function for generating `Point`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector"}}],[0,"font","conrod::text","The `font::Id` and `font::Map` types.",null,null],[3,"Id","conrod::text::font","A type-safe wrapper around the `FontId`.",null,null],[3,"Map","","A collection of mappings from `font::Id`s to `rusttype::Font`s.",null,null],[3,"NewIds","","An iterator yielding an `Id` for each new `rusttype::Font` inserted into the `Map` via the `insert_collection` method.",null,null],[3,"Ids","","Yields the `Id` for each `Font` within the `Map`.",null,null],[4,"Error","","Returned when loading new fonts from file or bytes.",null,null],[13,"IO","","Some error occurred while loading a `FontCollection` from a file.",94,null],[13,"NoFont","","No `Font`s could be yielded from the `FontCollection`.",94,null],[5,"collection_from_file","","Load a `super::FontCollection` from a file at a given path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"from_file","","Load a single `Font` from a file at the given path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ids"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","Returns the inner `usize` from the `Id`.",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Construct the new, empty `Map`.",97,{"inputs":[],"output":{"name":"self"}}],[11,"get","","Borrow the `rusttype::Font` associated with the given `font::Id`.",97,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"insert","","Adds the given `rusttype::Font` to the `Map` and returns a unique `Id` for it.",97,{"inputs":[{"name":"self"},{"name":"font"}],"output":{"name":"id"}}],[11,"insert_from_file","","Insert a single `Font` into the map by loading it from the given file path.",97,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"ids","","Produces an iterator yielding the `Id` for each `Font` within the `Map`.",97,{"inputs":[{"name":"self"}],"output":{"name":"ids"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",94,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"description","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"glyph","conrod::text","Logic and types specific to individual glyph layout.",null,null],[3,"Rects","conrod::text::glyph","An iterator yielding the `Rect` for each `char`'s `Glyph` in the given `text`.",null,null],[3,"RectsPerLine","","An iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,null],[3,"SelectedRectsPerLine","","Yields an iteraor yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,null],[3,"SelectedRects","","Yields a `Rect` for each selected character in a single line of text.",null,null],[5,"index_after_cursor","","Find the index of the character that directly follows the cursor at the given `cursor_idx`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"name":"option"}}],[5,"rects_per_line","","Produce an iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"rectsperline"}}],[5,"selected_rects_per_line","","Produces an iterator that yields iteraors yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedrectsperline"}}],[6,"X","","Some position along the X axis (used within `CharXs`).",null,null],[6,"HalfW","","The half of the width of some character (used within `CharXs`).",null,null],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"cursor","conrod::text","Logic related to the positioning of the cursor within text.",null,null],[3,"XysPerLine","conrod::text::cursor","Every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"XysPerLineFromText","","Similarly to `XysPerLine`, yields every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"Xs","","Each possible cursor position along the *x* axis within a line of text.",null,null],[3,"Index","","An index representing the position of a cursor within some text.",null,null],[12,"line","","The index of the line upon which the cursor is situated.",103,null],[12,"char","","The index within all possible cursor positions for the line.",103,null],[5,"xys_per_line","","Every possible cursor position within each line of text yielded by the given iterator.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"str"},{"name":"fontsize"}],"output":{"name":"xysperline"}}],[5,"xys_per_line_from_text","","Similarly to `xys_per_line`, this produces an iterator yielding every possible cursor position within each line of text yielded by the given iterator.",null,null],[5,"index_before_char","","Convert the given character index into a cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"option"}}],[5,"xy_at","","Determine the *xy* location of the cursor at the given cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"name":"option"}}],[5,"closest_line","","Find the closest line for the given `y` position, and return the line index, Xs iterator, and y-range of that line",null,{"inputs":[{"name":"scalar"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_and_xy","","Find the closest cursor index to the given `xy` position, and the center `Point` of that cursor.",null,{"inputs":[{"name":"point"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_on_line","","Find the closest cursor index to the given `x` position on the given line along with the `x` position of that cursor.",null,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"xysperline"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"xysperlinefromtext"}}],[11,"cmp","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"previous_word_start","","The cursor index of the beginning of the word (block of non-whitespace) before `self`.",103,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"next_word_end","","The cursor index of the end of the first word (block of non-whitespace) after `self`.",103,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"previous","","The cursor index that comes before `self`.",103,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"next","","The cursor index that follows `self`.",103,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"clamp_to_lines","","Clamps `self` to the given lines.",103,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"line","conrod::text","Text handling logic related to individual lines of text.",null,null],[3,"Info","conrod::text::line","Information about a single line of text within a `&str`.",null,null],[12,"start_byte","","The index into the `&str` that represents the first character within the line.",107,null],[12,"start_char","","The character index of the first character in the line.",107,null],[12,"end_break","","The index within the `&str` at which this line breaks into a new line, along with the index at which the following line begins. The variant describes whether the break is caused by a `Newline` character or a `Wrap` by the given wrap function.",107,null],[12,"width","","The total width of all characters within the line.",107,null],[3,"Infos","","An iterator yielding an `Info` struct for each line in the given `text` wrapped by the given `next_break_fn`.",null,null],[3,"Rects","","An iterator yielding a `Rect` for each line in",null,null],[3,"SelectedRects","","An iterator yielding a `Rect` for each selected line in a block of text.",null,null],[4,"Break","","The two types of **Break** indices returned by the **WrapIndicesBy** iterators.",null,null],[13,"Wrap","","A break caused by the text exceeding some maximum width.",108,null],[12,"byte","conrod::text::line::Break","The byte index at which the break occurs.",108,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",108,null],[12,"len_bytes","","The byte length which should be skipped in order to reach the first non-whitespace character to use as the beginning of the next line.",108,null],[13,"Newline","conrod::text::line","A break caused by a newline character.",108,null],[12,"byte","conrod::text::line::Break","The byte index at which the string should wrap due to exceeding a maximum width.",108,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",108,null],[12,"len_bytes","","The width of the \"newline\" token in bytes.",108,null],[13,"End","conrod::text::line","The end of the string has been reached, with the given length.",108,null],[12,"byte","conrod::text::line::Break","The ending byte index.",108,null],[12,"char","","The ending char index.",108,null],[5,"width","conrod::text::line","Produce the width of the given line of text including spaces (i.e. ' ').",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"scalar"}}],[5,"infos_wrapped_by","","Produce an `Infos` iterator wrapped by the given `next_break_fn`.",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"},{"name":"scalar"},{"name":"f"}],"output":{"name":"infos"}}],[5,"infos","","Produce an `Infos` iterator that yields an `Info` for every line in the given text.",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"infos"}}],[5,"rects","","Produce an iterator yielding the bounding `Rect` for each line in the text.",null,{"inputs":[{"name":"i"},{"name":"fontsize"},{"name":"rect"},{"name":"align"},{"name":"align"},{"name":"scalar"}],"output":{"name":"rects"}}],[5,"selected_rects","","Produces an iterator yielding a `Rect` for the selected range in each selected line in a block of text.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedrects"}}],[6,"NextBreakFnPtr","","An alias for function pointers that are compatible with the `Block`'s required text wrapping function.",null,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"rects"}}],[11,"byte_index","","Return the index at which the break occurs.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"char_index","","Return the index of the `char` at which the break occurs.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"end_byte","","The end of the byte index range for indexing into the slice.",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end_char","","The end of the index range for indexing into the slice.",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"byte_range","","The index range for indexing (via bytes) into the original str slice.",107,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"char_range","","The index range for indexing into a `char` iterator over the original str slice.",107,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"wrap_by_character","","Converts `Self` into an `Infos` whose lines are wrapped at the character that first causes the line width to exceed the given `max_width`.",110,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wrap_by_whitespace","","Converts `Self` into an `Infos` whose lines are wrapped at the whitespace prior to the character that causes the line width to exceed the given `max_width`.",110,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"next","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"FontCollection","conrod::text","The RustType `FontCollection` type used by conrod.",null,null],[6,"Font","","The RustType `Font` type used by conrod.",null,null],[6,"PositionedGlyph","","The RustType `PositionedGlyph` type used by conrod.",null,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"theme","conrod","",null,null],[3,"Theme","conrod::theme","A serializable collection of canvas and widget styling defaults.",null,null],[12,"name","","A name for the theme used for identification.",113,null],[12,"padding","","Padding for Canvas layout and positioning.",113,null],[12,"x_position","","A default widget position along the *x* axis.",113,null],[12,"y_position","","A default widget position along the *y* axis.",113,null],[12,"background_color","","A default background for the theme.",113,null],[12,"shape_color","","A default color for widget shapes.",113,null],[12,"border_color","","A default color for widget borders.",113,null],[12,"border_width","","A default width for widget borders.",113,null],[12,"label_color","","A default color for widget labels.",113,null],[12,"font_id","","The `Id` of the default font used for text widgets when one is not specified.",113,null],[12,"font_size_large","","A default \"large\" font size.",113,null],[12,"font_size_medium","","A default \"medium\" font size.",113,null],[12,"font_size_small","","A default \"small\" font size.",113,null],[12,"widget_styling","","Unique styling for each widget, index-able by the **Widget::kind**.",113,null],[12,"mouse_drag_threshold","","Mouse Drag distance threshold determines the minimum distance from the mouse-down point that the mouse must move before starting a drag operation.",113,null],[12,"double_click_threshold","","Once the `Duration` that separates two consecutive `Click`s is greater than this value, a `DoubleClick` event will no longer be generated.",113,null],[3,"WidgetDefault","","The defaults for a specific widget.",null,null],[12,"style","","The unique style of a widget.",114,null],[12,"common","","The attributes commonly shared between widgets.",114,null],[3,"UniqueDefault","","A **WidgetDefault** downcast to a **Widget**'s unique **Style** type.",null,null],[12,"style","","The unique style for the widget.",115,null],[12,"common","","Attributes that are common to all widgets.",115,null],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"uniquedefault"}}],[11,"new","","Constructor for a WidgetDefault.",114,{"inputs":[{"name":"box"}],"output":{"name":"widgetdefault"}}],[11,"default","","The default theme if not loading from file.",113,{"inputs":[],"output":{"name":"theme"}}],[11,"widget_style","","Retrieve the unique default styling for a widget.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","conrod","Begin building a new `Ui` instance.",4,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"theme","","The theme used to set default styling for widgets.",4,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"self"}}],[11,"widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Build **Ui** from the given builder",4,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"widget_input","","Returns a `input::Widget` for the given widget",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"widget"}}],[11,"rect_of","","The **Rect** for the widget at the given index.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"w_of","","The absolute width of the widget at the given index.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"h_of","","The absolute height of the widget at the given index.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"wh_of","","The absolute dimensions for the widget at the given index.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"xy_of","","The coordinates for the widget at the given index.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"kid_area_of","","The `kid_area` of the widget at the given index.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"maybe_prev_widget","","An index to the previously updated widget if there is one.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"widget_graph","","Borrow the **Ui**'s `widget_graph`.",3,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"updated_widgets","","Borrow the **Ui**'s set of updated widgets.",3,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"prev_updated_widgets","","Borrow the **Ui**'s set of updated widgets.",3,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",3,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",3,null],[11,"handle_event","","Handle raw window events and update the `Ui` state accordingly.",3,{"inputs":[{"name":"self"},{"name":"input"}],"output":null}],[11,"calc_xy","","Get the centred xy coords for some given `Dimension`s, `Position` and alignment.",3,{"inputs":[{"name":"self"},{"name":"option"},{"name":"position"},{"name":"position"},{"name":"dimensions"},{"name":"bool"}],"output":{"name":"point"}}],[11,"set_widgets","","A function within which all widgets are instantiated by the user, normally situated within the \"update\" stage of an event loop.",3,{"inputs":[{"name":"self"}],"output":{"name":"uicell"}}],[11,"set_num_redraw_frames","","Set the number of frames that the `Ui` should draw in the case that `needs_redraw` is called. The default is `3` (see the SAFE_REDRAW_COUNT docs for details).",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"needs_redraw","","Tells the `Ui` that it needs to be re-draw everything. It does this by setting the redraw count to `num_redraw_frames`. See the docs for `set_num_redraw_frames`, SAFE_REDRAW_COUNT or `draw_if_changed` for more info on how/why the redraw count is used.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_with","","The first of the `Primitivees` yielded by `Ui::draw` or `Ui::draw_if_changed` will always be a `Rectangle` the size of the window in which conrod is hosted.",3,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"draw","","Draw the `Ui` in it's current state.",3,{"inputs":[{"name":"self"}],"output":{"name":"primitives"}}],[11,"draw_if_changed","","Same as the `Ui::draw` method, but *only* draws if the `redraw_count` is greater than 0.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kids_bounding_box","","The **Rect** that bounds the kids of the widget with the given index.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"visible_area","","The **Rect** that represents the maximum fully visible area for the widget with the given index, including consideration of cropped scroll area.",3,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"theme","","A reference to the `Theme` that is currently active within the `Ui`.",116,{"inputs":[{"name":"self"}],"output":{"name":"theme"}}],[11,"font","","A convenience method for borrowing the `Font` for the given `Id` if it exists.",116,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"window_dim","","Returns the dimensions of the window",116,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"global_input","","Returns an immutable reference to the `input::Global` of the `Ui`.",116,{"inputs":[{"name":"self"}],"output":{"name":"global"}}],[11,"widget_input","","Returns a `input::Widget` with input events for the widget.",116,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"widget"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",116,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"kids_bounding_box","","The **Rect** that bounds the kids of the widget with the given index.",116,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",116,null],[11,"drop","","",116,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",116,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"as_ref","","",116,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[0,"utils","","",null,null],[4,"IterDiff","conrod::utils","A type returned by the `iter_diff` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with the iterator's remaining elements starting with the first mis-matched element.",117,null],[13,"Longer","","The remaining elements of the iterator.",117,null],[13,"Shorter","","The total number of elements that were in the iterator.",117,null],[5,"partial_min","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_max","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Clamp a value between some range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"degrees","","Convert degrees to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"fmod","","Modulo float.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"modulo","","The modulo function.",null,{"inputs":[{"name":"i"},{"name":"i"}],"output":{"name":"i"}}],[5,"map_range","","Map a value from a given range to a new given range.",null,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"}],"output":{"name":"y"}}],[5,"percentage","","Get value percentage between max and min.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"f32"}}],[5,"turns","","Convert turns to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"value_from_perc","","Adjust the value to the given percentage.",null,{"inputs":[{"name":"f32"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"val_to_string","","Get a suitable string from the value, its max and the pixel range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":{"name":"string"}}],[5,"vec2_add","","Add `a` and `b`.",null,null],[5,"vec2_sub","","Subtract `b` from `a`.",null,null],[5,"bounding_box_for_points","","Find the bounding rect for the given series of points.",null,{"inputs":[{"name":"i"}],"output":{"name":"rect"}}],[5,"iter_diff","","Compares every element yielded by both elems and new_elems in lock-step.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"option"}}],[5,"write_if_different","","Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.",null,null],[5,"iter_eq","","Compares two iterators to see if they yield the same thing.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"bool"}}],[0,"widget","conrod","Widgets are the core building blocks for every conrod user interface.",null,null],[3,"UpdateArgs","conrod::widget","Arguments for the **Widget::update** method in a struct to simplify the method signature.",null,null],[12,"id","","The **Widget**'s unique index.",118,null],[12,"maybe_parent_id","","The **Widget**'s parent unique index, if there is one.",118,null],[12,"prev","","The **Widget**'s previous state. Specifically, the state that is common between all widgets, such as positioning, floatability, draggability, etc.",118,null],[12,"state","","A wrapper around the **Widget**'s unique state, providing methods for both immutably viewing and mutably updating the state.",118,null],[12,"rect","","The rectangle describing the **Widget**'s area.",118,null],[12,"style","","The **Widget**'s current **Widget::Style**.",118,null],[12,"ui","","Restricted access to the `Ui`.",118,null],[3,"KidAreaArgs","","Arguments to the **Widget::kid_area** method in a struct to simplify the method signature.",null,null],[12,"rect","","The **Rect** describing the **Widget**'s position and dimensions.",119,null],[12,"style","","Current **Widget::Style** of the **Widget**.",119,null],[12,"theme","","The active **Theme** within the **Ui**.",119,null],[12,"fonts","","The **Font** (for determining text width).",119,null],[3,"KidArea","","The area upon which a **Widget**'s child widgets will be placed.",null,null],[12,"rect","","The **Rect** bounds describing the position and area.",120,null],[12,"pad","","The distance between the edge of the area and where the widgets will be placed.",120,null],[3,"Floating","","State necessary for \"floating\" (pop-up style) widgets.",null,null],[12,"time_last_clicked","","The time the **Widget** was last clicked (used for depth sorting in the widget **Graph**).",121,null],[3,"CommonBuilder","","A struct containing builder data common to all **Widget** types.",null,null],[12,"style","","Styling and positioning data that is common between all widget types.",122,null],[12,"maybe_parent_id","","The parent widget of the Widget.",122,null],[12,"is_floating","","Whether or not the Widget is a \"floating\" Widget.",122,null],[12,"crop_kids","","Whether or not the children of this **Widget** should be cropped to its `kid_area`.",122,null],[12,"maybe_x_scroll","","Arguments to the scrolling of the widget's *x* axis.",122,null],[12,"maybe_y_scroll","","Arguments to the scrolling of the widget's *y* axis.",122,null],[12,"place_on_kid_area","","Whether or not the **Widget** should be placed on the kid_area.",122,null],[12,"maybe_graphics_for","","Describes whether or not the **Widget** is instantiated as a graphical element for some other **Widget**.",122,null],[3,"CommonStyle","","Styling and positioning data that is common between all widget types.",null,null],[12,"maybe_x_dimension","","The width of a Widget.",123,null],[12,"maybe_y_dimension","","The height of a Widget.",123,null],[12,"maybe_x_position","","The position of a Widget along the *x* axis.",123,null],[12,"maybe_y_position","","The position of a Widget along the *y* axis.",123,null],[12,"maybe_depth","","The rendering Depth of the Widget.",123,null],[3,"State","","A wrapper around a **Widget**'s unique **Widget::State**.",null,null],[3,"CommonState","","A wrapper around state that is common to all **Widget** types.",null,null],[12,"rect","","The rectangle describing the `Widget`'s area.",124,null],[12,"depth","","The rendering depth for the Widget (the default is 0.0).",124,null],[12,"maybe_floating","","Floating state for the widget if it is floating.",124,null],[12,"kid_area","","The area of the widget upon which kid widgets are placed.",124,null],[12,"maybe_x_scroll_state","","If the widget is scrollable across the *x* axis.",124,null],[12,"maybe_y_scroll_state","","If the widget is scrollable across the *y* axis.",124,null],[3,"PreUpdateCache","","",null,null],[12,"type_id","","The **Widget**'s unique type identifier.",125,null],[12,"id","","The **Widget**'s unique Id.",125,null],[12,"maybe_parent_id","","The **Widget**'s parent's unique index (if it has a parent).",125,null],[12,"maybe_x_positioned_relatively_id","","If this **Widget** is relatively positioned to another **Widget**, this will be the index of the **Widget** to which this **Widget** is relatively positioned along the *x* axis.",125,null],[12,"maybe_y_positioned_relatively_id","","If this **Widget** is relatively positioned to another **Widget**, this will be the index of the **Widget** to which this **Widget** is relatively positioned along the *y* axis.",125,null],[12,"rect","","The **Rect** describing the **Widget**'s position and dimensions.",125,null],[12,"depth","","The z-axis depth - affects the render order of sibling widgets.",125,null],[12,"kid_area","","The area upon which the **Widget**'s children widgets will be placed.",125,null],[12,"maybe_floating","","Floating data for the **Widget** if there is some.",125,null],[12,"crop_kids","","Whether or not the children of the **Widget** should be cropped to its `kid_area`.",125,null],[12,"maybe_x_scroll_state","","Scrolling data for the **Widget**'s *x* axis if there is some.",125,null],[12,"maybe_y_scroll_state","","Scrolling data for the **Widget**'s *y* axis if there is some.",125,null],[12,"maybe_graphics_for","","Whether or not the **Widget** has been instantiated as a graphical element for some other widget.",125,null],[3,"PostUpdateCache","","",null,null],[12,"id","","The **Widget**'s unique **Id**.",126,null],[12,"maybe_parent_id","","The **Widget**'s parent's unique **Id** (if it has a parent).",126,null],[12,"state","","The newly produced unique **Widget::State** associated with the **Widget**.",126,null],[12,"style","","The newly produced unique **Widget::Style** associated with the **Widget**.",126,null],[4,"MaybeParent","","The builder argument for the **Widget**'s parent.",null,null],[13,"None","","The user specified the widget should not have any parents, so the Root will be used.",127,null],[13,"Some","","The user gave a specific parent widget.",127,null],[13,"Unspecified","","No parent widget was specified, so we will assume they want the last parent.",127,null],[5,"default_x_dimension","","Determines the default **Dimension** for a **Widget**.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[5,"default_y_dimension","","Determines the default **Dimension** for a **Widget**.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[0,"id","","The widget identifier type used throughout conrod, along with helper types and macros to simplify the process of generating them.",null,null],[3,"Generator","conrod::widget::id","Used for generating new unique `widget::Id`s.",null,null],[3,"List","","A list of lazily generated `widget::Id`s.",null,null],[3,"ListWalk","","An iterator-like type for producing indices from a `List`.",null,null],[6,"Id","","Unique widget identifier.",null,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"new","","Constructor for a new `widget::Id` generator.",129,{"inputs":[{"name":"graph"}],"output":{"name":"self"}}],[11,"next","","Generate a new, unique `widget::Id` into a Placeholder node within the widget graph. This should only be called once for each unique widget needed to avoid unnecessary bloat within the `Ui`'s widget graph.",129,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"new","","Construct a cache for multiple indices.",128,{"inputs":[],"output":{"name":"self"}}],[11,"walk","","Produce a walker for producing the `List`'s indices.",128,{"inputs":[{"name":"self"}],"output":{"name":"listwalk"}}],[11,"resize","","Resizes the `List`'s inner `Vec` to the given target length, using the given `UiCell` to generate new unique `widget::Id`s if necessary.",128,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"generator"}],"output":null}],[11,"deref","","",128,null],[11,"next","","Yield the next index, generating one if it does not yet exist.",130,{"inputs":[{"name":"self"},{"name":"list"},{"name":"generator"}],"output":{"name":"id"}}],[0,"scroll","conrod::widget","Scroll related types and logic.",null,null],[3,"Scroll","conrod::widget::scroll","Arguments given via a scrollable `Widget`'s builder methods for the scrolling along a single axis.",null,null],[3,"State","","Scroll state calculated for a single axis.",null,null],[12,"offset","","The distance that has been scrolled from the origin.",131,null],[12,"offset_bounds","","The start and end bounds for the offset along the axis.",131,null],[12,"scrollable_range_len","","The total range which may be \"offset\" from the \"root\" range (aka the `kid_area`).",131,null],[12,"is_scrolling","","Whether or not the this axis is currently scrolling.",131,null],[4,"X","","Behaviour for scrolling across the `X` axis.",null,null],[4,"Y","","Behaviour for scrolling across the `Y` axis.",null,null],[6,"StateX","","State for scrolling along the **X** axis.",null,null],[6,"StateY","","State for scrolling along the **Y** axis.",null,null],[8,"Axis","","Methods for distinguishing behaviour between both scroll axes at compile-time.",null,null],[10,"parallel_range","","The range of the given `Rect` that is parallel with this `Axis`.",132,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"perpendicular_range","","The range of the given `Rect` that is perpendicular with this `Axis`.",132,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"padding_range","","Given some rectangular `Padding`, return the `Range` that corresponds with this `Axis`.",132,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[10,"mouse_scalar","","The coordinate of the given mouse position that corresponds with this `Axis`.",132,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[10,"offset_direction","","A `Scalar` multiplier representing the direction in which positive offset shifts the `scrollable_range` (either `-1.0` or `1.0).",132,{"inputs":[],"output":{"name":"scalar"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"scroll"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"y"}}],[11,"new","","The default `Scroll` args.",133,{"inputs":[],"output":{"name":"self"}}],[11,"update","","Calculate the new scroll state for the single axis of a `Widget`.",131,{"inputs":[{"name":"ui"},{"name":"id"},{"name":"kidarea"},{"name":"option"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"parallel_range","","",134,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",134,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",134,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"mouse_scalar","","",134,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"offset_direction","","",134,{"inputs":[],"output":{"name":"scalar"}}],[11,"parallel_range","","",135,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",135,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",135,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"mouse_scalar","","",135,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"offset_direction","","",135,{"inputs":[],"output":{"name":"scalar"}}],[0,"primitive","conrod::widget","Primitive widgets are special in that they are built into conrod's `render`ing logic.",null,null],[0,"line","conrod::widget::primitive","A simple, non-interactive widget for drawing a single straight Line.",null,null],[3,"Line","conrod::widget::primitive::line","A simple, non-interactive widget for drawing a single straight Line.",null,null],[12,"start","","The start of the line.",136,null],[12,"end","","The end of the line.",136,null],[12,"common","","Data necessary and common for all widget builder types.",136,null],[12,"style","","Unique styling.",136,null],[12,"should_centre_points","","Whether or not the line should be automatically centred to the widget position.",136,null],[3,"State","","Unique state for the Line widget.",null,null],[12,"start","","The start of the line.",137,null],[12,"end","","The end of the line.",137,null],[3,"Style","","Unique styling for a Line widget.",null,null],[12,"maybe_pattern","","The patter for the line.",138,null],[12,"maybe_color","","Color of the Button's pressable area.",138,null],[12,"maybe_thickness","","The thickness of the line.",138,null],[12,"maybe_cap","","The style with which the ends of the line are drawn.",138,null],[4,"Pattern","","The pattern used to draw the line.",null,null],[13,"Solid","","A single continuous stroke.",139,null],[13,"Dashed","","A series of line strokes.",139,null],[13,"Dotted","","A series of circles.",139,null],[4,"Cap","","Whether the end of the **Line** should be flat or rounded.",null,null],[13,"Flat","","The line is capped with a flat edge.",140,null],[13,"Round","","The line is capped with a semi-circle.",140,null],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"cap"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"cap"}}],[11,"styled","","Build a new **Line** widget with the given style.",136,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default **Line** widget.",136,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs","","Build a new **Line** whose bounding box is fit to the absolute co-ordinates of the line points.",136,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as **Line::abs** but with the given style.",136,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new **Line** and shift the location of the start and end points so that the centre of their bounding rectangle lies at the position determined by the layout for the **Line** widget.",136,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as **Line::centred** but with the given style.",136,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the Line.",136,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",136,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",136,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",136,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Constructor for a default Line Style.",138,{"inputs":[],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",138,{"inputs":[],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",138,{"inputs":[],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",138,{"inputs":[],"output":{"name":"self"}}],[11,"pattern","","The style with some given pattern.",138,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"self"}}],[11,"color","","The style with some given color.",138,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"thickness","","The style with some given thickness.",138,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"cap","","The style for the ends of the Line.",138,{"inputs":[{"name":"self"},{"name":"cap"}],"output":{"name":"self"}}],[11,"set_pattern","","Set the pattern for the line.",138,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":null}],[11,"set_color","","Set the color for the line.",138,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"set_thickness","","Set the thickness for the line.",138,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"set_cap","","Set the **Cap** for the line.",138,{"inputs":[{"name":"self"},{"name":"cap"}],"output":null}],[11,"get_pattern","","The Pattern for the Line.",138,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"pattern"}}],[11,"get_color","","The Color for the Line.",138,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"get_thickness","","The width or thickness of the Line.",138,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"get_cap","","The styling for the ends of the Line.",138,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"cap"}}],[11,"common","","",136,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",136,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",136,null],[11,"style","","",136,null],[11,"update","","Update the state of the Line.",136,null],[11,"color","","",136,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"image","conrod::widget::primitive","A simple, non-interactive widget for drawing an `Image`.",null,null],[3,"Image","conrod::widget::primitive::image","A primitive and basic widget for drawing an `Image`.",null,null],[12,"common","","Data necessary and common for all widget builder types.",141,null],[12,"src_rect","","The rectangle area of the original source image that should be used.",141,null],[12,"style","","Unique styling.",141,null],[3,"State","","Unique `State` to be stored between updates for the `Image`.",null,null],[12,"src_rect","","The rectangular area of the image that we wish to display.",142,null],[3,"Style","","Unique styling for the `Image` widget.",null,null],[12,"maybe_color","","Optionally specify a single colour to use for the image.",143,null],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",143,{"inputs":[],"output":{"name":"self"}}],[11,"maybe_color","","Retrieves the value from the `Style`.",143,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a new `Image`.",141,{"inputs":[],"output":{"name":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",141,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",141,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"common","","",141,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",141,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",141,null],[11,"style","","",141,null],[11,"default_x_dimension","","",141,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",141,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",141,null],[0,"point_path","conrod::widget::primitive","A simple, non-interactive widget for drawing a series of conjoined lines.",null,null],[3,"PointPath","conrod::widget::primitive::point_path","A simple, non-interactive widget for drawing a series of lines and/or points.",null,null],[12,"points","","Some iterator yielding a series of Points.",144,null],[12,"common","","Data necessary and common for all widget builder types.",144,null],[12,"style","","Unique styling for the PointPath.",144,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",144,null],[3,"State","","State that is unique to the PointPath.",null,null],[12,"points","","An owned version of the list of points.",145,null],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"pointpath"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"styled","","The same as **PointPath::new** but with th given style.",144,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default PointPath widget.",144,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs","","Build a new PointPath whose bounding box is fit to the absolute co-ordinates of the points.",144,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as **PointPath::abs** but constructs the **PointPath** with the given style.",144,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new **PointPath** and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the **PointPath** widget.",144,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as **PointPath::centred** but constructs the **PointPath** with the given style.",144,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the **PointPath**'s lines.",144,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a Solid line.",144,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",144,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",144,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"common","","",144,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",144,null],[11,"style","","",144,null],[11,"update","","Update the state of the Line.",144,null],[11,"color","","",144,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"shape","conrod::widget::primitive","A module encompassing the primitive 2D shape widgets.",null,null],[4,"Style","conrod::widget::primitive::shape","The style for some 2D shape.",null,null],[13,"Outline","","The outline of the shape with this style.",146,null],[13,"Fill","","A rectangle filled with this color.",146,null],[0,"circle","","An adaptation of the **Oval** type where the width and height are equal.",null,null],[3,"Circle","conrod::widget::primitive::shape::circle","A tiny wrapper around the **Oval** widget type.",null,null],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"circle"}}],[11,"styled","","Build a circular **Oval** with the given dimensions and style.",147,{"inputs":[{"name":"scalar"},{"name":"style"}],"output":{"name":"oval"}}],[11,"fill","","Build a new **Fill**ed circular **Oval**.",147,{"inputs":[{"name":"scalar"}],"output":{"name":"oval"}}],[11,"fill_with","","Build a new circular **Oval** **Fill**ed with the given color.",147,{"inputs":[{"name":"scalar"},{"name":"color"}],"output":{"name":"oval"}}],[11,"outline","","Build a new circular **Outline**d **Oval** widget.",147,{"inputs":[{"name":"scalar"}],"output":{"name":"oval"}}],[11,"outline_styled","","Build a new circular **Oval** **Outline**d with the given style.",147,{"inputs":[{"name":"scalar"},{"name":"style"}],"output":{"name":"oval"}}],[0,"oval","conrod::widget::primitive::shape","A simple, non-interactive widget for drawing a single **Oval**.",null,null],[3,"Oval","conrod::widget::primitive::shape::oval","A simple, non-interactive widget for drawing a single **Oval**.",null,null],[12,"common","","Data necessary and common for all widget builder types.",148,null],[12,"style","","Unique styling.",148,null],[3,"State","","Unique state for the **Oval**.",null,null],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"oval"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"styled","","Build an **Oval** with the given dimensions and style.",148,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new **Fill**ed **Oval**.",148,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new **Oval** **Fill**ed with the given color.",148,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new **Outline**d **Oval** widget.",148,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a new **Oval** **Outline**d with the given style.",148,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",148,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",148,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",148,null],[11,"style","","",148,null],[11,"update","","",148,null],[11,"color","","",148,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"polygon","conrod::widget::primitive::shape","A simple, non-interactive **Polygon** widget for drawing arbitrary convex shapes.",null,null],[3,"Polygon","conrod::widget::primitive::shape::polygon","A basic, non-interactive, arbitrary **Polygon** widget.",null,null],[12,"points","","The points describing the corners of the **Polygon**.",150,null],[12,"common","","Data necessary and common for all widget builder types.",150,null],[12,"style","","Unique styling for the **Polygon**.",150,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",150,null],[3,"State","","Unique state for the **Polygon**.",null,null],[12,"points","","An owned version of the points yielded by the **Polygon**'s `points` iterator.",151,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",152,null],[13,"Fill","","The rectangle area is filled with some color.",152,null],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"styled","","Build a polygon with the given points and style.",150,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a **Polygon** with the default **Fill** style.",150,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fill_with","","Build a **Polygon** **Fill**ed with the given **Color**.",150,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a **Polygon** with the default **Outline** style.",150,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a **Polygon** **Outline**ed with the given line style.",150,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"abs_styled","","Build a new filled **Polygon** whose bounding box is fit to the absolute co-ordinates of the points.",150,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"abs_fill","","The same as **Polygon::abs_styled** but builds the **Polygon** with the default **Fill** style.",150,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_fill_with","","The same as **Polygon::abs_styled** but builds the **Polygon** **Fill**ed with the given **Color**.",150,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"abs_outline","","The same as **Polygon::abs_styled** but builds the **Polygon** with the default **Outline** style.",150,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_outline_styled","","The same as **Polygon::abs_styled** but builds the **Polygon** with the given **Outline** styling.",150,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred_styled","","Build a new **Polygon** and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the **Polygon** widget.",150,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred_fill","","The same as **Polygon::centred_styled** but constructs the **Polygon** with the default **Fill** style.",150,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_fill_with","","The same as **Polygon::centred_styled** but constructs the **Polygon** **Fill**ed with the given color.",150,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"centred_outline","","The same as **Polygon::centred_styled** but constructs the **Polygon** with the default **Outline** style.",150,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_outline_styled","","The same as **Polygon::centred_styled** but constructs the **Polygon** **Outline**d with the given styling.",150,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",150,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",150,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",150,null],[11,"style","","",150,null],[11,"update","","Update the state of the Polygon.",150,null],[11,"color","","",150,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"rectangle","conrod::widget::primitive::shape","A simple, non-interactive rectangle shape widget.",null,null],[3,"Rectangle","conrod::widget::primitive::shape::rectangle","A basic, non-interactive rectangle shape widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",153,null],[12,"style","","Unique styling for the **Rectangle**.",153,null],[3,"State","","Unique state for the Rectangle.",null,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",154,null],[13,"Fill","","The rectangle area is filled with some color.",154,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"styled","","Build a rectangle with the dimensions and style.",153,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new filled rectangle.",153,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new filled rectangle widget filled with the given color.",153,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new outlined rectangle widget.",153,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build an outlined rectangle rather than a filled one.",153,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",153,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",153,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",153,null],[11,"style","","",153,null],[11,"update","","Update the state of the Rectangle.",153,null],[11,"color","","",153,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"eq","conrod::widget::primitive::shape","",146,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fill","","A default `Fill` style.",146,{"inputs":[],"output":{"name":"self"}}],[11,"fill_with","","A `Fill` style with some given `Color`.",146,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","A default `Outline` style.",146,{"inputs":[],"output":{"name":"self"}}],[11,"outline_styled","","A default `Outline` style.",146,{"inputs":[{"name":"style"}],"output":{"name":"self"}}],[11,"color","","The style with some given Color.",146,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"set_color","","Set the color for the style.",146,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"get_color","","Get the color of the Rectangle.",146,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[0,"text","conrod::widget::primitive","The primitive widget used for displaying text.",null,null],[3,"Text","conrod::widget::primitive::text","Displays some given text centred within a rectangular area.",null,null],[12,"common","","Data necessary and common for all widget builder types.",156,null],[12,"text","","The text to be drawn by the **Text**.",156,null],[12,"style","","Unique styling for the **Text**.",156,null],[3,"Style","","The styling for a **Text**'s graphics.",null,null],[12,"font_size","","The font size for the **Text**.",157,null],[12,"color","","The color of the **Text**.",157,null],[12,"maybe_wrap","","Whether or not the text should wrap around the width.",157,null],[12,"line_spacing","","The spacing between consecutive lines.",157,null],[12,"text_align","","Alignment of the text along the *x* axis.",157,null],[12,"font_id","","The id of the font to use for rendring and layout.",157,null],[3,"State","","The state to be stored between updates for the **Text**.",null,null],[12,"string","","An owned version of the string.",158,null],[12,"line_infos","","The indices and width for each line of text within the `string`.",158,null],[4,"Wrap","","The way in which text should wrap around the width.",null,null],[13,"Character","","Wrap at the first character that exceeds the width.",159,null],[13,"Whitespace","","Wrap at the first word that exceeds the width.",159,null],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",157,{"inputs":[],"output":{"name":"self"}}],[11,"font_size","","Retrieves the value from the `Style`.",157,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"color","","Retrieves the value from the `Style`.",157,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"maybe_wrap","","Retrieves the value from the `Style`.",157,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",157,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"text_align","","Retrieves the value from the `Style`.",157,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"font_id","","Retrieves the value from the `Style`.",157,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new","","Build a new **Text** widget.",156,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"no_line_wrap","","Specify that the **Text** should not wrap lines around the width.",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_word","","Line wrap the **Text** at the beginning of the first word that exceeds the width.",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_character","","Line wrap the **Text** at the beginning of the first character that exceeds the width.",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","A method for specifying the `Font` used for displaying the `Text`.",156,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_style","","Build the **Text** with the given **Style**.",156,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"align_text_left","","Align the text to the left of its bounding **Rect**'s *x* axis range.",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_right","","Align the text to the right of its bounding **Rect**'s *x* axis range.",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",156,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"align_text_to","","Build the type's self.$($assignee).+ with the given $Type.",156,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",156,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",156,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",156,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",156,null],[11,"style","","",156,null],[11,"default_x_dimension","","If no specific width was given, we'll use the width of the widest line as a default.",156,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","If no specific height was given, we'll use the total height of the text as a default.",156,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","Update the state of the Text.",156,null],[11,"color","","",156,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"bordered_rectangle","conrod::widget","The `BorderedRectangle` widget and related items.",null,null],[3,"BorderedRectangle","conrod::widget::bordered_rectangle","A filled rectangle widget that may or may not have some border.",null,null],[12,"common","","Data necessary and common for all widget builder types.",160,null],[12,"style","","Unique styling for the **BorderedRectangle**.",160,null],[3,"Style","","Unique styling for the **BorderedRectangle** widget.",null,null],[12,"color","","Shape styling for the inner rectangle.",161,null],[12,"border","","The thickness of the border.",161,null],[12,"border_color","","The color of the border.",161,null],[3,"State","","Unique state for the `BorderedRectangle`.",null,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"borderedrectangle"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",161,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",161,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",161,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",161,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"new","","Build a new **BorderedRectangle**.",160,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",160,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",160,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",160,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",160,null],[11,"style","","",160,null],[11,"update","","Update the state of the Rectangle.",160,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",160,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",160,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",160,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"button","conrod::widget","The `Button` widget and related items.",null,null],[3,"Button","conrod::widget::button","A pressable button widget whose reaction is triggered upon release.",null,null],[12,"show","","Whether the `Button` is a `Flat` color or an `Image`.",162,null],[12,"style","","Unique styling parameters for the Button.",162,null],[3,"Style","","Unique styling for the Button.",null,null],[12,"color","","Color of the Button's pressable area.",163,null],[12,"border","","Width of the border surrounding the button",163,null],[12,"border_color","","The color of the border.",163,null],[12,"label_color","","The color of the Button's label.",163,null],[12,"label_font_size","","The font size of the Button's label.",163,null],[12,"label_x_align","","The label's alignment over the *x* axis.",163,null],[12,"label_font_id","","The ID of the font used to display the label.",163,null],[3,"Flat","","The `Button` simply displays a flat color.",null,null],[3,"Image","","The `Button` displays an `Image` on top.",null,null],[12,"id","","The id of the `Image` to be used.",164,null],[12,"color","","If `Some`, maps the image's luminance to this `Color`.",164,null],[12,"src_rect","","The rectangular area of the original source image that should be displayed.",164,null],[3,"State","","Represents the state of the Button widget.",null,null],[3,"TimesClicked","","The `Event` type yielded by the `Button` widget.",null,null],[12,"0","","",165,null],[4,"ImageColor","","The coloring of the `Image`.",null,null],[13,"Normal","","The image's luminance will be mapped to this color.",166,null],[13,"WithFeedback","","The image's luminance will be mapped to this color.",166,null],[13,"None","","The image's regular color will be used.",166,null],[8,"Show","","The style of the `Button`, either `Flat` or `Image`.",null,null],[11,"show","","Display the unique styling of the `Button`.",167,{"inputs":[{"name":"self"},{"name":"id"},{"name":"uicell"}],"output":null}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",163,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",163,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",163,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",163,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",163,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",163,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_x_align","","Retrieves the value from the `Style`.",163,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",163,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"flat"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"imagecolor"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"timesclicked"}}],[11,"was_clicked","","`true` if the `Button` was clicked one or more times.",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"image","","Begin building a button displaying the given `Image` on top.",162,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",162,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"image_color","","Map the `Image`'s luminance to the given color.",162,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"image_color_with_feedback","","Map the `Image`'s luminance to the given color.",162,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"new","","Begin building a flat-colored `Button` widget.",162,{"inputs":[],"output":{"name":"self"}}],[11,"align_label_left","","Align the label to the mid-left of the `Button`'s surface.",162,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_label_middle","","Align the label to the mid-left of the `Button`'s surface.",162,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_label_right","","Align the label to the mid-left of the `Button`'s surface.",162,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",162,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",162,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",162,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",162,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",162,null],[11,"style","","",162,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Button.",162,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",162,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",162,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",162,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",162,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",162,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",162,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"show","","",164,{"inputs":[{"name":"self"},{"name":"id"},{"name":"uicell"}],"output":null}],[0,"canvas","conrod::widget","The `Canvas` widget and related items.",null,null],[3,"Canvas","conrod::widget::canvas","**Canvas** is designed to be a \"container\"-like \"parent\" widget that simplifies placement of \"children\" widgets.",null,null],[12,"common","","Data necessary and common for all widget builder types.",169,null],[12,"style","","The builder data related to the style of the Canvas.",169,null],[12,"maybe_title_bar_label","","The label for the **Canvas**' **TitleBar** if there is one.",169,null],[12,"maybe_splits","","A list of child **Canvas**ses as splits of this **Canvas** flowing in the given direction.",169,null],[3,"State","","**Canvas** state to be cached.",null,null],[3,"Style","","Unique styling for the Canvas.",null,null],[12,"color","","The color of the Canvas' rectangle surface.",170,null],[12,"border","","The width of the border surrounding the Canvas' rectangle.",170,null],[12,"border_color","","The color of the Canvas' border.",170,null],[12,"length","","If this Canvas is a split of some parent Canvas, this is the length of the split.",170,null],[12,"pad_left","","Padding for the left edge of the Canvas' kid area.",170,null],[12,"pad_right","","Padding for the right edge of the Canvas' kid area.",170,null],[12,"pad_bottom","","Padding for the bottom edge of the Canvas' kid area.",170,null],[12,"pad_top","","Padding for the top edge of the Canvas' kid area.",170,null],[12,"title_bar_color","","The color of the title bar. Defaults to the color of the Canvas.",170,null],[12,"title_bar_text_color","","The color of the title bar's text.",170,null],[12,"title_bar_font_size","","The font size for the title bar's text.",170,null],[12,"title_bar_maybe_wrap","","The way in which the title bar's text should wrap.",170,null],[12,"title_bar_line_spacing","","The distance between lines for multi-line title bar text.",170,null],[12,"title_bar_text_align","","The horizontal alignment of the title bar text.",170,null],[4,"Length","","Used to describe the desired length for a `Split`.",null,null],[13,"Absolute","","The length as an absolute scalar.",171,null],[13,"Weight","","The length as a weight of the non-absolute length of the parent **Canvas**.",171,null],[4,"Direction","","The direction in which a sequence of canvas splits will be laid out.",null,null],[13,"X","","Lay splits along the *x* axis.",172,null],[13,"Y","","Lay splits along the *y* axis.",172,null],[6,"ListOfSplits","","A series of **Canvas** splits along with their unique identifiers.",null,null],[6,"FlowOfSplits","","A series of **Canvas** splits flowing in the specified direction.",null,null],[6,"Weight","","The length of a `Split` given as a weight.",null,null],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"canvas"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",170,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"length","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"length"}}],[11,"pad_left","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_right","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_bottom","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_top","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"title_bar_color","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"title_bar_text_color","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"title_bar_font_size","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"title_bar_maybe_wrap","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"title_bar_line_spacing","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"title_bar_text_align","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"new","","Construct a new Canvas builder.",169,{"inputs":[],"output":{"name":"self"}}],[11,"title_bar","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"pad_left","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"length","","Set the length of the Split as an absolute scalar.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"length_weight","","Set the length of the Split as a weight.",169,{"inputs":[{"name":"self"},{"name":"weight"}],"output":{"name":"self"}}],[11,"flow_right","","Set the child Canvasses flowing to the right.",169,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_left","","Set the child Canvasses flowing to the left.",169,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_up","","Set the child Canvasses flowing upwards.",169,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_down","","Set the child Canvasses flowing downwards.",169,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges of the area where child widgets will be placed.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","Set the padding of the area where child widgets will be placed.",169,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"self"}}],[11,"title_bar_color","","Set the color of the `Canvas`' `TitleBar` if it is visible.",169,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"common","","",169,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",169,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",169,null],[11,"style","","",169,null],[11,"default_x_position","","",169,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","",169,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"drag_area","","The title bar area at which the Canvas can be clicked and dragged.",169,{"inputs":[{"name":"self"},{"name":"dimensions"},{"name":"style"},{"name":"theme"}],"output":{"name":"option"}}],[11,"kid_area","","The area of the widget below the title bar, upon which child widgets will be placed.",169,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Canvas.",169,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"padding","","Get the Padding for the Canvas' kid area.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"padding"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","",169,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"drop_down_list","conrod::widget","The `DropDownList` and related items.",null,null],[3,"DropDownList","conrod::widget::drop_down_list","Displays a given `Vec<String>` as a selectable drop down menu.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",173,null],[12,"border","","Width of the widget's border.",173,null],[12,"border_color","","Color of the widget's border.",173,null],[12,"label_color","","Color of the item labels.",173,null],[12,"label_font_size","","Font size for the item labels.",173,null],[12,"label_x_align","","The label's alignment over the *x* axis.",173,null],[12,"maybe_max_visible_height","","Maximum height of the Open menu before the scrollbar appears.",173,null],[12,"scrollbar_position","","The position of the scrollbar in the case that the list is scrollable.",173,null],[12,"scrollbar_width","","The width of the scrollbar in the case that the list is scrollable.",173,null],[12,"label_font_id","","The ID of the font used to display the labels.",173,null],[3,"State","","Represents the state of the DropDownList.",null,null],[4,"MaxHeight","","Representations of the max height of the visible area of the DropDownList.",null,null],[13,"Items","","Specify the max height as a number of items.",174,null],[13,"Scalar","","Specify the max height as an absolute scalar distance.",174,null],[6,"Idx","","The index of a selected item.",null,null],[6,"Len","","The number of items in a list.",null,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",173,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_x_align","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"maybe_max_visible_height","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"scrollbar_position","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"scrollbar_width","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",173,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"maxheight"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"maxheight"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"maxheight"}],"output":{"name":"bool"}}],[11,"new","","Construct a new DropDownList.",175,null],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_visible_items","","Set the maximum height of the DropDownList (before the scrollbar appears) as a number of items.",175,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_visible_height","","Set the maximum height of the DropDownList (before the scrollbar appears) as a scalar height.",175,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the list should be scrollable and should provide a `Scrollbar` to the right of the items.",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the list should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"no_scrollbar","","Even in the case that the list is scrollable, do not display a `Scrollbar`.",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_width","","Specify the width of the scrollbar.",175,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",175,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"common","","",175,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",175,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",175,null],[11,"style","","",175,null],[11,"update","","Update the state of the DropDownList.",175,null],[11,"button_style","","Style for a `Button` given this `Style`'s current state.",173,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"style"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"envelope_editor","conrod::widget","The `EnvelopeEditor` widget and related items.",null,null],[3,"EnvelopeEditor","conrod::widget::envelope_editor","Used for editing a series of 2D Points on a cartesian (X, Y) plane within some given range.",null,null],[12,"skew_y_range","","The value skewing for the envelope's y-axis. This is useful for displaying exponential ranges such as frequency.",176,null],[3,"Style","","Styling for the EnvelopeEditor, necessary for constructing its renderable Element.",null,null],[12,"color","","Coloring for the EnvelopeEditor's **BorderedRectangle**.",177,null],[12,"border","","Thickness of the **BorderedRectangle**'s border.",177,null],[12,"border_color","","Color of the border.",177,null],[12,"label_color","","Color of the label.",177,null],[12,"label_font_size","","The font size of the **EnvelopeEditor**'s label if one was given.",177,null],[12,"value_font_size","","The font size of the value label.",177,null],[12,"point_radius","","The radius of the envelope points.",177,null],[12,"line_thickness","","The thickness of the envelope lines.",177,null],[12,"label_font_id","","The ID of the font used to display the label.",177,null],[3,"State","","Represents the state of the EnvelopeEditor widget.",null,null],[4,"Event","","The kinds of events that may be yielded by the `EnvelopeEditor`.",null,null],[13,"AddPoint","","Insert a new point.",178,null],[12,"i","conrod::widget::envelope_editor::Event","The index at which the point should be inserted.",178,null],[12,"point","","The new point.",178,null],[13,"RemovePoint","conrod::widget::envelope_editor","Remove a point.",178,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be removed.",178,null],[13,"MovePoint","conrod::widget::envelope_editor","Move a point.",178,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be moved.",178,null],[12,"x","","The point's new *x* value.",178,null],[12,"y","","The point's new *y* value.",178,null],[8,"EnvelopePoint","conrod::widget::envelope_editor","`EnvPoint` must be implemented for any type that is used as a 2D point within the EnvelopeEditor.",null,null],[16,"X","","A value on the X-axis of the envelope.",179,null],[16,"Y","","A value on the Y-axis of the envelope.",179,null],[10,"get_x","","Return the X value.",179,null],[10,"get_y","","Return the Y value.",179,null],[10,"set_x","","Set the X value.",179,null],[10,"set_y","","Set the Y value.",179,null],[11,"get_curve","","Return the bezier curve depth (-1. to 1.) for the next interpolation.",179,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_curve","","Set the bezier curve depth (-1. to 1.) for the next interpolation.",179,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"new","","Create a new EnvPoint.",179,null],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",177,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"f64"}}],[11,"border_color","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"value_font_size","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"point_radius","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"line_thickness","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",177,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct an EnvelopeEditor widget.",176,null],[11,"label_font_id","","Specify the font used for displaying the label.",176,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"point_radius","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"skew_y","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"update","","Update the given `envelope` in accordance with the `Event`.",178,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"common","","",176,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",176,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",176,null],[11,"style","","",176,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the `EnvelopeEditor` in accordance to the latest input and call the given `react` function if necessary.",176,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",176,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"file_navigator","conrod::widget","A widget for navigating through through a file system. Generally inspired by Finder.",null,null],[3,"FileNavigator","conrod::widget::file_navigator","A widget for navigating and interacting with a file system.",null,null],[12,"style","","Unique styling for the widget.",180,null],[12,"starting_directory","","The first directory shown for the `FileNavigator`.",180,null],[12,"types","","Only display files of the given type.",180,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Directory","","Represents the state for a single directory.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",181,null],[12,"unselected_color","","The color of the unselected entries.",181,null],[12,"text_color","","The color of the directory and file names.",181,null],[12,"font_size","","The font size for the directory and file names.",181,null],[12,"column_width","","The default width of a single directory view.",181,null],[12,"resize_handle_width","","The width of the bar that separates each directory in the stack and allows for re-sizing.",181,null],[4,"Types","","A type for specifying the types of files to be shown by a `FileNavigator`.",null,null],[13,"All","","Indicates that files of all types should be shown.",182,null],[13,"WithExtension","","A list of types of files that are accepted by the `FileNavigator`.",182,null],[4,"Event","","The kinds of events that the `FileNavigator` may produce.",null,null],[13,"ChangeDirectory","","The directory at the top of the stack has changed.",183,null],[13,"ChangeSelection","","The selection of files in the top of the stack has changed.",183,null],[13,"Click","","A `Click` event occurred over a selection of entries.",183,null],[13,"DoubleClick","","A file was double clicked.",183,null],[13,"Press","","A `Press` event occurred over a selection of entries.",183,null],[13,"Release","","A `Release` event occurred over a selection of entries.",183,null],[0,"directory_view","","Lists the contents of a single directory.",null,null],[3,"DirectoryView","conrod::widget::file_navigator::directory_view","For viewing, selecting, double-clicking, etc the contents of a directory.",null,null],[12,"style","","Unique styling for the widget.",184,null],[12,"directory","","The path of the directory to display.",184,null],[12,"types","","Only display files of the given type.",184,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Entry","","Data stored for each `File` in the `State`.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",185,null],[12,"unselected_color","","The color of the unselected entries.",185,null],[12,"text_color","","The color of the directory and file names.",185,null],[12,"font_size","","The font size for the directory and file names.",185,null],[4,"Event","","The kinds of `Event`s produced by the `DirectoryView`.",null,null],[13,"Selection","","Some change in the `Selection` occurred. This represents the new full selection.",186,null],[13,"Click","","One or more entries have been double clicked.",186,null],[13,"DoubleClick","","One or more entries have been double clicked.",186,null],[13,"Press","","A `Press` event occurred while the given entries were selected.",186,null],[13,"Release","","A `Release` event occurred while the given entries were selected.",186,null],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",185,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",185,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"unselected_color","","Retrieves the value from the `Style`.",185,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"text_color","","Retrieves the value from the `Style`.",185,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"font_size","","Retrieves the value from the `Style`.",185,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"new","","Begin building a `DirectoryNavigator` widget that displays only files of the given types.",184,{"inputs":[{"name":"path"},{"name":"types"}],"output":{"name":"self"}}],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",184,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",184,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories",184,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",184,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"common","","",184,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",184,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",184,null],[11,"style","","",184,null],[11,"update","","",184,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",184,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"clone","conrod::widget::file_navigator","",182,{"inputs":[{"name":"self"}],"output":{"name":"types"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"directory"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"directory"}],"output":{"name":"bool"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",181,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",181,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"unselected_color","","Retrieves the value from the `Style`.",181,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"text_color","","Retrieves the value from the `Style`.",181,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"font_size","","Retrieves the value from the `Style`.",181,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"column_width","","Retrieves the value from the `Style`.",181,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"resize_handle_width","","Retrieves the value from the `Style`.",181,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"new","","Begin building a `FileNavigator` widget that displays only files of the given types.",180,{"inputs":[{"name":"path"},{"name":"types"}],"output":{"name":"self"}}],[11,"all","","Begin building a `FileNavigator` that will display all file types.",180,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"with_extension","","Begin building a `FileNavigator` that will only display files whose extensions match one of those within the given extension list.",180,null],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",180,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",180,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories.",180,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",180,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"common","","",180,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",180,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",180,null],[11,"style","","",180,null],[11,"update","","Update the state of the Button.",180,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",180,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"list","conrod::widget","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[3,"List","conrod::widget::list","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[12,"common","","Common widget building params for the `List`.",189,null],[12,"style","","Unique styling for the `List`.",189,null],[12,"item_instantiation","","Whether all or only visible items should be instantiated.",189,null],[3,"Style","","Unique styling for the `List`.",null,null],[12,"scrollbar_width","","The width of the scrollbar if it is visible.",190,null],[12,"scrollbar_color","","The color of the scrollbar if it is visible.",190,null],[12,"scrollbar_position","","The location of the `List`'s scrollbar.",190,null],[3,"State","","Represents the state of the List widget.",null,null],[3,"Item","","The data necessary for instantiating a single item within a `List`.",null,null],[12,"i","","The index of the item within the list.",191,null],[12,"widget_id","","The id generated for the widget.",191,null],[12,"last_id","","The id used for the previous item's widget.",191,null],[12,"w","","The width of the item.",191,null],[12,"h","","The height of the item.",191,null],[3,"Scrollbar","","A wrapper around a `List`'s `Scrollbar` and its `widget::Id`.",null,null],[3,"Items","","An `Iterator` yielding each `Item` in the list.",null,null],[4,"ItemInstantiation","","The way in which a `List` should instantiate its `Item`s.",null,null],[13,"All","","Instantiate an `Item` for every element, regardless of visibility.",192,null],[13,"OnlyVisible","","Only instantiate visible `Item`s.",192,null],[4,"ScrollbarPosition","","If the `List` is scrollable, this describes how th `Scrollbar` should be positioned.",null,null],[13,"NextTo","","To the right of the items (reduces the item width to fit).",193,null],[13,"OnTop","","On top of the right edge of the items with auto_hide activated.",193,null],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",190,{"inputs":[],"output":{"name":"self"}}],[11,"scrollbar_width","","Retrieves the value from the `Style`.",190,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"scrollbar_color","","Retrieves the value from the `Style`.",190,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"scrollbar_position","","Retrieves the value from the `Style`.",190,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"iteminstantiation"}],"output":{"name":"bool"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"iteminstantiation"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"scrollbarposition"}],"output":{"name":"bool"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"scrollbarposition"}}],[11,"new","","Create a List context to be built upon.",189,{"inputs":[{"name":"usize"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_width","","The width of the `Scrollbar`.",189,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",189,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instatiated for every element in the list, regardless of whether or not the `Item` would be visible.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"common","","",189,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",189,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",189,null],[11,"style","","",189,null],[11,"update","","",189,null],[11,"next","","Yield the next `Item` in the list.",194,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",191,null],[11,"set","","Set the `Scrollbar` within the given `Ui`.",195,{"inputs":[{"name":"self"},{"name":"uicell"}],"output":null}],[0,"list_select","conrod::widget","A wrapper around the `List` widget providing the ability to select one or more items.",null,null],[3,"ListSelect","conrod::widget::list_select","A wrapper around the `List` widget that handles single and multiple selection logic.",null,null],[3,"State","","Represents the state of the ListSelect.",null,null],[3,"Events","","An iterator-like type for yielding `ListSelect` `Event`s.",null,null],[3,"Single","","A single item selection `Mode` for the `ListSelect`.",null,null],[3,"Multiple","","A selection `Mode` for the `ListSelect` that allows selecting more than one item at a time.",null,null],[4,"Event","","The kind of events that the `ListSelect` may `react` to. Provides tuple(s) of index in list and string representation of selection",null,null],[13,"Item","","The next `Item` is ready for instantiation.",196,null],[13,"Selection","","A change in selection has occurred.",196,null],[13,"Press","","A button press occurred while the widget was capturing the mouse.",196,null],[13,"Release","","A button release occurred while the widget was capturing the mouse.",196,null],[13,"Click","","A click occurred while the widget was capturing the mouse.",196,null],[13,"DoubleClick","","A double click occurred while the widget was capturing the mouse.",196,null],[4,"Selection","","Represents some change in item selection for a `ListSelect` in `Multiple` mode.",null,null],[13,"Add","","Items which have been added to the selection.",197,null],[13,"Remove","","Items which have been removed from the selection.",197,null],[6,"PendingEvents","","Buffer use for storing events that have been produced but are yet to be yielded.",null,null],[8,"Mode","","Allows the `ListSelect` to be generic over `Single` and `Multiple` selection modes.",null,null],[16,"Selection","","The data associated with the `Mode`s `Event::Selection`.",198,null],[10,"click_selection","","Update the `PendingEvents` in accordance with the given `Click` event.",198,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[10,"key_selection","","Update the `PendingEvents` in accordance with the given `KeyPress` event.",198,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"listselect"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"single"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"multiple"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"selection"}}],[11,"update_bool_slice","","Update the given slice of `bool`s with this `Selection`.",197,null],[11,"update_index_set","","Update the given set of selected indices with this `Selection`.",197,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":null}],[11,"single","","Construct a new ListSelect, allowing one selected item at a time.",199,{"inputs":[{"name":"usize"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"multiple","","Construct a new ListSelect, allowing multiple selected items.",199,{"inputs":[{"name":"usize"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"new","","Begin building a new `ListSelect` with the given mode.",199,{"inputs":[{"name":"usize"},{"name":"scalar"},{"name":"m"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",199,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",199,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_width","","The width of the `Scrollbar`.",199,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",199,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instatiated for every element in the list, regardless of whether or not the `Item` would be visible.",199,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",199,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"common","","",199,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",199,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",199,null],[11,"style","","",199,null],[11,"update","","Update the state of the ListSelect.",199,null],[11,"next","","Yield the next `Event`.",202,{"inputs":[{"name":"self"},{"name":"ui"},{"name":"f"}],"output":{"name":"option"}}],[11,"click_selection","","",200,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"key_selection","","",200,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"click_selection","","",201,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"key_selection","","",201,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[0,"matrix","conrod::widget","A helper widget for laying out child widgets in the form of a grid.",null,null],[3,"Matrix","conrod::widget::matrix","Draw a matrix of any rectangular widget type, where the matrix will provide a function with the widget number, it's `rows` and `cols` position, the width and height for the widget and the location at which the widget should be drawn.",null,null],[3,"State","","The state of the Matrix, to be cached within the `Ui`'s widget `Graph`.",null,null],[3,"Style","","Unique styling for the `Matrix`.",null,null],[12,"cell_pad_w","","The width of the padding for each matrix element's \"cell\".",203,null],[12,"cell_pad_h","","The height of the padding for each matrix element's \"cell\".",203,null],[3,"Elements","","The event type yielded by the `Matrix`.",null,null],[3,"Element","","Data necessary for instantiating a widget for a single `Matrix` element.",null,null],[12,"widget_id","","The id generated for the widget.",204,null],[12,"row","","The row number for the `Element`.",204,null],[12,"col","","The column number for the `Element`.",204,null],[12,"w","","The width of the element.",204,null],[12,"h","","The height of the element.",204,null],[12,"rel_x","","The *x* position of the element relative to the centre of the `Matrix`.",204,null],[12,"rel_y","","The *y* position of the element relative to the centre of the `Matrix`.",204,null],[6,"WidgetNum","","The number of the widget.",null,null],[6,"ColNum","","A column index.",null,null],[6,"RowNum","","A row index.",null,null],[6,"Width","","The width of an element.",null,null],[6,"Height","","The height of an element.",null,null],[6,"PosX","","The position of an element along the *x* axis.",null,null],[6,"PosY","","The position of an element along the *y* axis.",null,null],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",203,{"inputs":[],"output":{"name":"self"}}],[11,"cell_pad_w","","Retrieves the value from the `Style`.",203,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"cell_pad_h","","Retrieves the value from the `Style`.",203,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"new","","Create a widget matrix context.",205,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"cell_padding","","A builder method for adding padding to the cell.",205,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",205,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",205,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",205,null],[11,"style","","",205,null],[11,"update","","Update the state of the Matrix.",205,null],[11,"next","","Yield the next `Element`.",206,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",204,null],[0,"number_dialer","conrod::widget","A widget for precision control over any base-10 digit within a given value.",null,null],[3,"NumberDialer","conrod::widget::number_dialer","A widget for precision control over any digit within a value.",null,null],[3,"Style","","Unique graphical styling for the NumberDialer.",null,null],[12,"color","","Color of the NumberDialer's rectangle.",207,null],[12,"border","","The color of the rectangle border.",207,null],[12,"border_color","","The color of the rectangle border.",207,null],[12,"label_color","","The color of the NumberDialer's label.",207,null],[12,"label_font_size","","The font size for the NumberDialer's label.",207,null],[12,"font_id","","The `Id` associated with the font to use for the `NumberDialer` values.",207,null],[3,"State","","The state of the NumberDialer.",null,null],[3,"GlyphSlot","","Each digit in the adjustable value has its own **Rectangle** and **Text** widgets.",null,null],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",207,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",207,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",207,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",207,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",207,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",207,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"font_id","","Retrieves the value from the `Style`.",207,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"glyphslot"}}],[11,"new","","Construct a new NumberDialer widget.",209,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"u8"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the label.",209,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",209,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",209,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",209,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",209,null],[11,"style","","",209,null],[11,"update","","Update the state of the NumberDialer.",209,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",209,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",209,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",209,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",209,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",209,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",209,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"plot_path","conrod::widget","A widget for plotting a series of lines using the given function *x -> y*.",null,null],[3,"PlotPath","conrod::widget::plot_path","A widget that plots a series of lines using the given function *x -> y*.",null,null],[3,"Style","","Unique styling parameters for the `PlotPath` widget.",null,null],[12,"thickness","","The thickness of the plotted line.",210,null],[12,"color","","The color of the line.",210,null],[3,"State","","Unique state stored between updates for the `PlotPath` widget.",null,null],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",210,{"inputs":[],"output":{"name":"self"}}],[11,"thickness","","Retrieves the value from the `Style`.",210,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"color","","Retrieves the value from the `Style`.",210,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"new","","Begin building a new `PlotPath` widget instance.",211,{"inputs":[{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"f"}],"output":{"name":"self"}}],[11,"common","","",211,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",211,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",211,null],[11,"style","","",211,null],[11,"update","","Update the state of the PlotPath.",211,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",211,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"range_slider","conrod::widget","A widget for specifying start and end values for some linear range.",null,null],[3,"RangeSlider","conrod::widget::range_slider","Linear range selection.",null,null],[3,"Style","","Graphical styling unique to the RangeSlider widget.",null,null],[12,"color","","The color of the slidable rectangle.",212,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",212,null],[12,"border_color","","The color of the Slider's border.",212,null],[12,"label_color","","The color of the Slider's label.",212,null],[12,"label_font_size","","The font-size for the Slider's label.",212,null],[12,"label_font_id","","The ID of the font used to display the label.",212,null],[3,"State","","Represents the state of the Slider widget.",null,null],[3,"Event","","The `Event` type produced by the `RangeSlider`.",null,null],[4,"Drag","","The part of the `RangeSlider` that is in the process of being dragged.",null,null],[13,"Edge","","One of the edges is being dragged.",213,null],[13,"Handle","","The whole range is being dragged.",213,null],[4,"Edge","","Either the `Start` or `End` `Edge` of the `RangeSlider`'s bar.",null,null],[13,"Start","","The start edge of the scrollbar handle.",214,null],[13,"End","","The end edge of the scrollbar handle.",214,null],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",212,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",212,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",212,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",212,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",212,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",212,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",212,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"next","","",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new RangeSlider widget.",216,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",216,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"common","","",216,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",216,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",216,null],[11,"style","","",216,null],[11,"kid_area","","",216,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Slider.",216,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",216,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",216,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",216,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",216,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",216,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",216,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"rounded_rectangle","conrod::widget","Similar to the `Rectangle` widget however is drawn with rounded corners.",null,null],[3,"RoundedRectangle","conrod::widget::rounded_rectangle","Draws a rectangle with corners rounded via the given radius.",null,null],[12,"common","","Data necessary and common for all widget builder types.",217,null],[12,"style","","Unique styling for the **RoundedRectangle**.",217,null],[12,"radius","","The radius of the circle used to round each corner of the rectangle.",217,null],[12,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",217,null],[3,"State","","Unique state for the `RoundedRectangle`.",null,null],[17,"DEFAULT_CORNER_RESOLUTION","","The default resolution of the circle used to draw the rounded corners.",null,null],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"roundedrectangle"}}],[11,"styled","","Build a rounded rectangle with the given dimensions and style.",217,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new filled rounded rectangle.",217,{"inputs":[{"name":"dimensions"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new filled rounded rectangle widget filled with the given color.",217,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new outlined rounded rectangle widget.",217,{"inputs":[{"name":"dimensions"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"outline_styled","","Build an outlined rounded rectangle rather than a filled one.",217,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"style"}],"output":{"name":"self"}}],[11,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",217,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"common","","",217,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",217,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",217,null],[11,"style","","",217,null],[11,"update","","Update the state of the Rectangle.",217,null],[11,"color","","",217,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"scrollbar","conrod::widget","A widget that allows for manually scrolling via dragging the mouse.",null,null],[3,"Scrollbar","conrod::widget::scrollbar","A widget that allows for scrolling via dragging the mouse.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",218,null],[12,"thickness","","The \"thickness\" of the scrollbar's track and handle `Rect`s.",218,null],[12,"auto_hide","","When true, the `Scrollbar` will only be visible when:",218,null],[3,"State","","The state of the `Scrollbar`.",null,null],[8,"Axis","","The axis that is scrolled by the `Scrollbar`.",null,null],[10,"track_rect","","The `Rect` for a scroll \"track\" with the given `thickness` for a container with the given `Rect`.",219,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[10,"handle_rect","","The `Rect` for a scroll handle given both `Range`s.",219,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[10,"scroll_state","","Retrieve the related `scroll::State` for the axis from a given widget container.",219,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[10,"default_x_dimension","","Determine a default *x* dimension for the scrollbar in the case that no specific width is given.",219,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"default_y_dimension","","Determine a default *y* dimension for the scrollbar in the case that no specific height is given.",219,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"to_2d","","Convert a given `Scalar` along the axis into two dimensions.",219,null],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",218,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",218,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"thickness","","Retrieves the value from the `Style`.",218,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"auto_hide","","Retrieves the value from the `Style`.",218,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"bool"}}],[11,"auto_hide","","By default, this is set to `false`.",220,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"thickness","","Build the widget with the given `thickness`.",220,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_axis","","Begin building a new scrollbar widget that scrolls along the *X* axis along the range of the scrollable widget at the given Id.",220,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"y_axis","","Begin building a new scrollbar widget that scrolls along the *Y* axis along the range of the scrollable widget at the given Id.",220,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"common","","",220,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",220,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",220,null],[11,"style","","",220,null],[11,"default_x_dimension","","",220,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",220,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",220,null],[11,"track_rect","conrod::widget::scroll","",134,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"handle_rect","","",134,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"scroll_state","","",134,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"default_x_dimension","","",134,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",134,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"to_2d","","",134,null],[11,"track_rect","","",135,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"handle_rect","","",135,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"scroll_state","","",135,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"default_x_dimension","","",135,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",135,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"to_2d","","",135,null],[11,"color","conrod::widget::scrollbar","Build the type's self.$($assignee).+ with the given $Type.",220,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"slider","conrod::widget","A widget for selecting a single value along some linear range.",null,null],[3,"Slider","conrod::widget::slider","Linear value selection.",null,null],[12,"skew","","The amount in which the slider's display should be skewed.",221,null],[12,"enabled","","Whether or not user input is enabled for the Slider.",221,null],[3,"Style","","Graphical styling unique to the Slider widget.",null,null],[12,"color","","The color of the slidable rectangle.",222,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",222,null],[12,"border_color","","The color of the Slider's border.",222,null],[12,"label_color","","The color of the Slider's label.",222,null],[12,"label_font_size","","The font-size for the Slider's label.",222,null],[12,"label_font_id","","The ID of the font used to display the label.",222,null],[3,"State","","Represents the state of the Slider widget.",null,null],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",222,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a new Slider widget.",221,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",221,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"skew","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",221,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",221,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",221,null],[11,"style","","",221,null],[11,"kid_area","","",221,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Slider.",221,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",221,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"tabs","conrod::widget","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"Tabs","conrod::widget::tabs","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"State","","The state to be cached within the Canvas.",null,null],[3,"Tab","","A single **Tab** in the list owned by the **Tabs** **State**.",null,null],[3,"Style","","Unique styling for the `Tabs` widget.",null,null],[12,"layout","","Layout for the tab selection bar.",223,null],[12,"bar_thickness","","The thickness of the tab selection bar (width for vertical, height for horizontal).",223,null],[12,"label_color","","Color of the number dialer's label.",223,null],[12,"label_font_size","","Font size of the number dialer's label.",223,null],[12,"font_id","","The `font::Id` of the number dialer's font.",223,null],[12,"canvas","","The styling for each `Canvas`.",223,null],[3,"TabRects","","An iterator yielding the **Rect** for each Tab in the given list.",null,null],[4,"Layout","","The direction in which the tabs will be laid out.",null,null],[13,"Horizontal","","Tabs will be laid out horizontally (left to right).",224,null],[13,"Vertical","","Tabs will be laid out vertically (top to bottom).",224,null],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"tab"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"tab"}],"output":{"name":"bool"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"tab"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",223,{"inputs":[],"output":{"name":"self"}}],[11,"layout","","Retrieves the value from the `Style`.",223,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"layout"}}],[11,"bar_thickness","","Retrieves the value from the `Style`.",223,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"label_color","","Retrieves the value from the `Style`.",223,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",223,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"font_id","","Retrieves the value from the `Style`.",223,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"canvas","","Retrieves the value from the `Style`.",223,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"style"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"new","","Construct some new Canvas Tabs.",226,null],[11,"starting_canvas","","Set the initially selected tab with a Canvas via its widget::Id.",226,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges.",226,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"tabs"}}],[11,"layout_horizontally","","Layout the tabs horizontally.",226,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"layout_vertically","","Layout the tabs vertically.",226,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"canvas_style","","Build the `Tabs` widget with the given styling for its `Canvas`ses.",226,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"pad_left","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",226,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",226,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",226,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",226,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bar_thickness","","The width of a vertical `Tabs` selection bar, or the height of a horizontal one.",226,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"starting_tab_idx","","Build the type's self.$($assignee).+ with the given $Type.",226,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",226,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",226,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"common","","",226,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",226,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",226,null],[11,"style","","",226,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` Positionable methods.",226,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Tabs.",226,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"color","","",226,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","",226,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"border_color","","",226,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"new","","Construct a new **TabRects** iterator.",227,null],[11,"next_with_id_and_label","","Yield the next **Tab** **Rect**, along with the associated ID and label.",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"text_box","conrod::widget","A widget for displaying and mutating a one-line field of text.",null,null],[3,"TextBox","conrod::widget::text_box","A widget for displaying and mutating a small, one-line field of text, given by the user in the form of a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextBox.",null,null],[12,"text_padding","","The length of the gap between the bounding rectangle's border and the edge of the text.",228,null],[12,"color","","Color of the rectangle behind the text.",228,null],[12,"border","","The width of the bounding `BorderedRectangle` border.",228,null],[12,"border_color","","The color of the `BorderedRecangle`'s border.",228,null],[12,"text_color","","The color of the `TextEdit` widget.",228,null],[12,"font_size","","The font size for the text.",228,null],[12,"x_align","","The horizontal alignment of the text.",228,null],[12,"font_id","","The font used for the `Text`.",228,null],[3,"State","","The `State` of the `TextBox` widget that will be cached within the `Ui`.",null,null],[4,"Event","","Events produced by the `TextBox`.",null,null],[13,"Update","","The `String` was updated.",229,null],[13,"Enter","","The `Return` or `Enter` key was pressed.",229,null],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",228,{"inputs":[],"output":{"name":"self"}}],[11,"text_padding","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"color","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"text_color","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"x_align","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"font_id","","Retrieves the value from the `Style`.",228,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a TextBox widget.",230,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"align_text_left","","Align the text to the left of its bounding **Rect**'s *x* axis range.",230,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",230,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_right","","Align the text to the right of its bounding **Rect**'s *x* axis range.",230,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",230,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"text_color","","Build the type's self.$($assignee).+ with the given $Type.",230,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",230,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"x_align_text","","Build the type's self.$($assignee).+ with the given $Type.",230,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"pad_text","","Build the type's self.$($assignee).+ with the given $Type.",230,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"common","","",230,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",230,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",230,null],[11,"style","","",230,null],[11,"update","","Update the state of the TextEdit.",230,null],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",230,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",230,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",230,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"text_edit","conrod::widget","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"TextEdit","conrod::widget::text_edit","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextEdit.",null,null],[12,"color","","The color of the text (this includes cursor and selection color).",231,null],[12,"font_size","","The font size for the text.",231,null],[12,"x_align","","The horizontal alignment of the text.",231,null],[12,"y_align","","The vertical alignment of the text.",231,null],[12,"line_spacing","","The vertical space between each line of text.",231,null],[12,"line_wrap","","The way in which text is wrapped at the end of a line.",231,null],[12,"restrict_to_height","","Do not allow to enter text that would exceed the bounds of the `TextEdit`'s `Rect`.",231,null],[12,"font_id","","The font used for the `Text`.",231,null],[3,"State","","The State of the TextEdit widget that will be cached within the Ui.",null,null],[4,"Drag","","Track whether some sort of dragging is currently occurring.",null,null],[13,"Selecting","","The drag is currently selecting a range of text.",232,null],[13,"MoveSelection","","The drag is moving a selection of text.",232,null],[4,"Cursor","","The position of the `Cursor` over the text.",null,null],[13,"Idx","","The cursor is at the given character index.",233,null],[13,"Selection","","The cursor is a selection between these two indices.",233,null],[12,"start","conrod::widget::text_edit::Cursor","The `start` is always the \"anchor\" point.",233,null],[12,"end","","The `end` may be either greater or less than the `start`.",233,null],[11,"eq","conrod::widget::text_edit","",231,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",231,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"x_align","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"y_align","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"line_wrap","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"wrap"}}],[11,"restrict_to_height","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"bool"}}],[11,"font_id","","Retrieves the value from the `Style`.",231,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"new","","Construct a TextEdit widget.",234,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"wrap_by_whitespace","","The `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_character","","By default, the `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_left","","Align the text to the left of its bounding **Rect**'s *x* axis range.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_x_middle","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_right","","Align the text to the right of its bounding **Rect**'s *x* axis range.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_bottom","","Align the text to the left of its bounding **Rect**'s *y* axis range.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_y_middle","","Align the text to the middle of its bounding **Rect**'s *y* axis range.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_top","","Align the text to the right of its bounding **Rect**'s *y* axis range.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding **Rect**.",234,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",234,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",234,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"x_align_text","","Build the type's self.$($assignee).+ with the given $Type.",234,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align_text","","Build the type's self.$($assignee).+ with the given $Type.",234,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"line_wrap","","Build the type's self.$($assignee).+ with the given $Type.",234,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",234,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"restrict_to_height","","Build the type's self.$($assignee).+ with the given $Type.",234,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",234,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",234,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",234,null],[11,"style","","",234,null],[11,"default_y_dimension","","",234,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","Update the state of the TextEdit.",234,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",234,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"title_bar","conrod::widget","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[3,"TitleBar","conrod::widget::title_bar","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",235,null],[12,"style","","Unique styling for the **BorderedRectangle**.",235,null],[12,"label","","A label displayed in the middle of the TitleBar.",235,null],[3,"State","","Unique state for the **TitleBar** widget.",null,null],[3,"Style","","Unique styling for the **TitleBar** widget.",null,null],[12,"color","","The color of the TitleBar's rectangle surface.",236,null],[12,"border","","The width of the border surrounding the TitleBar's rectangle.",236,null],[12,"border_color","","The color of the TitleBar's border.",236,null],[12,"text_color","","The color of the title bar's text.",236,null],[12,"font_size","","The font size for the title bar's text.",236,null],[12,"maybe_wrap","","The way in which the title bar's text should wrap.",236,null],[12,"line_spacing","","The distance between lines for multi-line title bar text.",236,null],[12,"text_align","","The horizontal alignment of the title bar text.",236,null],[12,"font_id","","The font used for the `Text`.",236,null],[5,"calc_height","","Calculate the default height for the **TitleBar**'s rect.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"scalar"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",236,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"text_color","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"maybe_wrap","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"text_align","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"font_id","","Retrieves the value from the `Style`.",236,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a new TitleBar widget and attach it to the widget at the given index.",235,{"inputs":[{"name":"str"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_text_left","","Align the text to the left of its bounding **Rect**'s *x* axis range.",235,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",235,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_right","","Align the text to the right of its bounding **Rect**'s *x* axis range.",235,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",235,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",235,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",235,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",235,null],[11,"style","","",235,null],[11,"default_y_dimension","","",235,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",235,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"toggle","conrod::widget","A button that allows for toggling boolean state.",null,null],[3,"Toggle","conrod::widget::toggle","A pressable widget for toggling the state of a bool.",null,null],[12,"enabled","","If true, will allow user inputs. If false, will disallow user inputs.",237,null],[3,"Style","","Styling for the Toggle including coloring, bordering and labelling.",null,null],[12,"color","","Color of the Toggle's pressable area.",238,null],[12,"border","","The width of the rectangular border surrounding the Toggle.",238,null],[12,"border_color","","The color of the Toggle's border.",238,null],[12,"label_color","","The color of the Toggle's Text label.",238,null],[12,"label_font_size","","The font size for the Toggle's Text label.",238,null],[12,"label_font_id","","The ID of the font used to display the label.",238,null],[3,"State","","The state of the Toggle.",null,null],[3,"TimesClicked","","The `Event` type yielded by the `Toggle` widget.",null,null],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"toggle"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",238,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",238,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"timesclicked"}}],[11,"next","","",239,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new Toggle widget.",237,{"inputs":[{"name":"bool"}],"output":{"name":"toggle"}}],[11,"label_font_id","","Specify the font used for displaying the label.",237,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",237,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",237,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",237,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",237,null],[11,"style","","",237,null],[11,"update","","Update the state of the Toggle.",237,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",237,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",237,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",237,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",237,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",237,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",237,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"xy_pad","conrod::widget","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[3,"XYPad","conrod::widget::xy_pad","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[12,"enabled","","Indicates whether the XYPad will respond to user input.",240,null],[3,"Style","","Unique graphical styling for the XYPad.",null,null],[12,"color","","The color of the XYPad's rectangle.",241,null],[12,"border","","The width of the border surrounding the rectangle.",241,null],[12,"border_color","","The color of the surrounding rectangle border.",241,null],[12,"label_color","","The color of the XYPad's label and value label text.",241,null],[12,"label_font_size","","The font size for the XYPad's label.",241,null],[12,"label_font_id","","The ID of the font used to display the label.",241,null],[12,"value_font_size","","The font size for the XYPad's *value* label.",241,null],[12,"line_thickness","","The thickness of the XYPad's crosshair lines.",241,null],[3,"State","","The state of the XYPad.",null,null],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",241,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"value_font_size","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"line_thickness","","Retrieves the value from the `Style`.",241,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"new","","Build a new XYPad widget.",240,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"y"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",240,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",240,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",240,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",240,null],[11,"style","","",240,null],[11,"update","","Update the XYPad's cached state.",240,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",240,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[8,"Style","conrod::widget","The necessary bounds for a **Widget**'s associated **Style** type.",null,null],[8,"Widget","","A trait to be implemented by all **Widget** types.",null,null],[16,"State","","State to be stored within the `Ui`s widget cache.",242,null],[16,"Style","","Every widget is required to have its own associated `Style` type. This type is intended to contain high-level styling information for the widget that can be *optionally specified* by a user of the widget.",242,null],[16,"Event","","The type of event yielded by the widget, returned via the `Widget::set` function.",242,null],[10,"common","","Return a reference to a **CommonBuilder** struct owned by the Widget. This method allows us to do a blanket impl of Positionable and Sizeable for T: Widget.",242,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[10,"common_mut","","Return a mutable reference to a CommonBuilder struct owned by the Widget. This method allows us to do a blanket impl of Positionable and Sizeable for T: Widget.",242,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[10,"init_state","","Return the initial **State** of the Widget.",242,null],[10,"style","","Return the styling of the widget.",242,null],[10,"update","","Update our **Widget**'s unique **Widget::State** via the **State** wrapper type (the `state` field within the **UpdateArgs**).",242,null],[11,"default_x_position","","The default **Position** for the widget along the *x* axis.",242,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","The default **Position** for the widget along the *y* axis.",242,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_x_dimension","","The default width for the **Widget**.",242,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","The default height of the widget.",242,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"drag_area","","If the widget is draggable, implement this method and return the position and dimensions of the draggable space. The position should be relative to the center of the widget.",242,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` `Position` methods.",242,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"parent","","Set the parent widget for this Widget by passing the WidgetId of the parent.",242,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"no_parent","","Specify that this widget has no parent widgets.",242,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"place_on_kid_area","","Set whether or not the **Widget** should be placed on the kid_area.",242,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"graphics_for","","Indicates that the **Widget** is used as a non-interactive graphical element for some other widget.",242,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"floating","","Set whether or not the widget is floating (the default is `false`). A typical example of a floating widget would be a pop-up or alert window.",242,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"crop_kids","","Indicates that all widgets who are children of this widget should be cropped to the `kid_area` of this widget.",242,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids","","Makes the widget's `KidArea` scrollable.",242,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids_vertically","","Makes the widget's `KidArea` scrollable.",242,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids_horizontally","","Set whether or not the widget's `KidArea` is scrollable (the default is false).",242,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"and","","A builder method that \"lifts\" the **Widget** through the given `build` function.",242,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_mut","","A builder method that mutates the **Widget** with the given `mutate` function.",242,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_if","","A method that conditionally builds the **Widget** with the given `build` function.",242,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_then","","A method that optionally builds the the **Widget** with the given `build` function.",242,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"self"}}],[11,"set","","Note: There should be no need to override this method.",242,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"kidarea"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"maybeparent"}}],[11,"get_unchecked","","Convert the **MaybeParent** into an **Option<Id>**.",127,{"inputs":[{"name":"self"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"name":"id"}}],[11,"get","","The same as `get_unchecked`, but checks whether or not the widget that we're inferring the parent for is the `Ui`'s window (which cannot have a parent, without creating a cycle).",127,{"inputs":[{"name":"self"},{"name":"id"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"name":"option"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"floating"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"commonstyle"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"commonstate"}}],[11,"update","","Mutate the internal widget state and set a flag notifying us that there has been a mutation.",243,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"deref","","",243,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Construct an empty, initialised CommonBuilder.",122,{"inputs":[],"output":{"name":"commonbuilder"}}],[11,"new","","A new default CommonStyle.",123,{"inputs":[],"output":{"name":"self"}}],[6,"FontSize","conrod","Font size used throughout Conrod.",null,null],[6,"Depth","","The depth at which the widget will be rendered.",null,null],[6,"Dimensions","","General use 2D spatial dimensions.",null,null],[6,"Margin","","The margin for some `Place`ment on either end of an axis.",null,null],[6,"Point","","General use 2D spatial point.",null,null],[6,"Scalar","","An alias over the Scalar type used throughout Conrod.",null,null],[8,"Borderable","","Widgets that may display a border.",null,null],[10,"border","","Set the width of the widget's border.",244,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[10,"border_color","","Set the color of the widget's border.",244,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border_rgba","","Set the color of the widget's border with rgba values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[8,"Labelable","","Widgets that may display some label.",null,null],[10,"label","","Set the label for the widget.",245,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[10,"label_color","","Set the color of the widget's label.",245,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_rgba","","Set the color of the widget's label from rgba values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[10,"label_font_size","","Set the font size for the widget's label.",245,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",245,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",245,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",245,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[8,"Positionable","","Widgets that are positionable.",null,null],[10,"x_position","","Build with the given **Position** along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"self"}}],[10,"y_position","","Build with the given **Position** along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"self"}}],[10,"get_x_position","","Get the **Position** along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[10,"get_y_position","","Get the **Position** along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"x","","Build with the given **Absolute** **Position** along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y","","Build with the given **Absolute** **Position** along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy","","Set the **Position** with some Point.",246,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y","","Set the **Position** with *x* *y* coordinates.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative","","Set the **Position** along the *x* axis **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative","","Set the **Position** along the *y* axis **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative","","Set the **Position** **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative","","Set the **Position** **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction","","Build with the **Position** along the *x* axis as some distance from another widget.",246,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction","","Build with the **Position** along the *y* axis as some distance from another widget.",246,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down","","Build with the **Position** as some distance below another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up","","Build with the **Position** as some distance above another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left","","Build with the **Position** as some distance to the left of another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right","","Build with the **Position** as some distance to the right of another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction_from","","Build with the **Position** along the *x* axis as some distance from the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction_from","","Build with the **Position** along the *y* axis as some distance from the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down_from","","Build with the **Position** as some distance below the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up_from","","Build with the **Position** as some distance above the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left_from","","Build with the **Position** as some distance to the left of the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right_from","","Build with the **Position** as some distance to the right of the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_align","","Align the **Position** of the widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align","","Align the **Position** of the widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left","","Align the position to the left (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x","","Align the position to the middle (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_right","","Align the position to the right (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_top","","Align the position to the top (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y","","Align the position to the middle (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom","","Align the position to the bottom (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"x_align_to","","Align the **Position** of the widget with the given widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align_to","","Align the **Position** of the widget with the given widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left_of","","Align the position to the left (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the position to the middle (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_right_of","","Align the position to the right (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_top_of","","Align the position to the top (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the position to the middle (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align the position to the bottom (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"x_place_on","","Place the widget at some position on the `other` Widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place_on","","Place the widget at some position on the `other` Widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle_of","","Place the widget in the middle of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_of","","Place the widget in the top left corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_with_margin_on","","Place the widget in the top left corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins_on","","Place the widget in the top left corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_of","","Place the widget in the top right corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_right_with_margin_on","","Place the widget in the top right corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins_on","","Place the widget in the top right corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place the widget in the bottom left corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin_on","","Place the widget in the bottom left corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins_on","","Place the widget in the bottom left corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place the widget in the bottom right corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin_on","","Place the widget in the bottom right corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins_on","","Place the widget in the bottom right corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place the widget in the middle of the top edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_top_with_margin_on","","Place the widget in the middle of the top edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place the widget in the middle of the bottom edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin_on","","Place the widget in the middle of the bottom edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place the widget in the middle of the left edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_left_with_margin_on","","Place the widget in the middle of the left edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place the widget in the middle of the right edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_right_with_margin_on","","Place the widget in the middle of the right edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_place","","Place the widget at some position on the Widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place","","Place the widget at some position on the Widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle","","Place the widget in the middle of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left","","Place the widget in the top left corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_with_margin","","Place the widget in the top left corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins","","Place the widget in the top left corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right","","Place the widget in the top right corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_with_margin","","Place the widget in the top right corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins","","Place the widget in the top right corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left","","Place the widget in the bottom left corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin","","Place the widget in the bottom left corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins","","Place the widget in the bottom left corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right","","Place the widget in the bottom right corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin","","Place the widget in the bottom right corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins","","Place the widget in the bottom right corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top","","Place the widget in the middle of the top edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_with_margin","","Place the widget in the middle of the top edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom","","Place the widget in the middle of the bottom edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin","","Place the widget in the middle of the bottom edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left","","Place the widget in the middle of the left edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_with_margin","","Place the widget in the middle of the left edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right","","Place the widget in the middle of the right edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_with_margin","","Place the widget in the middle of the right edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"depth","","The depth at which the widget should be rendered relatively to its sibling widgets.",246,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"self"}}],[10,"get_depth","","Return the depth.",246,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[8,"Sizeable","","Widgets that support different dimensions.",null,null],[10,"x_dimension","","Set the length along the x axis.",247,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"y_dimension","","Set the length along the y axis.",247,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"get_x_dimension","","The widget's length along the x axis as a Dimension.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"get_y_dimension","","The widget's length along the y axis as a Dimension.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"w","","Set the absolute width for the widget.",247,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h","","Set the absolute height for the widget.",247,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh","","Set the dimensions for the widget.",247,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"w_h","","Set the width and height for the widget.",247,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w_of","","Set the width as the width of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_w_of","","Set the width as the width of the widget at the given index padded at both ends by the given Scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h_of","","Set the height as the height of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_h_of","","Set the height as the height of the widget at the given index padded at both ends by the given Scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh_of","","Set the dimensions as the dimensions of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_wh_of","","Set the dimensions as the dimensions of the widget at the given index with all four edges padded by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_w_of","","Set the width as the width of the padded area of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_w_of","","Set the width as the `KidArea` width for the widget at the given index, padded at both ends by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index, padded at both ends by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at all four edges by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"get_w","","Get the absolute width of the widget as a Scalar value.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_h","","Get the height of the widget.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_wh","","The dimensions for the widget.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[14,"image_map","","A macro for simplifying the instantiation of an `image::Map`.",null,null],[14,"builder_method","","A macro for simplifying implementation of methods for the `builder pattern`.",null,null],[14,"builder_methods","","A macro to simplify implementation of \"builder-pattern\" methods.",null,null],[14,"widget_style","","A macro for vastly simplifying the definition and implementation of a widget's associated `Style` type.",null,null],[14,"widget_ids","","A macro used to generate a struct with a field for each unique identifier given. Each field can then be used to generate unique `widget::Id`s.",null,null],[11,"border_rgba","","Set the color of the widget's border with rgba values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",244,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"event_id","conrod::event","",19,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"with_args","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",19,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"input"}],"output":{"name":"option"}}],[11,"hash","conrod::input","",50,null],[11,"hash","conrod::input::keyboard","",248,null],[11,"hash","conrod::input","",52,null],[11,"hash","conrod::input::state::mouse","",53,null],[11,"hash","conrod::input","",49,null],[11,"from_idle_args","conrod::event","",19,{"inputs":[{"name":"idleargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"idle","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",19,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"input"}],"output":{"name":"option"}}],[11,"mouse_cursor","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"bitxor","conrod::input::keyboard","Returns the left flags, but with all the right flags toggled.",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",248,null],[11,"bitor","","Returns the union of the two sets of flags.",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"encode","conrod::input","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input::keyboard","",248,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input::state::mouse","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::event","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_xy","","",19,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"input"}],"output":{"name":"option"}}],[11,"mouse_relative","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_controller_axis_args","","",19,{"inputs":[{"name":"controlleraxisargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"controller_axis","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_text","","",19,{"inputs":[{"name":"str"},{"name":"input"}],"output":{"name":"option"}}],[11,"text","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"partial_cmp","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"option"}}],[11,"partial_cmp","conrod::input::keyboard","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::input::state::mouse","",53,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"from_button","conrod::event","",19,{"inputs":[{"name":"button"},{"name":"input"}],"output":{"name":"option"}}],[11,"release","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",19,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"input"}],"output":{"name":"option"}}],[11,"mouse_scroll","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"sub_assign","conrod::input::keyboard","Disables all flags enabled in the set.",248,null],[11,"sub","","Returns the set difference of the two sets of flags.",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"from_render_args","conrod::event","",19,{"inputs":[{"name":"renderargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"render","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"bitor_assign","conrod::input::keyboard","Adds the set of flags.",248,null],[11,"not","","Returns the complement of this set of flags.",248,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"from_after_render_args","conrod::event","",19,{"inputs":[{"name":"afterrenderargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"after_render","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"extend","conrod::input::keyboard","",248,null],[11,"eq","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"eq","conrod::input::keyboard","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"eq","conrod::input::state::mouse","",53,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","conrod::input","",54,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"eq","conrod::event","",20,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"from_button","","",19,{"inputs":[{"name":"button"},{"name":"input"}],"output":{"name":"option"}}],[11,"press","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_width_height","","",19,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"input"}],"output":{"name":"option"}}],[11,"resize","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_focused","","",19,{"inputs":[{"name":"bool"},{"name":"input"}],"output":{"name":"option"}}],[11,"focus","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_cursor","","",19,{"inputs":[{"name":"bool"},{"name":"input"}],"output":{"name":"option"}}],[11,"cursor","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","conrod::input","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input::keyboard","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input::state::mouse","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::event","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","conrod::input::keyboard","",248,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"cmp","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::input::keyboard","",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::input::state::mouse","",53,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"from","conrod::input","",52,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"from","conrod::input::state::mouse","",53,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[11,"from","conrod::input","",49,{"inputs":[{"name":"key"}],"output":{"name":"button"}}],[11,"from","","",49,{"inputs":[{"name":"mousebutton"}],"output":{"name":"button"}}],[11,"from","","",49,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"button"}}],[11,"from","conrod::event","",20,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"motion"}}],[11,"from","","",19,{"inputs":[{"name":"motion"}],"output":{"name":"input"}}],[11,"from_update_args","","",19,{"inputs":[{"name":"updateargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"update","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"bitand_assign","conrod::input::keyboard","Disables all flags disabled in the set.",248,null],[11,"from_iter","","",248,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"decode","conrod::input","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input::keyboard","",248,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input::state::mouse","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::event","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"bitand","conrod::input::keyboard","Returns the intersection between the two sets of flags.",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"clone","conrod::input","",50,{"inputs":[{"name":"self"}],"output":{"name":"controllerbutton"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"controlleraxisargs"}}],[11,"clone","conrod::input::keyboard","",248,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"clone","conrod::input","",52,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"clone","conrod::input::state::mouse","",53,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","conrod::input","",54,{"inputs":[{"name":"self"}],"output":{"name":"renderargs"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"touchargs"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"clone","conrod::event","",20,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"from_touch_args","","",19,{"inputs":[{"name":"touchargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"touch","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"hash","conrod::text::rt","",91,null],[11,"hash","","",93,null],[11,"hash","","",92,null],[11,"hash","conrod::text","",89,null],[11,"partial_cmp","conrod::text::rt","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"option"}}],[11,"lt","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"le","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"gt","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ge","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::text","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"sub","conrod::text::rt","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"vector"}}],[11,"sub","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",91,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","conrod::text","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"div","conrod::text::rt","",93,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"div","","",93,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::text","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","conrod::text::rt","",91,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"ordering"}}],[11,"cmp","","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::text","",89,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"ordering"}}],[11,"mul","conrod::text::rt","",93,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"mul","","",93,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"next","conrod::text","",249,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",250,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","conrod::text::rt","",91,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"clone","conrod::text","",89,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"glyphiter"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"layoutiter"}}],[11,"add","conrod::text::rt","",93,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"add","","",91,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"add","","",93,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"event","conrod::input::keyboard","Change modifier key state depending on input.",248,null],[11,"empty","","Returns an empty set of flags.",248,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",248,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",248,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",248,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",248,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",248,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",248,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",248,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",248,null],[11,"remove","","Removes the specified flags in-place.",248,null],[11,"toggle","","Toggles the specified flags in-place.",248,null],[11,"new","conrod::input","Create a new ControllerButton object. Intended for use by backends when emitting events.",50,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"controllerbutton"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",51,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"controlleraxisargs"}}],[11,"code","","Returns an id of the key",52,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"viewport","","Returns viewport information filling entire render area.",54,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"new","","Creates arguments for 2D touch.",56,null],[11,"new_3d","","Creates arguments for 3D touch.",56,null],[11,"position","","The position of the touch in 2D.",56,null],[11,"position_3d","","The position of the touch in 3D.",56,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",56,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",56,null],[11,"label_rgba","conrod","Set the color of the widget's label from rgba values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",245,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",245,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",245,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",245,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"x","","Build with the given **Absolute** **Position** along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y","","Build with the given **Absolute** **Position** along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy","","Set the **Position** with some Point.",246,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y","","Set the **Position** with *x* *y* coordinates.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative","","Set the **Position** along the *x* axis **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative","","Set the **Position** along the *y* axis **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative","","Set the **Position** **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative","","Set the **Position** **Relative** to the previous widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative_to","","Set the position relative to the widget with the given widget::Id.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction","","Build with the **Position** along the *x* axis as some distance from another widget.",246,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction","","Build with the **Position** along the *y* axis as some distance from another widget.",246,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down","","Build with the **Position** as some distance below another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up","","Build with the **Position** as some distance above another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left","","Build with the **Position** as some distance to the left of another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right","","Build with the **Position** as some distance to the right of another widget.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction_from","","Build with the **Position** along the *x* axis as some distance from the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction_from","","Build with the **Position** along the *y* axis as some distance from the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down_from","","Build with the **Position** as some distance below the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up_from","","Build with the **Position** as some distance above the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left_from","","Build with the **Position** as some distance to the left of the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right_from","","Build with the **Position** as some distance to the right of the given widget.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_align","","Align the **Position** of the widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align","","Align the **Position** of the widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left","","Align the position to the left (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x","","Align the position to the middle (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_right","","Align the position to the right (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_top","","Align the position to the top (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y","","Align the position to the middle (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom","","Align the position to the bottom (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"x_align_to","","Align the **Position** of the widget with the given widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align_to","","Align the **Position** of the widget with the given widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left_of","","Align the position to the left (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the position to the middle (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_right_of","","Align the position to the right (only effective for Up or Down `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_top_of","","Align the position to the top (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the position to the middle (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align the position to the bottom (only effective for Left or Right `Direction`s).",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"x_place_on","","Place the widget at some position on the `other` Widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place_on","","Place the widget at some position on the `other` Widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle_of","","Place the widget in the middle of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_of","","Place the widget in the top left corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_with_margin_on","","Place the widget in the top left corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins_on","","Place the widget in the top left corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_of","","Place the widget in the top right corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_right_with_margin_on","","Place the widget in the top right corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins_on","","Place the widget in the top right corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place the widget in the bottom left corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin_on","","Place the widget in the bottom left corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins_on","","Place the widget in the bottom left corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place the widget in the bottom right corner of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin_on","","Place the widget in the bottom right corner of the given Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins_on","","Place the widget in the bottom right corner of the given Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place the widget in the middle of the top edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_top_with_margin_on","","Place the widget in the middle of the top edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place the widget in the middle of the bottom edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin_on","","Place the widget in the middle of the bottom edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place the widget in the middle of the left edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_left_with_margin_on","","Place the widget in the middle of the left edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place the widget in the middle of the right edge of the given Widget.",246,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_right_with_margin_on","","Place the widget in the middle of the right edge of the given Widget with the given margin between the edges.",246,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_place","","Place the widget at some position on the Widget along the *x* axis.",246,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place","","Place the widget at some position on the Widget along the *y* axis.",246,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle","","Place the widget in the middle of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left","","Place the widget in the top left corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_with_margin","","Place the widget in the top left corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins","","Place the widget in the top left corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right","","Place the widget in the top right corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_with_margin","","Place the widget in the top right corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins","","Place the widget in the top right corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left","","Place the widget in the bottom left corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin","","Place the widget in the bottom left corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins","","Place the widget in the bottom left corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right","","Place the widget in the bottom right corner of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin","","Place the widget in the bottom right corner of the current parent Widget with the given margin between both edges.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins","","Place the widget in the bottom right corner of the current parent Widget with the given margins between each respective edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top","","Place the widget in the middle of the top edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_with_margin","","Place the widget in the middle of the top edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom","","Place the widget in the middle of the bottom edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin","","Place the widget in the middle of the bottom edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left","","Place the widget in the middle of the left edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_with_margin","","Place the widget in the middle of the left edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right","","Place the widget in the middle of the right edge of the current parent Widget.",246,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_with_margin","","Place the widget in the middle of the right edge of the current parent Widget with the given margin from the edge.",246,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w","","Set the absolute width for the widget.",247,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h","","Set the absolute height for the widget.",247,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh","","Set the dimensions for the widget.",247,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"w_h","","Set the width and height for the widget.",247,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w_of","","Set the width as the width of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_w_of","","Set the width as the width of the widget at the given index padded at both ends by the given Scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h_of","","Set the height as the height of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_h_of","","Set the height as the height of the widget at the given index padded at both ends by the given Scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh_of","","Set the dimensions as the dimensions of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_wh_of","","Set the dimensions as the dimensions of the widget at the given index with all four edges padded by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_w_of","","Set the width as the width of the padded area of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_w_of","","Set the width as the `KidArea` width for the widget at the given index, padded at both ends by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index, padded at both ends by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index.",247,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at all four edges by the given scalar.",247,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"get_w","","Get the absolute width of the widget as a Scalar value.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_h","","Get the height of the widget.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_wh","","The dimensions for the widget.",247,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"font","conrod::text","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",251,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","The glyph identifier for this glyph.",251,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",251,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",251,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",90,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[11,"new","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",252,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `Cache::new` for more information.",252,null],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",252,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `Cache::new` for more information.",252,null],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",252,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",252,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",252,null],[11,"clear","","Clears the cache. Does not affect the glyph queue.",252,null],[11,"clear_queue","","Clears the glyph queue.",252,null],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",252,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",252,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"name":"result"}}],[11,"width","conrod::text::rt","",92,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"height","","",92,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"get_x","conrod","Return the X value.",253,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"get_y","","Return the Y value.",253,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"set_x","","Return the X value.",253,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"set_y","","Return the Y value.",253,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"new","","Create a new Envelope Point.",253,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"point"}}]],"paths":[[3,"Padding"],[3,"Range"],[3,"Rect"],[3,"Ui"],[3,"UiBuilder"],[4,"Bordering"],[4,"Align"],[4,"Axis"],[4,"Corner"],[4,"Direction"],[4,"Dimension"],[4,"Edge"],[4,"Place"],[4,"Position"],[3,"Hsla"],[3,"Rgba"],[4,"Color"],[4,"Gradient"],[8,"Colorable"],[4,"Input"],[4,"Motion"],[3,"Text"],[3,"Move"],[3,"Press"],[3,"MousePress"],[3,"KeyPress"],[3,"Release"],[3,"MouseRelease"],[3,"KeyRelease"],[3,"Drag"],[3,"Click"],[3,"DoubleClick"],[3,"Scroll"],[4,"Event"],[4,"Ui"],[4,"Widget"],[4,"Button"],[8,"Walker"],[3,"UniqueWidgetState"],[3,"Container"],[4,"Node"],[4,"Edge"],[3,"PickWidgets"],[3,"PickScrollableWidgets"],[3,"DepthOrder"],[3,"Graph"],[6,"Children"],[6,"Parents"],[3,"Map"],[4,"Button"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[4,"Key"],[4,"Button"],[3,"RenderArgs"],[4,"Touch"],[3,"TouchArgs"],[3,"State"],[3,"Mouse"],[4,"ButtonPosition"],[3,"ButtonMap"],[3,"PressedButtons"],[3,"Mouse"],[3,"Widget"],[3,"Events"],[3,"Presses"],[3,"MousePresses"],[3,"MouseButtonPresses"],[3,"KeyPresses"],[3,"Releases"],[3,"MouseButtonReleases"],[3,"MouseReleases"],[3,"KeyReleases"],[3,"Clicks"],[3,"ButtonClicks"],[3,"Drags"],[3,"ButtonDrags"],[3,"Texts"],[3,"Scrolls"],[3,"Global"],[3,"Events"],[3,"UiEvents"],[3,"Primitive"],[4,"PrimitiveKind"],[8,"PrimitiveWalker"],[3,"OwnedPrimitives"],[3,"Primitives"],[3,"WalkOwnedPrimitives"],[3,"Text"],[3,"GlyphId"],[3,"Scale"],[3,"Point"],[3,"Rect"],[3,"Vector"],[4,"Error"],[3,"Id"],[3,"Ids"],[3,"Map"],[3,"NewIds"],[3,"RectsPerLine"],[3,"SelectedRectsPerLine"],[3,"Rects"],[3,"SelectedRects"],[3,"Index"],[3,"XysPerLine"],[3,"XysPerLineFromText"],[3,"Xs"],[3,"Info"],[4,"Break"],[3,"Rects"],[3,"Infos"],[3,"SelectedRects"],[3,"Lines"],[3,"Theme"],[3,"WidgetDefault"],[3,"UniqueDefault"],[3,"UiCell"],[4,"IterDiff"],[3,"UpdateArgs"],[3,"KidAreaArgs"],[3,"KidArea"],[3,"Floating"],[3,"CommonBuilder"],[3,"CommonStyle"],[3,"CommonState"],[3,"PreUpdateCache"],[3,"PostUpdateCache"],[4,"MaybeParent"],[3,"List"],[3,"Generator"],[3,"ListWalk"],[3,"State"],[8,"Axis"],[3,"Scroll"],[4,"X"],[4,"Y"],[3,"Line"],[3,"State"],[3,"Style"],[4,"Pattern"],[4,"Cap"],[3,"Image"],[3,"State"],[3,"Style"],[3,"PointPath"],[3,"State"],[4,"Style"],[3,"Circle"],[3,"Oval"],[3,"State"],[3,"Polygon"],[3,"State"],[4,"Kind"],[3,"Rectangle"],[4,"Kind"],[3,"State"],[3,"Text"],[3,"Style"],[3,"State"],[4,"Wrap"],[3,"BorderedRectangle"],[3,"Style"],[3,"Button"],[3,"Style"],[3,"Image"],[3,"TimesClicked"],[4,"ImageColor"],[8,"Show"],[3,"Flat"],[3,"Canvas"],[3,"Style"],[4,"Length"],[4,"Direction"],[3,"Style"],[4,"MaxHeight"],[3,"DropDownList"],[3,"EnvelopeEditor"],[3,"Style"],[4,"Event"],[8,"EnvelopePoint"],[3,"FileNavigator"],[3,"Style"],[4,"Types"],[4,"Event"],[3,"DirectoryView"],[3,"Style"],[4,"Event"],[3,"Entry"],[3,"Directory"],[3,"List"],[3,"Style"],[3,"Item"],[4,"ItemInstantiation"],[4,"ScrollbarPosition"],[3,"Items"],[3,"Scrollbar"],[4,"Event"],[4,"Selection"],[8,"Mode"],[3,"ListSelect"],[3,"Single"],[3,"Multiple"],[3,"Events"],[3,"Style"],[3,"Element"],[3,"Matrix"],[3,"Elements"],[3,"Style"],[3,"GlyphSlot"],[3,"NumberDialer"],[3,"Style"],[3,"PlotPath"],[3,"Style"],[4,"Drag"],[4,"Edge"],[3,"Event"],[3,"RangeSlider"],[3,"RoundedRectangle"],[3,"Style"],[8,"Axis"],[3,"Scrollbar"],[3,"Slider"],[3,"Style"],[3,"Style"],[4,"Layout"],[3,"Tab"],[3,"Tabs"],[3,"TabRects"],[3,"Style"],[4,"Event"],[3,"TextBox"],[3,"Style"],[4,"Drag"],[4,"Cursor"],[3,"TextEdit"],[3,"TitleBar"],[3,"Style"],[3,"Toggle"],[3,"Style"],[3,"TimesClicked"],[3,"XYPad"],[3,"Style"],[8,"Widget"],[3,"State"],[8,"Borderable"],[8,"Labelable"],[8,"Positionable"],[8,"Sizeable"],[3,"ModifierKey"],[3,"GlyphIter"],[3,"LayoutIter"],[3,"Glyph"],[3,"GlyphCache"],[6,"Point"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::mem::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",0,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"inputs":[{"name":"self"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"inputs":[{"name":"self"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_raw","","",3,null],[11,"fmt","crossbeam::mem","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",4,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",5,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"swap","","",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",5,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",6,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Check if this queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty stack.",7,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack. **Deprecated method**, use try_pop",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Check if this queue is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",8,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Attempt to dequeue from the front.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",9,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",9,null],[13,"Data","","The stealer has successfully stolen some data.",9,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"push","","Pushes data onto the front of this work queue.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",11,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","crossbeam::sync","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `ArcCell`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",12,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"fmt","crossbeam","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",14,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["daggy"] = {"doc":"**daggy** is a directed acyclic graph data structure library.","items":[[3,"EdgeIndex","daggy","Edge identifier.",null,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"Dag","","A Directed acyclic graph (DAG) data structure.",null,null],[3,"Children","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"Parents","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"EdgeIndices","","An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.",null,null],[3,"WouldCycle","","An error returned by the `Dag::add_edge` method in the case that adding an edge would have caused the graph to cycle.",null,null],[12,"0","","",0,null],[0,"walker","","**Walker** is a trait providing a variety of useful methods for traversing graph types.",null,null],[3,"Recursive","daggy::walker","Recursively walks a graph using the recursive function `recursive_fn`.",null,null],[3,"Chain","","Walks the entirety of `a` before walking the entirety of `b`.",null,null],[3,"Filter","","A walker that applies some given predicate to each element returned by its walker. The only index pairs that will be yielded are those that make the predicate evaluate to true.",null,null],[3,"Peekable","","A walker that has a `.peek(&graph)` method that returns an optional next neighbor.",null,null],[3,"SkipWhile","","A walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",null,null],[3,"TakeWhile","","A walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",null,null],[3,"Skip","","A walker that skips the first n steps of this walk, and then yields all further steps.",null,null],[3,"Take","","A walker that yields the first n steps of this walk.",null,null],[3,"Cycle","","A walker that repeats its internal walker endlessly.",null,null],[3,"Inspect","","A walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",null,null],[3,"Iter","","An iterator yielding index pairs produced by its internal walker and graph.",null,null],[3,"IterEdges","","An iterator yielding edge indices produced by its internal walker and graph.",null,null],[3,"IterNodes","","An iterator yielding node indices produced by its internal walker and graph.",null,null],[3,"IterWeights","","An iterator yielding weights associated with the index pairs produced by its internal walker and graph.",null,null],[3,"IterEdgeWeights","","An iterator yielding edge weights associated with the indices produced by its internal walker and graph.",null,null],[3,"IterNodeWeights","","An iterator yielding node weights associated with the indices produced by its internal walker and graph.",null,null],[6,"IndexPair","","Short-hand for an edge node index pair.",null,null],[8,"Walker","","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",1,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given **Graph**.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given **Graph**.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_node","","The next node in our walk for the given **Graph**.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",1,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",1,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",1,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iterweights"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recursive"}}],[11,"new","","Construct a new **Recursive** **Walker** starting from the node at the given index.",2,{"inputs":[{"name":"nodeindex"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"next","","",3,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"next","","",4,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"peek","","The edge node index pair of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"peek_edge","","The edge index of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"peek_node","","The node index of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"next","","",6,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"next","","",7,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"next","","",8,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"next","","",9,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"next","","",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"next","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"edges","","Convert to an iterator that only yields the edge indices.",12,{"inputs":[{"name":"self"}],"output":{"name":"iteredges"}}],[11,"nodes","","Convert to an iterator that only yields the node indices.",12,{"inputs":[{"name":"self"}],"output":{"name":"iternodes"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"iteredges"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"iternodes"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"iterweights"}}],[11,"edges","","Convert to an iterator yielding only the edge weights.",15,{"inputs":[{"name":"self"}],"output":{"name":"iteredgeweights"}}],[11,"nodes","","Convert to an iterator yielding only the node weights.",15,{"inputs":[{"name":"self"}],"output":{"name":"iternodeweights"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"iteredgeweights"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"iternodeweights"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"PetGraph","daggy","The Petgraph to be used internally within the Dag for storing/managing nodes and edges.",null,null],[6,"RawNodes","","Read only access into a **Dag**'s internal node array.",null,null],[6,"RawEdges","","Read only access into a **Dag**'s internal edge array.",null,null],[6,"RecursiveWalk","","An alias to simplify the **Recursive** **Walker** type returned by **Dag**.",null,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"dag"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wouldcycle"}}],[11,"new","","Create a new, empty `Dag`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Dag` with estimated capacity for its node and edge Vecs.",18,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all nodes and edges from the **Dag**.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"node_count","","The total number of nodes in the **Dag**.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of edgees in the **Dag**.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"graph","","Borrow the `Dag`'s underlying `PetGraph<N, Ix>`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"inputs":[{"name":"self"}],"output":{"name":"petgraph"}}],[11,"into_graph","","Take ownership of the `Dag` and return the internal `PetGraph`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"inputs":[{"name":"self"}],"output":{"name":"petgraph"}}],[11,"add_node","","Add a new node to the `Dag` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"add_edge","","Add a new directed edge to the `Dag` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"result"}}],[11,"add_edges","","Adds the given directed edges to the `Dag`, each with their own given weight.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"update_edge","","Update the edge from nodes `a` -> `b` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"result"}}],[11,"find_edge","","Find and return the index to the edge that describes `a` -> `b` if there is one.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the parent and child nodes for the given `EdgeIndex`.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"clear_edges","","Remove all edges.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"add_parent","","Add a new edge and parent node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"add_child","","Add a new edge and child node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"node_weight","","Borrow the weight from the node at the given index.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Mutably borrow the weight from the node at the given index.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"raw_nodes","","Read from the internal node array.",18,{"inputs":[{"name":"self"}],"output":{"name":"rawnodes"}}],[11,"node_weights_mut","","An iterator yielding mutable access to all node weights.",18,{"inputs":[{"name":"self"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_weight","","Borrow the weight from the edge at the given index.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Mutably borrow the weight from the edge at the given index.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"raw_edges","","Read from the internal edge array.",18,{"inputs":[{"name":"self"}],"output":{"name":"rawedges"}}],[11,"edge_weights_mut","","An iterator yielding mutable access to all edge weights.",18,{"inputs":[{"name":"self"}],"output":{"name":"edgeweightsmut"}}],[11,"index_twice_mut","","Index the `Dag` by two indices.",18,null],[11,"remove_node","","Remove the node at the given index from the `Dag` and return it if it exists.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its weight, or `None` if it didn't exist.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"parents"}}],[11,"children","","A \"walker\" object that may be used to step through the children of the given parent node.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"children"}}],[11,"recursive_walk","","A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"index","","",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"next","","",19,{"inputs":[{"name":"self"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"self"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[11,"index","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",22,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"hash","","",23,null],[11,"hash","","",22,null],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"from","","",23,{"inputs":[{"name":"ix"}],"output":{"name":"nodeindex"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",23,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",22,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","",23,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[11,"index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","",23,{"inputs":[],"output":{"name":"nodeindex"}}]],"paths":[[3,"WouldCycle"],[8,"Walker"],[3,"Recursive"],[3,"Chain"],[3,"Filter"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Cycle"],[3,"Inspect"],[3,"Iter"],[3,"IterEdges"],[3,"IterNodes"],[3,"IterWeights"],[3,"IterEdgeWeights"],[3,"IterNodeWeights"],[3,"Dag"],[3,"Children"],[3,"Parents"],[3,"EdgeIndices"],[3,"EdgeIndex"],[3,"NodeIndex"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"]]};
searchIndex["dbghelp"] = {"doc":"","items":[],"paths":[]};
searchIndex["deflate"] = {"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",null,null],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,null],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,null],[12,"matching_type","","Whether to use lazy or greedy matching.",0,null],[12,"special","","Force fixed/stored blocks (Not implemented yet).",0,null],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",null,null],[13,"Normal","","Compress normally.",1,null],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,null],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,null],[4,"Compression","","An enum describing the level of compression to be used by the encoder",null,null],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,null],[13,"Default","","Default level (`CompressionOptions::default()`).",2,null],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,null],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",null,null],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,null],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,null],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",null,null],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",null,null],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",null,null],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"specialoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compressionoptions"}}],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"fast","","Returns  a fast set of compression settings",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"default","","Returns the options describing the default compression level.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"from","","",0,{"inputs":[{"name":"compression"}],"output":{"name":"compressionoptions"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matchingtype"}}],[0,"write","","Encoders implementing a `Write` interface.",null,null],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",null,null],[3,"ZlibEncoder","","A Zlib encoder/compressor.",null,null],[11,"new","","Creates a new encoder using the provided compression options.",4,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"deflateencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"zlibencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write","","",5,null],[11,"flush","","Flush the encoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["deque"] = {"doc":"A (mostly) lock-free concurrent work-stealing deque","items":[[3,"Worker","deque","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",0,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",0,null],[13,"Data","","The stealer has successfully stolen some data.",0,null],[5,"new","","Allocates a new work-stealing deque.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"push","","Pushes data onto the front of this work queue.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",1,{"inputs":[{"name":"self"}],"output":{"name":"stolen"}}]],"paths":[[4,"Stolen"],[3,"Stealer"],[3,"Worker"]]};
searchIndex["dlib"] = {"doc":"","items":[[3,"Library","dlib","A loaded dynamic library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[4,"DlError","","",null,null],[13,"NotFound","","",0,null],[13,"MissingSymbol","","",0,null],[14,"ffi_dispatch","","",null,null],[14,"ffi_dispatch_static","","",null,null],[14,"link_external_library","","",null,null],[14,"dlopen_external_library","","",null,null],[14,"external_library","","",null,null],[11,"new","","Find and load a dynamic library.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"into_raw","","Extract the wrapped `os::platform::Symbol`.",2,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",2,{"inputs":[{"name":"symbol"},{"name":"l"}],"output":{"name":"symbol"}}]],"paths":[[4,"DlError"],[3,"Library"],[3,"Symbol"]]};
searchIndex["draw_state"] = {"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",null,null],[0,"blend","draw_state::preset","Blending preset modes.",null,null],[17,"ADD","draw_state::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","draw_state::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","draw_state::preset::depth","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","\"<=\" comparison with writable depth",null,null],[0,"state","draw_state","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,null],[12,"cull_face","","Which face should be culled.",1,null],[12,"method","","How to rasterize this primitive.",1,null],[12,"offset","","Any polygon offset to apply.",1,null],[12,"samples","","Multi-sampling mode.",1,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",2,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,null],[12,"op_fail","","What operation to do if the stencil test fails.",2,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",3,null],[12,"back","","",3,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",4,null],[12,"write","","Specify whether to write to the depth buffer or not.",4,null],[3,"BlendChannel","","",null,null],[12,"equation","","",5,null],[12,"source","","",5,null],[12,"destination","","",5,null],[3,"Blend","","",null,null],[12,"color","","",6,null],[12,"alpha","","",6,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",7,null],[12,"blend","","Optional blending.",7,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",8,null],[12,"blend","","Constant blend color.",8,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",9,null],[13,"CounterClockwise","","Counter-clockwise winding order.",9,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",10,null],[13,"Front","","",10,null],[13,"Back","","",10,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",11,null],[13,"Line","","Rasterize as a line with the given width.",11,null],[13,"Fill","","Rasterize as a face.",11,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",12,null],[13,"Less","","`x < y`",12,null],[13,"LessEqual","","`x <= y`",12,null],[13,"Equal","","`x == y`",12,null],[13,"GreaterEqual","","`x >= y`",12,null],[13,"Greater","","`x > y`",12,null],[13,"NotEqual","","`x != y`",12,null],[13,"Always","","`true`",12,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,null],[13,"Zero","","Set the value in the stencil buffer to zero.",13,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",14,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",14,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",14,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",15,null],[13,"SourceAlpha","","",15,null],[13,"DestColor","","",15,null],[13,"DestAlpha","","",15,null],[13,"ConstColor","","",15,null],[13,"ConstAlpha","","",15,null],[4,"Factor","","",null,null],[13,"Zero","","",16,null],[13,"One","","",16,null],[13,"SourceAlphaSaturated","","",16,null],[13,"ZeroPlus","","",16,null],[13,"OneMinus","","",16,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"frontface"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cullface"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rastermethod"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"new_fill","","Create a new filling rasterizer.",1,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",1,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",1,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"offsetunits"}],"output":{"name":"rasterizer"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"comparison"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"stencilop"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"stencilside"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"stencilside"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"stencil"}}],[11,"new","","Create a new stencil state with a given function.",3,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"depth"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"option"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"equation"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"blendvalue"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"factor"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"blendchannel"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"blend"}}],[11,"new","","Create a new blend state with a given equation.",6,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor_assign","","Toggles the set of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"color"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"refvalues"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"refvalues"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an `enum` declaration and automatically adds an implementation of `num::FromPrimitive` (reexported here), to allow conversion from primitive integers to the enum.  It therefore provides an alternative to the built-in `#[derive(FromPrimitive)]`, which requires the unstable `std::num::FromPrimitive` and is disabled in Rust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an automatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a `Some` value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a `default` (if not).",0,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a `default` (if not).",0,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err)`][Err].",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err())`][Err].",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the wrapped value and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"default","","Returns None.",0,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"hash","","",0,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","Iterator over the error chain using the `Error::cause()` method.",null,null],[12,"0","","",0,null],[3,"Display","","A struct which formats an error for output.",null,null],[0,"example_generated","","These modules show an example of code generated by the macro. **IT MUST NOT BE USED OUTSIDE THIS CRATE**.",null,null],[3,"Error","error_chain::example_generated","The Error type.",null,null],[12,"0","","The kind of the error.",1,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",2,null],[13,"Inner","","Link to another `ErrorChain`.",2,null],[13,"Io","","Link to a `std::error::Error` type.",2,null],[13,"Custom","","A custom error kind.",2,null],[0,"inner","","Another code generated by the macro.",null,null],[3,"Error","error_chain::example_generated::inner","The Error type.",null,null],[12,"0","","The kind of the error.",3,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",4,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns *some type that can be converted to `ErrorKind`*, boxes the original error to store as the cause, then returns a new error containing the original error.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",3,null],[11,"kind","","",3,null],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",3,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",3,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns *some type that can be converted to `ErrorKind`*, boxes the original error to store as the cause, then returns a new error containing the original error.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",1,null],[11,"kind","","",1,null],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",null,null],[10,"code","","Returns the value to use as the exit status.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",null,null],[16,"ErrorKind","","Associated kind type.",8,null],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",8,null],[10,"kind","","Returns the kind of the error.",8,null],[10,"iter","","Iterates over the error chain.",8,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[10,"backtrace","","Returns the backtrace associated with this error.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"display","","Returns an object which implements `Display` for printing the full context of this error.",8,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","",null,null],[14,"error_chain_processed","","Prefer to use `error_chain` instead of this macro.",null,null],[14,"error_chain","","This macro is used for handling of duplicated and out-of-order fields. For the exact rules, see `error_chain_processed`.",null,null],[14,"quick_main","","Convenient wrapper to be able to use `try!` and such in the main. You can use it with a separated function:",null,null],[14,"bail","","Exits a function early with an error",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",10,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"backtrace"}}],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"backtrace"}}],[11,"into","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}]],"paths":[[3,"ErrorChainIter"],[3,"Error"],[4,"ErrorKind"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ResultExt"],[8,"ExitCode"],[8,"ChainedError"],[3,"Display"],[3,"Backtrace"]]};
searchIndex["fixedbitset"] = {"doc":"**FixedBitSet** is a simple fixed size set of bits.","items":[[3,"FixedBitSet","fixedbitset","**FixedBitSet** is a simple fixed size set of bits that can be enabled (1 / **true**) or disabled (0 / **false**).",null,null],[8,"IndexRange","","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"fixedbitset"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacity","","Create a new **FixedBitSet** with a specific number of bits, all initially clear.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"grow","","Grow capacity to **bits**, all new bits initialized to zero",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","Return the length of the **FixedBitSet** in bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","Return **true** if the bit is enabled in the **FixedBitSet**, **false** otherwise.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clear","","Clear all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Enable `bit`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"put","","Enable `bit`, and return its previous value.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","**Panics** if **bit** is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"copy_bit","","Copies boolean value from specified bit to the specified bit.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"count_ones","","Count the number of set bits in the given bit range.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"as_slice","","View the bitset as a slice of `u32` blocks",1,null],[11,"as_mut_slice","","View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last will cause `contains` to return potentially incorrect results for bits past the bitlength.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"IndexRange"],[3,"FixedBitSet"]]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to ```value * (π / 180)```.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to ```value * (180 / π)```.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Returns cosine of self",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Returns tangent of self",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",9,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[10,"from_f32","","from a f32",9,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[10,"from_isize","","from a isze",9,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[10,"from_u32","","from a u32",9,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"from_i32","","from a i32",9,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["fs2"] = {"doc":"","items":[[5,"lock_contended_error","fs2","Returns the error that a call to a try lock method on a contended file will return.",null,{"inputs":[],"output":{"name":"error"}}],[5,"free_space","","Returns the number of free bytes in the file system containing the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"available_space","","Returns the available space in bytes to non-priveleged users in the file system containing the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"total_space","","Returns the total space in bytes in the file system containing the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"allocation_granularity","","Returns the filesystem's disk space allocation granularity in bytes. The provided path may be for any file in the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[8,"FileExt","","Extension trait for `std::fs::File` which provides allocation, duplication and locking methods.",null,null],[10,"duplicate","","Returns a duplicate instance of the file.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"allocated_size","","Returns the amount of physical space allocated for a file.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"allocate","","Ensures that at least `len` bytes of disk space are allocated for the file, and the file size is at least `len` bytes. After a successful call to `allocate`, subsequent writes to the file within the specified length are guaranteed not to fail because of lack of disk space.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"lock_shared","","Locks the file for shared usage, blocking if the file is currently locked exclusively.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"lock_exclusive","","Locks the file for exclusive usage, blocking if the file is currently locked.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"try_lock_shared","","Locks the file for shared usage, or returns a an error if the file is currently locked (see `lock_contended_error`).",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"try_lock_exclusive","","Locks the file for shared usage, or returns a an error if the file is currently locked (see `lock_contended_error`).",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"unlock","","Unlocks the file.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"FileExt"]]};
searchIndex["gfx"] = {"doc":"An efficient, low-level, bindless graphics API for Rust. See the blog for explanations and annotated examples.","items":[[0,"preset","gfx","State presets",null,null],[0,"blend","gfx::preset","Blending preset modes.",null,null],[17,"ADD","gfx::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","gfx::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","gfx::preset::depth","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","\"<=\" comparison with writable depth",null,null],[0,"state","gfx","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[8,"Device","gfx","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Ðevice`.",17,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",17,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",18,null],[16,"Shader","","",18,null],[16,"Program","","",18,null],[16,"PipelineStateObject","","",18,null],[16,"Texture","","",18,null],[16,"ShaderResourceView","","",18,null],[16,"UnorderedAccessView","","",18,null],[16,"RenderTargetView","","",18,null],[16,"DepthStencilView","","",18,null],[16,"Sampler","","",18,null],[16,"Fence","","",18,null],[16,"Mapping","","",18,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",19,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",19,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",19,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",19,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",19,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",19,null],[6,"VertexCount","","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",20,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",20,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",20,null],[3,"VertexShader","","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx::buffer","Untyped buffer",null,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",21,null],[13,"Index","","Index buffer",21,null],[13,"Constant","","Constant buffer",21,null],[13,"Staging","","Staging buffer",21,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",22,null],[12,"usage","","Usage hint",22,null],[12,"bind","","Bind flags",22,null],[12,"size","","Size in bytes",22,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",22,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",23,null],[13,"Other","","Unknown other error.",23,null],[13,"UnsupportedUsage","","Usage mode is not supported",23,null],[0,"format","gfx","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",24,null],[13,"Uint","","",24,null],[13,"Inorm","","",24,null],[13,"Unorm","","",24,null],[13,"Float","","",24,null],[13,"Srgb","","",24,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",25,null],[13,"R4_G4_B4_A4","","",25,null],[13,"R5_G5_B5_A1","","",25,null],[13,"R5_G6_B5","","",25,null],[13,"R8","","",25,null],[13,"R8_G8","","",25,null],[13,"R8_G8_B8_A8","","",25,null],[13,"R10_G10_B10_A2","","",25,null],[13,"R11_G11_B10","","",25,null],[13,"R16","","",25,null],[13,"R16_G16","","",25,null],[13,"R16_G16_B16","","",25,null],[13,"R16_G16_B16_A16","","",25,null],[13,"R32","","",25,null],[13,"R32_G32","","",25,null],[13,"R32_G32_B32","","",25,null],[13,"R32_G32_B32_A32","","",25,null],[13,"B8_G8_R8_A8","","",25,null],[13,"D16","","",25,null],[13,"D24","","",25,null],[13,"D24_S8","","",25,null],[13,"D32","","",25,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",26,null],[13,"One","","",26,null],[13,"X","","",26,null],[13,"Y","","",26,null],[13,"Z","","",26,null],[13,"W","","",26,null],[3,"Swizzle","","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",27,null],[12,"1","","",27,null],[12,"2","","",27,null],[12,"3","","",27,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",28,null],[12,"1","","",28,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",29,null],[10,"get_surface_type","","Return the run-time value of the type.",29,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",30,null],[10,"get_channel_type","","Return the run-time value of the type.",30,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",31,null],[16,"Channel","","Associated channel type.",31,null],[16,"View","","Shader view type of this format.",31,null],[11,"get_format","","Return the run-time value of the type.",31,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[3,"U8Norm","","",null,null],[12,"0","","",32,null],[3,"I8Norm","","",null,null],[12,"0","","",33,null],[3,"U16Norm","","",null,null],[12,"0","","",34,null],[3,"I16Norm","","",null,null],[12,"0","","",35,null],[3,"F16","","",null,null],[12,"0","","",36,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[0,"handle","gfx","Resource handles",null,null],[3,"RawBuffer","gfx::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[0,"texture","gfx","Texture creation and modification.",null,null],[17,"MAX_LEVEL","gfx::texture","Maximum accessible mipmap level of a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",37,null],[13,"Kind","","The kind doesn't support a particular operation.",37,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",37,null],[13,"Size","","Unsupported size in one of the dimensions.",37,null],[13,"Data","","The given data has a different size than the target texture slice.",37,null],[13,"Usage","","The mentioned usage mode is not supported",37,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",38,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",38,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",39,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",39,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",39,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",40,null],[13,"Mipmap","","Add simple mipmapping.",40,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",40,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",40,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",40,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",41,null],[13,"NegX","","",41,null],[13,"PosY","","",41,null],[13,"NegY","","",41,null],[13,"PosZ","","",41,null],[13,"NegZ","","",41,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",42,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",42,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",42,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",42,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",42,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",42,null],[13,"CubeArray","","An array of Cube textures.",42,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",43,null],[12,"yoffset","","",43,null],[12,"zoffset","","",43,null],[12,"width","","",43,null],[12,"height","","",43,null],[12,"depth","","",43,null],[12,"format","","Format of each texel.",43,null],[12,"mipmap","","Which mipmap to select.",43,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",44,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",44,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",44,null],[13,"Border","","Use border color.",44,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",45,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",46,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",46,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",46,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",46,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",46,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",46,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",47,null],[12,"levels","","",47,null],[12,"format","","",47,null],[12,"bind","","",47,null],[12,"usage","","",47,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",48,null],[12,"layer","","",48,null],[12,"min","","",48,null],[12,"max","","",48,null],[12,"swizzle","","",48,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",49,null],[12,"level","","",49,null],[12,"layer","","",49,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",50,null],[12,"layer","","",50,null],[12,"flags","","",50,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[0,"mapping","gfx","Memory mapping",null,null],[4,"Error","gfx::mapping","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",51,null],[3,"Reader","","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[8,"Factory","gfx","A `Factory` is responsible for creating and managing resources for the context it was created with. ",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",52,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"result"}}],[10,"create_buffer_immutable_raw","","",52,null],[11,"create_buffer_immutable","","",52,null],[11,"create_buffer","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"role"},{"name":"usage"},{"name":"bind"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",52,{"inputs":[{"name":"self"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",52,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",52,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",52,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",52,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",52,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",52,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",52,null],[10,"create_sampler","","",52,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",52,{"inputs":[{"name":"self"},{"name":"info"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",52,{"inputs":[{"name":"self"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",52,null],[11,"view_texture_as_unordered_access","","",52,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",52,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",52,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",52,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_immutable_u8","","",52,null],[11,"create_texture_immutable","","",52,null],[11,"create_render_target","","",52,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",52,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",52,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",53,null],[13,"Channel","","Selected channel type is not supported for this texture.",53,null],[13,"Layer","","Selected layer can not be viewed for this texture.",53,null],[13,"Unsupported","","The backend was refused for some reason.",53,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",54,null],[13,"Level","","Selected mip level doesn't exist.",54,null],[13,"Layer","","Selected array layer doesn't exist.",54,null],[13,"Channel","","Selected channel type is not supported for this texture.",54,null],[13,"Unsupported","","The backend was refused for some reason.",54,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",55,null],[13,"Resource","","Failed to create SRV or UAV.",55,null],[13,"Target","","Failed to create RTV or DSV.",55,null],[0,"memory","","Memory stuff",null,null],[4,"Usage","gfx::memory","How this memory will be used.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",56,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",56,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",56,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",56,null],[3,"Access","","Memory access",null,null],[17,"READ","","Read access",null,null],[17,"WRITE","","Write access",null,null],[17,"RW","","Full access",null,null],[3,"Bind","","Bind flags",null,null],[17,"RENDER_TARGET","","Can be rendered into.",null,null],[17,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","Can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",null,null],[17,"TRANSFER_SRC","","Can be transfered from.",null,null],[17,"TRANSFER_DST","","Can be transfered into.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[3,"Bind","gfx","Bind flags",null,null],[17,"TRANSFER_SRC","","Can be transfered from.",null,null],[17,"TRANSFER_DST","","Can be transfered into.",null,null],[17,"RENDER_TARGET","","Can be rendered into.",null,null],[17,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","Can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",57,null],[10,"bind_pipeline_state","","Bind a pipeline state object",57,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",57,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",57,null],[10,"bind_global_constant","","Bind a global constant",57,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",57,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",57,null],[10,"bind_samplers","","Bind a complete set of samplers",57,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",57,null],[10,"bind_index","","Bind an index buffer",57,null],[10,"set_scissor","","Set scissor rectangle",57,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",57,null],[10,"copy_buffer","","Copy part of a buffer to another",57,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",57,null],[10,"update_texture","","Update a texture",57,null],[10,"generate_mipmap","","",57,null],[10,"clear_color","","Clear color target",57,null],[10,"clear_depth_stencil","","",57,null],[10,"call_draw","","Draw a primitive",57,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",57,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",58,null],[12,"globals","","Global constants in the program",58,null],[12,"constant_buffers","","Constant buffers in the program",58,null],[12,"textures","","Textures in the program",58,null],[12,"unordereds","","Unordered access resources in the program",58,null],[12,"samplers","","Samplers in the program",58,null],[12,"outputs","","Output targets in the program",58,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",58,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",58,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",59,null],[13,"F32","","",59,null],[13,"I32Vector2","","",59,null],[13,"I32Vector3","","",59,null],[13,"I32Vector4","","",59,null],[13,"F32Vector2","","",59,null],[13,"F32Vector3","","",59,null],[13,"F32Vector4","","",59,null],[13,"F32Matrix2","","",59,null],[13,"F32Matrix3","","",59,null],[13,"F32Matrix4","","",59,null],[3,"Encoder","","Graphics Command Encoder",null,null],[3,"Slice","","A `Slice` dictates in which and in what order vertices get processed. It is required for processing a PSO.",null,null],[12,"start","","The start index of the index-buffer. Processing will start at this location in the index-buffer. ",60,null],[12,"end","","The end index in the index-buffer. Processing will stop at this location (exclusive) in the index buffer.",60,null],[12,"base_vertex","","This is the index of the first vertex in the `VertexBuffer`. This value will be added to every index in the index-buffer, effectively moving the start of the `VertexBuffer` to this base-vertex.",60,null],[12,"instances","","Instancing configuration.",60,null],[12,"buffer","","Represents the type of index-buffer used.",60,null],[4,"UpdateError","","An error occuring in buffer/texture updates.",null,null],[13,"OutOfBounds","","",61,null],[12,"target","gfx::UpdateError","",61,null],[12,"source","","",61,null],[13,"UnitCountMismatch","gfx","",61,null],[12,"target","gfx::UpdateError","",61,null],[12,"slice","","",61,null],[13,"InvalidUsage","gfx","",61,null],[4,"PipelineStateError","","Error creating a PipelineState",null,null],[13,"Program","","Shader program failed to link.",62,null],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",62,null],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",62,null],[4,"IndexBuffer","","Type of index-buffer used in a Slice.",null,null],[13,"Auto","","Represents a hypothetical index-buffer from 0 to infinity. In other words, all vertices get processed in order.",63,null],[13,"Index16","","An index-buffer with unsigned 16 bit indices.",63,null],[13,"Index32","","An index-buffer with unsigned 32 bit indices.",63,null],[0,"traits","","public re-exported traits",null,null],[8,"Device","gfx::traits","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Ðevice`.",17,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",17,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[8,"Factory","","A `Factory` is responsible for creating and managing resources for the context it was created with. ",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",52,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"result"}}],[10,"create_buffer_immutable_raw","","",52,null],[11,"create_buffer_immutable","","",52,null],[11,"create_buffer","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"role"},{"name":"usage"},{"name":"bind"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",52,{"inputs":[{"name":"self"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",52,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",52,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",52,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",52,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",52,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",52,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",52,null],[10,"create_sampler","","",52,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",52,{"inputs":[{"name":"self"},{"name":"info"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",52,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",52,{"inputs":[{"name":"self"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",52,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",52,null],[11,"view_texture_as_unordered_access","","",52,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",52,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",52,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",52,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_immutable_u8","","",52,null],[11,"create_texture_immutable","","",52,null],[11,"create_render_target","","",52,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",52,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",52,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[8,"Pod","","A trait for plain-old-data types.",null,null],[8,"FactoryExt","","This trait is responsible for creating and managing graphics resources, much like the `Factory` trait in the `gfx` crate. Every `Factory` automatically implements `FactoryExt`. ",null,null],[11,"create_vertex_buffer","","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",64,null],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",64,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",64,null],[11,"create_shader_set_tessellation","","Mainly for testing",64,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",64,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.  ",64,{"inputs":[{"name":"self"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",64,{"inputs":[{"name":"self"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",64,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",64,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"eq","gfx","",61,{"inputs":[{"name":"self"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"updateerror"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",61,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",65,{"inputs":[{"name":"c"}],"output":{"name":"encoder"}}],[11,"flush","","Submits the commands in this `Encoder`'s internal `CommandBuffer` to the GPU, so they can be executed. ",65,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"copy_buffer","","Copy part of a buffer to another",65,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"buffer"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"update_buffer","","Update a buffer with a slice of data.",65,null],[11,"update_constant_buffer","","Update a buffer with a single structure.",65,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"t"}],"output":null}],[11,"update_texture","","Update the contents of a texture.",65,null],[11,"clear","","Clears the supplied `RenderTargetView` to the supplied `ClearColor`.",65,null],[11,"clear_depth","","Clear a depth view with a specified value.",65,{"inputs":[{"name":"self"},{"name":"depthstencilview"},{"name":"depth"}],"output":null}],[11,"clear_stencil","","Clear a stencil view with a specified value.",65,{"inputs":[{"name":"self"},{"name":"depthstencilview"},{"name":"stencil"}],"output":null}],[11,"draw","","Draws a `slice::Slice` using a pipeline state object, and its matching `Data` structure.",65,{"inputs":[{"name":"self"},{"name":"slice"},{"name":"pipelinestate"},{"name":"d"}],"output":null}],[11,"create_vertex_buffer","gfx::traits","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",64,null],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",64,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",64,null],[11,"create_shader_set_tessellation","","Mainly for testing",64,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",64,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.  ",64,{"inputs":[{"name":"self"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",64,{"inputs":[{"name":"self"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",64,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",64,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"fmt","gfx","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pipelinestateerror"}}],[11,"from","","",62,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"pipelinestateerror"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",62,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",62,{"inputs":[{"name":"programerror"}],"output":{"name":"self"}}],[11,"from","","",62,{"inputs":[{"name":"initerror"}],"output":{"name":"self"}}],[11,"from","","",62,{"inputs":[{"name":"creationerror"}],"output":{"name":"self"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"slice"}}],[11,"new_match_vertex_buffer","","Creates a new `Slice` to match the supplied vertex buffer, from start to end, in order.",60,{"inputs":[{"name":"buffer"}],"output":{"name":"self"}}],[11,"get_prim_count","","Calculates the number of primitives of the specified type in this `Slice`.",60,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"u32"}}],[11,"split_at","","Divides one slice into two at an index.",60,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"indexbuffer"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"into_index_buffer","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"into_index_buffer","gfx::handle","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"into_index_buffer","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[0,"pso","gfx","A typed high-level graphics pipeline interface.",null,null],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",67,null],[12,"rasterizer","","Rasterizer setup",67,null],[12,"scissor","","Enable scissor test",67,null],[12,"vertex_buffers","","Vertex buffers",67,null],[12,"attributes","","Vertex attributes",67,null],[12,"constant_buffers","","Constant buffers",67,null],[12,"resource_views","","Shader resource views",67,null],[12,"unordered_views","","Unordered access views",67,null],[12,"samplers","","Samplers",67,null],[12,"color_targets","","Render target views (RTV)",67,null],[12,"depth_stencil","","Depth stencil view (DSV)",67,null],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time whenever we draw something with a PSO. This is what \"data\" struct gets transformed into when we call `encoder.draw(...)` with it. It doesn't have any typing information, since PSO knows what format and layout to expect from each resource.",null,null],[12,"vertex_buffers","","",68,null],[12,"constant_buffers","","",68,null],[12,"global_constants","","",68,null],[12,"resource_views","","",68,null],[12,"unordered_views","","",68,null],[12,"samplers","","",68,null],[12,"pixel_targets","","",68,null],[12,"ref_values","","",68,null],[12,"scissor","","",68,null],[3,"PipelineState","","A strongly typed Pipleline State Object. See the module documentation for more information.",null,null],[4,"ElementError","","Error matching an element inside the constant buffer.",null,null],[13,"NotFound","","Element not found.",69,null],[13,"Offset","","Element offset mismatch.",69,null],[13,"Format","","Element format mismatch.",69,null],[4,"InitError","","Failure to initilize the link between the shader and the data.",null,null],[13,"VertexImport","","Vertex attribute mismatch.",70,null],[13,"ConstantBuffer","","Constant buffer mismatch.",70,null],[13,"GlobalConstant","","Global constant mismatch.",70,null],[13,"ResourceView","","Shader resource view mismatch.",70,null],[13,"UnorderedView","","Unordered access view mismatch.",70,null],[13,"Sampler","","Sampler mismatch.",70,null],[13,"PixelExport","","Pixel target mismatch.",70,null],[0,"buffer","","Buffer components for a PSO.",null,null],[6,"BufferIndex","gfx::pso::buffer","Index of a vertex buffer.",null,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",71,null],[12,"offset","","Offset from the beginning of the container, in bytes",71,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",null,null],[3,"RawVertexBuffer","","Raw vertex/instance buffer component. Can be used when the formats of vertex attributes are not known at compile time.",null,null],[3,"ConstantBuffer","","Constant buffer component.",null,null],[3,"RawConstantBuffer","","Raw constant buffer component.",null,null],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed into any constant buffer. Deprecated in DX10 and higher.",null,null],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.",null,null],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",null,null],[8,"Structure","","A trait to be implemented by any struct having the layout described in the graphics API, like a vertex buffer.",null,null],[10,"query","","Get the layout of an element by name.",72,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_vertex_buffer","","",73,null],[11,"link_input","","",73,null],[11,"bind_to","","",73,null],[11,"new","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_vertex_buffer","","",74,null],[11,"link_input","","",74,null],[11,"bind_to","","",74,null],[11,"new","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_constant_buffer","","",75,null],[11,"bind_to","","",75,null],[11,"new","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_constant_buffer","","",76,null],[11,"bind_to","","",76,null],[11,"new","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_global_constant","","",77,null],[11,"bind_to","","",77,null],[0,"resource","gfx::pso","Resource components for a PSO.",null,null],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture, but can also be a buffer.",null,null],[3,"RawShaderResource","","Raw (untyped) shader resource (SRV).",null,null],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer) with no defined access order across simultaneously executing shaders. Supported on DX10 and higher.",null,null],[3,"Sampler","","Sampler component.",null,null],[3,"TextureSampler","","A convenience type for a texture paired with a sampler. It only makes sense for DX9 class hardware, where every texture by default is bundled with a sampler, hence they are represented by the same name. In DX10 and higher samplers are totally separated from the textures.",null,null],[11,"new","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",78,null],[11,"bind_to","","",78,null],[11,"new","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",79,null],[11,"bind_to","","",79,null],[11,"new","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_unordered_view","","",80,null],[11,"bind_to","","",80,null],[11,"new","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_sampler","","",81,null],[11,"bind_to","","",81,null],[11,"new","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",82,null],[11,"link_sampler","","",82,null],[11,"bind_to","","",82,null],[0,"target","gfx::pso","Render target components for a PSO.",null,null],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.",null,null],[3,"BlendTarget","","Render target component with active blending mode.",null,null],[3,"RawRenderTarget","","Raw (untyped) render target component with optional blending.",null,null],[3,"DepthTarget","","Depth target component.",null,null],[3,"StencilTarget","","Stencil target component.",null,null],[3,"DepthStencilTarget","","Depth + stencil target component.",null,null],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.",null,null],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.",null,null],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_output","","",83,null],[11,"bind_to","","",83,null],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_output","","",84,null],[11,"bind_to","","",84,null],[11,"new","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_output","","",85,null],[11,"bind_to","","",85,null],[11,"new","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",86,null],[11,"bind_to","","",86,null],[11,"new","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",87,null],[11,"bind_to","","",87,null],[11,"new","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",88,null],[11,"bind_to","","",88,null],[11,"new","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_scissor","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bind_to","","",89,null],[11,"new","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bind_to","","",90,null],[0,"bundle","gfx::pso","Combine slice data with pipeline state.",null,null],[3,"Bundle","gfx::pso::bundle","Slice-PSO bundle.",null,null],[12,"slice","","Slice",91,null],[12,"pso","","Pipeline state",91,null],[12,"data","","Pipeline data",91,null],[11,"new","","Create new Bundle",91,{"inputs":[{"name":"slice"},{"name":"pipelinestate"},{"name":"data"}],"output":{"name":"self"}}],[11,"encode","","Draw bundle using encoder.",91,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[8,"PipelineInit","gfx::pso","A service trait implemented by the \"init\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",92,null],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program, represented by `ProgramInfo`. Returns an instance of the \"meta\" struct upon successful mapping.",92,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[8,"PipelineData","","a service trait implemented the \"data\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",93,null],[10,"bake_to","","Dump all the contained data into the raw data set, given the mapping (\"meta\"), and a handle manager.",93,null],[8,"DataLink","","The \"link\" logic portion of a PSO component. Defines the input data for the component.",null,null],[16,"Init","","The assotiated \"init\" type - a member of the PSO \"init\" struct.",94,null],[10,"new","","Create a new empty data link.",94,{"inputs":[],"output":{"name":"self"}}],[10,"is_active","","Check if this link is actually used by the shader.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_vertex_buffer","","Attempt to link with a vertex buffer containing multiple attributes.",94,null],[11,"link_input","","Attempt to link with a vertex attribute.",94,null],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",94,null],[11,"link_global_constant","","Attempt to link with a global constant.",94,null],[11,"link_output","","Attempt to link with an output render target (RTV).",94,null],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",94,null],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",94,null],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",94,null],[11,"link_sampler","","Attempt to link with a sampler.",94,null],[11,"link_scissor","","Attempt to enable scissor test.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"DataBind","","The \"bind\" logic portion of the PSO component. Defines how the user data translates into the raw data set.",null,null],[16,"Data","","The associated \"data\" type - a member of the PSO \"data\" struct.",95,null],[10,"bind_to","","Dump the given data into the raw data set.",95,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty data set.",68,{"inputs":[],"output":{"name":"rawdataset"}}],[11,"clear","","Clear all contained data.",68,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"elementerror"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"elementerror"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"elementerror"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",69,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",69,{"inputs":[{"name":"elementerror"}],"output":{"name":"elementerror"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"initerror"}}],[11,"from","","",70,{"inputs":[{"name":"initerror"}],"output":{"name":"initerror"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",70,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new PSO from a raw handle and the \"meta\" instance.",96,{"inputs":[{"name":"rawpipelinestate"},{"name":"primitive"},{"name":"m"}],"output":{"name":"pipelinestate"}}],[11,"get_handle","","Get a raw handle reference.",96,{"inputs":[{"name":"self"}],"output":{"name":"rawpipelinestate"}}],[11,"get_meta","","Get a \"meta\" struct reference. Can be used by the user to check what resources are actually used and what not.",96,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[0,"shade","gfx","Shaders Shader parameter handling.",null,null],[0,"core","gfx::shade","Shader handling.",null,null],[6,"Dimension","gfx::shade::core","Number of components in a container type (vectors/matrices)",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",97,null],[13,"NoArray","","",97,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",98,null],[13,"NoCompare","","",98,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",99,null],[13,"NoMultiSample","","",99,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",100,null],[13,"NoRect","","",100,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",101,null],[13,"RowMajor","","",101,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",102,null],[13,"D1","","Sample from a 1D texture",102,null],[13,"D2","","Sample from a 2D texture",102,null],[13,"D3","","Sample from a 3D texture",102,null],[13,"Cube","","Sample from a cubemap.",102,null],[3,"SamplerType","","A type of the sampler variable.",null,null],[12,"0","","",103,null],[12,"1","","",103,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",104,null],[13,"U32","","",104,null],[13,"F32","","",104,null],[13,"F64","","",104,null],[13,"Bool","","",104,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",105,null],[13,"Vector","","A vector with `Dimension` components.",105,null],[13,"Matrix","","A matrix.",105,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",106,null],[13,"Hull","","",106,null],[13,"Domain","","",106,null],[13,"Geometry","","",106,null],[13,"Pixel","","",106,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",59,null],[13,"F32","","",59,null],[13,"I32Vector2","","",59,null],[13,"I32Vector3","","",59,null],[13,"I32Vector4","","",59,null],[13,"F32Vector2","","",59,null],[13,"F32Vector3","","",59,null],[13,"F32Vector4","","",59,null],[13,"F32Matrix2","","",59,null],[13,"F32Matrix3","","",59,null],[13,"F32Matrix4","","",59,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",107,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",108,null],[3,"Usage","","Parameter usage flags.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[17,"HULL","","Used by the hull shader",null,null],[17,"DOMAIN","","Used by the pixel shader",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",109,null],[12,"slot","","Slot of the vertex attribute.",109,null],[12,"base_type","","Type that this attribute is composed of.",109,null],[12,"container","","\"Scalarness\" of this attribute.",109,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",110,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",110,null],[12,"count","","Number of elements this constant represents.",110,null],[12,"base_type","","Type that this constant is composed of",110,null],[12,"container","","\"Scalarness\" of this constant.",110,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",111,null],[12,"slot","","Slot of the constant buffer.",111,null],[12,"size","","Size (in bytes) of this buffer's data.",111,null],[12,"usage","","What program stage this buffer is used in.",111,null],[12,"elements","","List of individual elements in this buffer.",111,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",112,null],[12,"slot","","Slot of this texture variable.",112,null],[12,"base_type","","Base type for the texture.",112,null],[12,"ty","","Type of this texture.",112,null],[12,"usage","","What program stage this texture is used in.",112,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",113,null],[12,"slot","","Slot of this unordered variable.",113,null],[12,"usage","","What program stage this UAV is used in.",113,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",114,null],[12,"slot","","Slot of this sampler variable.",114,null],[12,"ty","","Type of this sampler.",114,null],[12,"usage","","What program stage this texture is used in.",114,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",115,null],[12,"slot","","Output color target index.",115,null],[12,"base_type","","Type of the output component.",115,null],[12,"container","","\"Scalarness\" of this output.",115,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",58,null],[12,"globals","","Global constants in the program",58,null],[12,"constant_buffers","","Constant buffers in the program",58,null],[12,"textures","","Textures in the program",58,null],[12,"unordereds","","Unordered access resources in the program",58,null],[12,"samplers","","Samplers in the program",58,null],[12,"outputs","","Output targets in the program",58,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",58,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",58,null],[3,"Program","","A program",null,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",116,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",116,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",116,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",117,null],[13,"StageNotSupported","","The device does not support the shader stage.",117,null],[13,"CompilationFailed","","The shader failed to compile.",117,null],[6,"CreateProgramError","","An error type for creating programs.",null,null],[6,"ConstFormat","gfx::shade","Format of a shader constant.",null,null],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",108,null],[3,"Usage","","Parameter usage flags.",null,null],[4,"ProgramError","","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",118,null],[13,"Hull","","Unable to compile the pixel shader",118,null],[13,"Domain","","Unable to compile the pixel shader",118,null],[13,"Pixel","","Unable to compile the pixel shader",118,null],[13,"Link","","Unable to link",118,null],[8,"ToUniform","","",null,null],[10,"convert","","",119,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"programerror"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"macros","gfx","Convenience macros Various helper macros.",null,null],[8,"IntoIndexBuffer","","A helper trait to create `IndexBuffers` from different kinds of data.",null,null],[10,"into_index_buffer","","Turns self into an `IndexBuffer`.",120,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[14,"gfx_pipeline_inner","","",null,null],[14,"gfx_pipeline_base","","",null,null],[14,"gfx_pipeline","","",null,null],[14,"gfx_impl_struct","","",null,null],[14,"gfx_impl_struct_meta","","",null,null],[14,"gfx_vertex_struct","","",null,null],[14,"gfx_vertex_struct_meta","","",null,null],[14,"gfx_constant_struct","","",null,null],[14,"gfx_constant_struct_meta","","",null,null],[14,"gfx_format","","",null,null],[14,"gfx_defines","","Defines vertex, constant and pipeline formats in one block",null,null],[11,"eq","gfx::state","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"hash","","",1,null],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"hash","","",121,null],[11,"hash","","",4,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",8,null],[11,"hash","","",9,null],[11,"hash","","",10,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"hash","","",14,null],[11,"hash","","",122,null],[11,"hash","","",15,null],[11,"default","","",7,{"inputs":[],"output":{"name":"stencilside"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"stencil"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"depth"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"color"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"refvalues"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"cmp","","",121,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"cmp","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"bitxor_assign","","Toggles the set of flags.",122,null],[11,"bitor","","Returns the union of the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",122,null],[11,"from_iter","","",122,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",121,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"sub_assign","","Disables all flags enabled in the set.",122,null],[11,"sub","","Returns the set difference of the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frontface"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cullface"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rastermethod"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"multisample"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"comparison"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"stencilop"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"stencilside"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"equation"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"blendvalue"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"factor"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"blendchannel"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"refvalues"}}],[11,"bitor_assign","","Adds the set of flags.",122,null],[11,"not","","Returns the complement of this set of flags.",122,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"hash","gfx::buffer","",123,null],[11,"hash","gfx::handle","",66,null],[11,"hash","gfx::shade::core","",124,null],[11,"hash","gfx::texture","",125,null],[11,"hash","gfx::buffer","",21,null],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"hash","gfx::format","",24,null],[11,"hash","","",126,null],[11,"hash","","",127,null],[11,"hash","","",128,null],[11,"hash","","",129,null],[11,"hash","","",130,null],[11,"hash","","",131,null],[11,"hash","","",25,null],[11,"hash","","",132,null],[11,"hash","","",133,null],[11,"hash","","",134,null],[11,"hash","","",135,null],[11,"hash","","",136,null],[11,"hash","","",137,null],[11,"hash","","",138,null],[11,"hash","","",139,null],[11,"hash","","",140,null],[11,"hash","","",141,null],[11,"hash","","",142,null],[11,"hash","","",143,null],[11,"hash","","",144,null],[11,"hash","","",145,null],[11,"hash","","",146,null],[11,"hash","","",147,null],[11,"hash","","",148,null],[11,"hash","","",149,null],[11,"hash","","",150,null],[11,"hash","","",151,null],[11,"hash","","",152,null],[11,"hash","","",153,null],[11,"hash","","",26,null],[11,"hash","","",27,null],[11,"hash","","",28,null],[11,"hash","","",32,null],[11,"hash","","",33,null],[11,"hash","","",34,null],[11,"hash","","",35,null],[11,"hash","","",36,null],[11,"hash","gfx::handle","",154,null],[11,"hash","","",155,null],[11,"hash","","",156,null],[11,"hash","","",157,null],[11,"hash","","",158,null],[11,"hash","","",159,null],[11,"hash","","",160,null],[11,"hash","","",161,null],[11,"hash","","",162,null],[11,"hash","","",163,null],[11,"hash","","",164,null],[11,"hash","","",165,null],[11,"hash","","",166,null],[11,"hash","","",167,null],[11,"hash","gfx::mapping","",51,null],[11,"hash","gfx::memory","",56,null],[11,"hash","","",168,null],[11,"hash","gfx","",169,null],[11,"hash","gfx::pso::buffer","",71,null],[11,"hash","gfx::pso","",67,null],[11,"hash","gfx::shade::core","",97,null],[11,"hash","","",98,null],[11,"hash","","",99,null],[11,"hash","","",100,null],[11,"hash","","",101,null],[11,"hash","","",102,null],[11,"hash","","",104,null],[11,"hash","","",105,null],[11,"hash","","",106,null],[11,"hash","gfx::shade","",170,null],[11,"hash","gfx::texture","",38,null],[11,"hash","","",39,null],[11,"hash","","",40,null],[11,"hash","","",41,null],[11,"hash","","",42,null],[11,"hash","","",43,null],[11,"hash","","",44,null],[11,"hash","","",171,null],[11,"hash","","",45,null],[11,"hash","","",46,null],[11,"hash","","",47,null],[11,"hash","","",48,null],[11,"hash","","",49,null],[11,"hash","","",172,null],[11,"hash","","",50,null],[11,"hash","gfx","",173,null],[11,"hash","","",174,null],[11,"hash","","",175,null],[11,"hash","","",176,null],[11,"hash","","",177,null],[11,"hash","","",20,null],[11,"hash","","",19,null],[11,"fmt","gfx::buffer","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::mapping","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::shade::core","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::texture","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitxor","gfx::memory","Returns the left flags, but with all the right flags toggled.",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitxor","gfx","Returns the left flags, but with all the right flags toggled.",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor","gfx::shade","Returns the left flags, but with all the right flags toggled.",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitxor","gfx::texture","Returns the left flags, but with all the right flags toggled.",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitxor_assign","gfx::memory","Toggles the set of flags.",168,null],[11,"bitxor_assign","gfx","Toggles the set of flags.",169,null],[11,"bitxor_assign","gfx::shade","Toggles the set of flags.",170,null],[11,"bitxor_assign","gfx::texture","Toggles the set of flags.",172,null],[11,"bitor","gfx::memory","Returns the union of the two sets of flags.",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitor","gfx","Returns the union of the two sets of flags.",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitor","gfx::shade","Returns the union of the two sets of flags.",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitor","gfx::texture","Returns the union of the two sets of flags.",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"get_info","gfx::buffer","Get buffer info",123,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","gfx::handle","",154,null],[11,"get_info","gfx::shade::core","Get program info",124,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"deref","gfx::handle","",156,null],[11,"get_info","gfx::texture","Get texture descriptor",125,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"deref","gfx::handle","",157,null],[11,"deref","gfx::mapping","",178,null],[11,"deref","","",179,null],[11,"get_channel_type","gfx::format","",126,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",127,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",128,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",129,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",130,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",131,{"inputs":[],"output":{"name":"channeltype"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"option"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",128,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"option"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"option"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"option"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"option"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"option"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"option"}}],[11,"partial_cmp","","",134,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"option"}}],[11,"partial_cmp","","",135,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"option"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"option"}}],[11,"partial_cmp","","",137,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"option"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"option"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"option"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"option"}}],[11,"partial_cmp","","",141,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"option"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"option"}}],[11,"partial_cmp","","",143,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"option"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"option"}}],[11,"partial_cmp","","",145,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",146,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",147,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",148,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"option"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"option"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"option"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"option"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"option"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::memory","",56,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"option"}}],[11,"partial_cmp","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"option"}}],[11,"lt","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"le","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"gt","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ge","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"option"}}],[11,"lt","","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::shade","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::texture","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"option"}}],[11,"lt","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"option"}}],[11,"lt","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",168,null],[11,"sub_assign","gfx","Disables all flags enabled in the set.",169,null],[11,"sub_assign","gfx::shade","Disables all flags enabled in the set.",170,null],[11,"sub_assign","gfx::texture","Disables all flags enabled in the set.",172,null],[11,"sub","gfx::memory","Returns the set difference of the two sets of flags.",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"sub","gfx","Returns the set difference of the two sets of flags.",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub","gfx::shade","Returns the set difference of the two sets of flags.",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"sub","gfx::texture","Returns the set difference of the two sets of flags.",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitor_assign","gfx::memory","Adds the set of flags.",168,null],[11,"bitor_assign","gfx","Adds the set of flags.",169,null],[11,"bitor_assign","gfx::shade","Adds the set of flags.",170,null],[11,"bitor_assign","gfx::texture","Adds the set of flags.",172,null],[11,"not","gfx::memory","Returns the complement of this set of flags.",168,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"not","gfx","Returns the complement of this set of flags.",169,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"not","gfx::shade","Returns the complement of this set of flags.",170,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"not","gfx::texture","Returns the complement of this set of flags.",172,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"description","gfx::buffer","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","gfx::mapping","",51,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx::shade::core","",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx::texture","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"extend","gfx::memory","",168,null],[11,"extend","gfx","",169,null],[11,"extend","gfx::shade","",170,null],[11,"extend","gfx::texture","",172,null],[11,"eq","gfx::buffer","",123,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",66,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",124,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",125,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","gfx::buffer","",21,{"inputs":[{"name":"self"},{"name":"role"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"eq","gfx","",53,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",24,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",154,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"eq","gfx::mapping","",51,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","gfx::memory","",56,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"eq","gfx","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"eq","gfx::pso::buffer","",71,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"eq","gfx::pso","",67,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",97,{"inputs":[{"name":"self"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",109,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",37,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"eq","gfx","",173,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"fmt","gfx::shade::core","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::buffer","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::format","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::handle","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::mapping","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::memory","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::pso::buffer","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::pso","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::shade::core","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::shade","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::shade::core","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx::texture","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_surface_type","gfx::format","",132,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",133,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",134,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",135,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",136,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",137,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",138,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",139,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",140,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",141,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",142,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",143,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",144,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",145,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",146,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",147,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",148,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",149,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",150,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",151,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",152,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",153,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"cmp","","",128,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"cmp","","",129,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"cmp","","",130,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"cmp","","",131,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"cmp","","",134,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"cmp","","",135,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"cmp","","",136,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"cmp","","",137,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"cmp","","",138,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"cmp","","",140,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"cmp","","",141,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"cmp","","",142,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"cmp","","",143,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"cmp","","",144,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"cmp","","",145,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"cmp","","",146,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"cmp","","",147,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"cmp","","",148,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"cmp","","",149,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"ordering"}}],[11,"cmp","","",150,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"cmp","","",151,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"cmp","","",152,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"cmp","","",153,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::memory","",56,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"cmp","","",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"ordering"}}],[11,"cmp","gfx","",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::shade","",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",39,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"ordering"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"cmp","","",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"from","gfx","",55,{"inputs":[{"name":"creationerror"}],"output":{"name":"combinederror"}}],[11,"from","","",55,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",55,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[11,"from","gfx::shade","",170,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"from","gfx::texture","",39,{"inputs":[{"name":"u8"}],"output":{"name":"aamode"}}],[11,"from","","",171,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"from","","",45,null],[11,"from","","",50,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[11,"from","gfx::format","",32,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"from","","",33,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"from","","",34,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"from","","",35,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"from","","",36,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"into","gfx::texture","",171,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",45,null],[11,"bitand_assign","gfx::memory","Disables all flags disabled in the set.",168,null],[11,"bitand_assign","gfx","Disables all flags disabled in the set.",169,null],[11,"bitand_assign","gfx::shade","Disables all flags disabled in the set.",170,null],[11,"bitand_assign","gfx::texture","Disables all flags disabled in the set.",172,null],[11,"from_iter","gfx::memory","",168,{"inputs":[{"name":"t"}],"output":{"name":"access"}}],[11,"from_iter","gfx","",169,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"from_iter","gfx::shade","",170,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from_iter","gfx::texture","",172,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitand","gfx","Returns the intersection between the two sets of flags.",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand","gfx::shade","Returns the intersection between the two sets of flags.",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitand","gfx::texture","Returns the intersection between the two sets of flags.",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"clone","gfx::buffer","",21,{"inputs":[{"name":"self"}],"output":{"name":"role"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"clone","gfx","",53,{"inputs":[{"name":"self"}],"output":{"name":"resourceviewerror"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"targetviewerror"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"combinederror"}}],[11,"clone","gfx::format","",24,{"inputs":[{"name":"self"}],"output":{"name":"channeltype"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"int"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"uint"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"inorm"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"unorm"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"srgb"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"surfacetype"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"r5_g6_b5"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"r8"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"r11_g11_b10"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"r16"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"r32"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"b8_g8_r8_a8"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"d16"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"d24"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"d24_s8"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"d32"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"channelsource"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"swizzle"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u8norm"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i8norm"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u16norm"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"i16norm"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"f16"}}],[11,"clone","gfx::handle","",154,{"inputs":[{"name":"self"}],"output":{"name":"rawbuffer"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"shader"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"program"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"rawpipelinestate"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresourceview"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"shaderresourceview"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"rawunorderedaccessview"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"unorderedaccessview"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"rawrendertargetview"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"rawdepthstencilview"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilview"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"fence"}}],[11,"clone","gfx::mapping","",51,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","gfx::memory","",56,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"clone","gfx","",169,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"clone","gfx::pso::buffer","",71,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"clone","gfx::pso","",67,{"inputs":[{"name":"self"}],"output":{"name":"descriptor"}}],[11,"clone","gfx::shade::core","",97,{"inputs":[{"name":"self"}],"output":{"name":"isarray"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"iscomparison"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"ismultisample"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"isrect"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"matrixformat"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"texturetype"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"samplertype"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"basetype"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"containertype"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"stage"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","gfx::shade","",170,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"clone","gfx::shade::core","",109,{"inputs":[{"name":"self"}],"output":{"name":"attributevar"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"constvar"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"constantbuffervar"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"texturevar"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"unorderedvar"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"samplervar"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"outputvar"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"compatibilityerror"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"createshadererror"}}],[11,"clone","gfx::texture","",37,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"layererror"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"aamode"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"filtermethod"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"cubeface"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"imageinfocommon"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"lod"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"packedcolor"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"resourcedesc"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"renderdesc"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"depthstencildesc"}}],[11,"clone","gfx","",173,{"inputs":[{"name":"self"}],"output":{"name":"vertexshader"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"hullshader"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"domainshader"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"geometryshader"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"pixelshader"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"primitive"}}],[11,"deref_mut","gfx::mapping","",179,null],[11,"new_fill","gfx::state","Create a new filling rasterizer.",4,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"empty","","Returns an empty set of flags.",122,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",122,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",122,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",122,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",122,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",122,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",122,null],[11,"remove","","Removes the specified flags in-place.",122,null],[11,"toggle","","Toggles the specified flags in-place.",122,null],[11,"get_usage","gfx","Return the aggregated stage usage for the set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"reference","","",173,null],[11,"reference","","",174,null],[11,"reference","","",175,null],[11,"reference","","",176,null],[11,"reference","","",177,null],[11,"get_total_bits","gfx::format","Return the total number of bits for this format.",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",27,{"inputs":[],"output":{"name":"swizzle"}}],[11,"cast2","","Convert a 2-element slice.",32,null],[11,"cast3","","Convert a 3-element slice.",32,null],[11,"cast4","","Convert a 4-element slice.",32,null],[11,"cast_slice","","Convert a generic slice by transmutation.",32,null],[11,"cast2","","Convert a 2-element slice.",33,null],[11,"cast3","","Convert a 3-element slice.",33,null],[11,"cast4","","Convert a 4-element slice.",33,null],[11,"cast_slice","","Convert a generic slice by transmutation.",33,null],[11,"cast2","","Convert a 2-element slice.",34,null],[11,"cast3","","Convert a 3-element slice.",34,null],[11,"cast4","","Convert a 4-element slice.",34,null],[11,"cast_slice","","Convert a generic slice by transmutation.",34,null],[11,"cast2","","Convert a 2-element slice.",35,null],[11,"cast3","","Convert a 3-element slice.",35,null],[11,"cast4","","Convert a 4-element slice.",35,null],[11,"cast_slice","","Convert a generic slice by transmutation.",35,null],[11,"cast2","","Convert a 2-element slice.",36,null],[11,"cast3","","Convert a 3-element slice.",36,null],[11,"cast4","","Convert a 4-element slice.",36,null],[11,"cast_slice","","Convert a generic slice by transmutation.",36,null],[11,"get_info","gfx::handle","Get the associated information about the buffer",66,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"len","","Get the number of elements in the buffer.",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_info","","Get texture descriptor",158,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"get_dimensions","","Get target dimensions",163,null],[11,"get_dimensions","","Get target dimensions",164,null],[11,"get_dimensions","","Get target dimensions",165,null],[11,"get_dimensions","","Get target dimensions",166,null],[11,"get_info","","Get sampler info",181,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"new","","Create a new handle manager",182,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",182,null],[11,"extend","","Extend with all references of another handle manager",182,null],[11,"count","","Count the total number of referenced resources",182,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",182,null],[11,"ref_shader","","Reference a shader",182,null],[11,"ref_program","","Reference a program",182,null],[11,"ref_pso","","Reference a pipeline state object",182,null],[11,"ref_texture","","Reference a texture",182,null],[11,"ref_srv","","Reference a shader resource view",182,null],[11,"ref_uav","","Reference an unordered access view",182,null],[11,"ref_rtv","","Reference an RTV",182,null],[11,"ref_dsv","","Reference a DSV",182,null],[11,"ref_sampler","","Reference a sampler",182,null],[11,"ref_fence","","Reference a fence",182,null],[11,"get_num_fragments","gfx::texture","Return the number of actual data fragments stored per texel.",39,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",42,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",42,null],[11,"get_num_levels","","Count the number of mipmap levels.",42,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_texel_count","","Get the total number of texels.",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",43,null],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",46,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"to_image_info","","Get image info for a given mip.",47,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"imageinfocommon"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",47,{"inputs":[{"name":"self"},{"name":"channeltype"},{"name":"u8"}],"output":{"name":"imageinfocommon"}}],[11,"empty","","Returns an empty set of flags.",172,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",172,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",172,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",172,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",172,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",172,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",172,null],[11,"remove","","Removes the specified flags in-place.",172,null],[11,"toggle","","Toggles the specified flags in-place.",172,null],[11,"empty","gfx::memory","Returns an empty set of flags.",168,{"inputs":[],"output":{"name":"access"}}],[11,"all","","Returns the set containing all flags.",168,{"inputs":[],"output":{"name":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",168,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",168,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",168,{"inputs":[{"name":"u8"}],"output":{"name":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",168,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",168,null],[11,"remove","","Removes the specified flags in-place.",168,null],[11,"toggle","","Toggles the specified flags in-place.",168,null],[11,"is_mutable","gfx","Is this memory bound to be mutated ?",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",169,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",169,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",169,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",169,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",169,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",169,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",169,null],[11,"remove","","Removes the specified flags in-place.",169,null],[11,"toggle","","Toggles the specified flags in-place.",169,null],[11,"new","gfx::pso","Create a new empty PSO descriptor.",67,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"can_sample","gfx::shade::core","Check if this texture can be used with a sampler.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty","gfx::shade","Returns an empty set of flags.",170,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",170,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",170,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",170,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",170,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",170,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",170,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",170,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",170,null],[11,"remove","","Removes the specified flags in-place.",170,null],[11,"toggle","","Toggles the specified flags in-place.",170,null],[11,"is_compatible","gfx::shade::core","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",110,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"result"}}]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[8,"Device"],[8,"Resources"],[4,"Primitive"],[4,"ShaderSet"],[4,"Role"],[3,"Info"],[4,"CreationError"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[3,"ImageInfoCommon"],[4,"WrapMode"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"Error"],[8,"Factory"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[4,"Usage"],[8,"CommandBuffer"],[3,"ProgramInfo"],[4,"UniformValue"],[3,"Slice"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"IndexBuffer"],[8,"FactoryExt"],[3,"Encoder"],[3,"Buffer"],[3,"Descriptor"],[3,"RawDataSet"],[4,"ElementError"],[4,"InitError"],[3,"Element"],[8,"Structure"],[3,"VertexBufferCommon"],[3,"RawVertexBuffer"],[3,"ConstantBuffer"],[3,"RawConstantBuffer"],[3,"Global"],[3,"ShaderResource"],[3,"RawShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"RawRenderTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[3,"Bundle"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[8,"BaseTyped"],[8,"Formatted"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ProgramError"],[8,"ToUniform"],[8,"IntoIndexBuffer"],[3,"MultiSample"],[3,"ColorMask"],[3,"Raw"],[3,"Program"],[3,"Raw"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"B8_G8_R8_A8"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[3,"RawBuffer"],[3,"Shader"],[3,"Program"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Fence"],[3,"Access"],[3,"Bind"],[3,"Usage"],[3,"Lod"],[3,"DepthStencilFlags"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[3,"Reader"],[3,"Writer"],[3,"RawPipelineState"],[3,"Sampler"],[3,"Manager"]]};
searchIndex["gfx_core"] = {"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types. Designed for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[0,"target","gfx_core","Render target specification.",null,null],[6,"Layer","gfx_core::target","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"w","","",17,null],[12,"h","","",17,null],[6,"ColorValue","","A color with floating-point components.",null,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[3,"VertexShader","gfx_core","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[3,"Capabilities","","Features that the device supports.",null,null],[12,"max_vertex_count","","",18,null],[12,"max_index_count","","",18,null],[12,"max_texture_size","","",18,null],[12,"max_patch_size","","",18,null],[12,"instance_base_supported","","",18,null],[12,"instance_call_supported","","",18,null],[12,"instance_rate_supported","","",18,null],[12,"vertex_base_supported","","",18,null],[12,"srgb_color_supported","","",18,null],[12,"constant_buffer_supported","","",18,null],[12,"unordered_access_view_supported","","",18,null],[12,"separate_blending_slots_supported","","",18,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",19,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",19,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",19,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",20,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",20,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",20,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",20,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",20,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",20,null],[4,"IndexType","","A type of each index value in the slice's index buffer",null,null],[13,"U16","","",21,null],[13,"U32","","",21,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx_core::buffer","Untyped buffer",null,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",22,null],[12,"usage","","Usage hint",22,null],[12,"bind","","Bind flags",22,null],[12,"size","","Size in bytes",22,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",22,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",23,null],[13,"Index","","Index buffer",23,null],[13,"Constant","","Constant buffer",23,null],[13,"Staging","","Staging buffer",23,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",24,null],[13,"Other","","Unknown other error.",24,null],[13,"UnsupportedUsage","","Usage mode is not supported",24,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_info","","Get buffer info",25,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",25,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"role"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"role"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"command","gfx_core","Command Buffer device interface",null,null],[4,"ClearColor","gfx_core::command","A universal clear color supporting integet formats as well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",26,null],[13,"Int","","Integer vector to clear ivec4 targets.",26,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",26,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[8,"Buffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",27,{"inputs":[{"name":"self"}],"output":null}],[10,"bind_pipeline_state","","Bind a pipeline state object",27,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",27,{"inputs":[{"name":"self"},{"name":"vertexbufferset"}],"output":null}],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",27,null],[10,"bind_global_constant","","Bind a global constant",27,{"inputs":[{"name":"self"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[10,"bind_resource_views","","Bind a complete set of shader resource views",27,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",27,null],[10,"bind_samplers","","Bind a complete set of samplers",27,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",27,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":null}],[10,"bind_index","","Bind an index buffer",27,null],[10,"set_scissor","","Set scissor rectangle",27,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",27,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":null}],[10,"copy_buffer","","Copy part of a buffer to another",27,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",27,null],[10,"update_texture","","Update a texture",27,null],[10,"generate_mipmap","","",27,null],[10,"clear_color","","Clear color target",27,null],[10,"clear_depth_stencil","","",27,null],[10,"call_draw","","Draw a primitive",27,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"option"}],"output":null}],[10,"call_draw_indexed","","Draw a primitive with index buffer",27,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"option"}],"output":null}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"clearcolor"}}],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,{"inputs":[{"name":"f32"}],"output":{"name":"clearcolor"}}],[11,"from","","",26,{"inputs":[{"name":"i32"}],"output":{"name":"clearcolor"}}],[11,"from","","",26,{"inputs":[{"name":"u32"}],"output":{"name":"clearcolor"}}],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors outside of the graphics development environment.",null,null],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing gfx-rs apps for compilation.",null,null],[3,"DummyFence","","Dummy fence that does nothing.",null,null],[3,"DummyMapping","","Dummy mapping which will crash on use.",null,null],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",null,null],[4,"DummyResources","","Dummy resources phantom type",null,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"dummyresources"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dummyresources"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"dummyfence"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"dummyfence"}}],[11,"hash","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"dummymapping"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dummymapping"}}],[11,"new","","Create a new dummy device",31,{"inputs":[],"output":{"name":"dummydevice"}}],[11,"reset","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"bind_pipeline_state","","",32,null],[11,"bind_vertex_buffers","","",32,{"inputs":[{"name":"self"},{"name":"vertexbufferset"}],"output":null}],[11,"bind_constant_buffers","","",32,null],[11,"bind_global_constant","","",32,{"inputs":[{"name":"self"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[11,"bind_resource_views","","",32,null],[11,"bind_unordered_views","","",32,null],[11,"bind_samplers","","",32,null],[11,"bind_pixel_targets","","",32,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":null}],[11,"bind_index","","",32,null],[11,"set_scissor","","",32,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[11,"set_ref_values","","",32,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":null}],[11,"copy_buffer","","",32,null],[11,"update_buffer","","",32,null],[11,"update_texture","","",32,null],[11,"generate_mipmap","","",32,null],[11,"clear_color","","",32,null],[11,"clear_depth_stencil","","",32,null],[11,"call_draw","","",32,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"option"}],"output":null}],[11,"call_draw_indexed","","",32,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"option"}],"output":null}],[11,"get_capabilities","","",31,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",31,{"inputs":[{"name":"self"},{"name":"manager"}],"output":null}],[11,"submit","","",31,{"inputs":[{"name":"self"},{"name":"dummycommandbuffer"},{"name":"accessinfo"}],"output":null}],[11,"fenced_submit","","",31,null],[11,"wait_fence","","",31,{"inputs":[{"name":"self"},{"name":"fence"}],"output":null}],[11,"cleanup","","",31,{"inputs":[{"name":"self"}],"output":null}],[0,"factory","gfx_core","Resource factory",null,null],[4,"ResourceViewError","gfx_core::factory","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",33,null],[13,"Channel","","Selected channel type is not supported for this texture.",33,null],[13,"Layer","","Selected layer can not be viewed for this texture.",33,null],[13,"Unsupported","","The backend was refused for some reason.",33,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",34,null],[13,"Level","","Selected mip level doesn't exist.",34,null],[13,"Layer","","Selected array layer doesn't exist.",34,null],[13,"Channel","","Selected channel type is not supported for this texture.",34,null],[13,"Unsupported","","The backend was refused for some reason.",34,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",35,null],[13,"Resource","","Failed to create SRV or UAV.",35,null],[13,"Target","","Failed to create RTV or DSV.",35,null],[8,"Factory","","A `Factory` is responsible for creating and managing resources for the context it was created with. ",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",36,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",36,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"result"}}],[10,"create_buffer_immutable_raw","","",36,null],[11,"create_buffer_immutable","","",36,null],[11,"create_buffer","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"role"},{"name":"usage"},{"name":"bind"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",36,{"inputs":[{"name":"self"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",36,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",36,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",36,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",36,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",36,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",36,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",36,null],[10,"create_sampler","","",36,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",36,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",36,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",36,{"inputs":[{"name":"self"},{"name":"info"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",36,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",36,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",36,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",36,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",36,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",36,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",36,{"inputs":[{"name":"self"},{"name":"kind"},{"name":"level"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",36,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",36,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",36,null],[11,"view_texture_as_unordered_access","","",36,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",36,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"level"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",36,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"level"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",36,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_immutable_u8","","",36,null],[11,"create_texture_immutable","","",36,null],[11,"create_render_target","","",36,{"inputs":[{"name":"self"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",36,{"inputs":[{"name":"self"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",36,{"inputs":[{"name":"self"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"resourceviewerror"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"targetviewerror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"combinederror"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",35,{"inputs":[{"name":"creationerror"}],"output":{"name":"combinederror"}}],[11,"from","","",35,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",35,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[0,"format","gfx_core","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",37,null],[12,"1","","",37,null],[12,"2","","",37,null],[12,"3","","",37,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",38,null],[12,"1","","",38,null],[3,"U8Norm","","",null,null],[12,"0","","",39,null],[3,"I8Norm","","",null,null],[12,"0","","",40,null],[3,"U16Norm","","",null,null],[12,"0","","",41,null],[3,"I16Norm","","",null,null],[12,"0","","",42,null],[3,"F16","","",null,null],[12,"0","","",43,null],[4,"ChannelType","","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",44,null],[13,"Uint","","",44,null],[13,"Inorm","","",44,null],[13,"Unorm","","",44,null],[13,"Float","","",44,null],[13,"Srgb","","",44,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",45,null],[13,"R4_G4_B4_A4","","",45,null],[13,"R5_G5_B5_A1","","",45,null],[13,"R5_G6_B5","","",45,null],[13,"R8","","",45,null],[13,"R8_G8","","",45,null],[13,"R8_G8_B8_A8","","",45,null],[13,"R10_G10_B10_A2","","",45,null],[13,"R11_G11_B10","","",45,null],[13,"R16","","",45,null],[13,"R16_G16","","",45,null],[13,"R16_G16_B16","","",45,null],[13,"R16_G16_B16_A16","","",45,null],[13,"R32","","",45,null],[13,"R32_G32","","",45,null],[13,"R32_G32_B32","","",45,null],[13,"R32_G32_B32_A32","","",45,null],[13,"B8_G8_R8_A8","","",45,null],[13,"D16","","",45,null],[13,"D24","","",45,null],[13,"D24_S8","","",45,null],[13,"D32","","",45,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",46,null],[13,"One","","",46,null],[13,"X","","",46,null],[13,"Y","","",46,null],[13,"Z","","",46,null],[13,"W","","",46,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",47,null],[10,"get_surface_type","","Return the run-time value of the type.",47,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",48,null],[10,"get_channel_type","","Return the run-time value of the type.",48,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",49,null],[16,"Channel","","Associated channel type.",49,null],[16,"View","","Shader view type of this format.",49,null],[11,"get_format","","Return the run-time value of the type.",49,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"channeltype"}}],[11,"hash","","",44,null],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"option"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"int"}}],[11,"hash","","",50,null],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"option"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",50,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"uint"}}],[11,"hash","","",51,null],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",51,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"inorm"}}],[11,"hash","","",52,null],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"option"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",52,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unorm"}}],[11,"hash","","",53,null],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"option"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",53,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"hash","","",54,null],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"option"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",54,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"srgb"}}],[11,"hash","","",55,null],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"option"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",55,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"surfacetype"}}],[11,"hash","","",45,null],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"option"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"get_total_bits","","Return the total number of bits for this format.",45,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",45,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4"}}],[11,"hash","","",56,null],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",56,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"hash","","",57,null],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",57,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"hash","","",58,null],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"option"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",58,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"r5_g6_b5"}}],[11,"hash","","",59,null],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"option"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",59,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"r8"}}],[11,"hash","","",60,null],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"option"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",60,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8"}}],[11,"hash","","",61,null],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"option"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",61,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"hash","","",62,null],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"option"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",62,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"hash","","",63,null],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"option"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",63,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"r11_g11_b10"}}],[11,"hash","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"option"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"cmp","","",64,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",64,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"r16"}}],[11,"hash","","",65,null],[11,"partial_cmp","","",65,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"option"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"cmp","","",65,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",65,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16"}}],[11,"hash","","",66,null],[11,"partial_cmp","","",66,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"option"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"cmp","","",66,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",66,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16"}}],[11,"hash","","",67,null],[11,"partial_cmp","","",67,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"option"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"cmp","","",67,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",67,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"hash","","",68,null],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"option"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",68,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"r32"}}],[11,"hash","","",69,null],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"option"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",69,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32"}}],[11,"hash","","",70,null],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"option"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",70,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32"}}],[11,"hash","","",71,null],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"option"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",71,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"hash","","",72,null],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"cmp","","",72,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",72,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"b8_g8_r8_a8"}}],[11,"hash","","",73,null],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"option"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",73,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"d16"}}],[11,"hash","","",74,null],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"cmp","","",74,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",74,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"d24"}}],[11,"hash","","",75,null],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"option"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",75,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"d24_s8"}}],[11,"hash","","",76,null],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"option"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",76,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"d32"}}],[11,"hash","","",77,null],[11,"partial_cmp","","",77,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"option"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"cmp","","",77,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",77,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"channelsource"}}],[11,"hash","","",46,null],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"option"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"swizzle"}}],[11,"hash","","",37,null],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",37,{"inputs":[],"output":{"name":"swizzle"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"hash","","",38,null],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u8norm"}}],[11,"hash","","",39,null],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",39,null],[11,"cast3","","Convert a 3-element slice.",39,null],[11,"cast4","","Convert a 4-element slice.",39,null],[11,"cast_slice","","Convert a generic slice by transmutation.",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"i8norm"}}],[11,"hash","","",40,null],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"from","","",40,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",40,null],[11,"cast3","","Convert a 3-element slice.",40,null],[11,"cast4","","Convert a 4-element slice.",40,null],[11,"cast_slice","","Convert a generic slice by transmutation.",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u16norm"}}],[11,"hash","","",41,null],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[11,"from","","",41,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",41,null],[11,"cast3","","Convert a 3-element slice.",41,null],[11,"cast4","","Convert a 4-element slice.",41,null],[11,"cast_slice","","Convert a generic slice by transmutation.",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"i16norm"}}],[11,"hash","","",42,null],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"from","","",42,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",42,null],[11,"cast3","","Convert a 3-element slice.",42,null],[11,"cast4","","Convert a 4-element slice.",42,null],[11,"cast_slice","","Convert a generic slice by transmutation.",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"f16"}}],[11,"hash","","",43,null],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"from","","",43,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"cast2","","Convert a 2-element slice.",43,null],[11,"cast3","","Convert a 3-element slice.",43,null],[11,"cast4","","Convert a 4-element slice.",43,null],[11,"cast_slice","","Convert a generic slice by transmutation.",43,null],[0,"handle","gfx_core","Resource handles",null,null],[3,"RawBuffer","gfx_core::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[11,"hash","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"rawbuffer"}}],[11,"deref","","",78,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",79,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get_info","","Get the associated information about the buffer",79,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"len","","Get the number of elements in the buffer.",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"shader"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"program"}}],[11,"deref","","",81,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"rawpipelinestate"}}],[11,"hash","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"deref","","",83,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"get_info","","Get texture descriptor",84,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresourceview"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"shaderresourceview"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"rawunorderedaccessview"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unorderedaccessview"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"rawrendertargetview"}}],[11,"get_dimensions","","Get target dimensions",89,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"rawdepthstencilview"}}],[11,"get_dimensions","","Get target dimensions",90,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"get_dimensions","","Get target dimensions",91,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilview"}}],[11,"get_dimensions","","Get target dimensions",92,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_info","","Get sampler info",93,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"fence"}}],[11,"new","","Create a new handle manager",95,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",95,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","Extend with all references of another handle manager",95,{"inputs":[{"name":"self"},{"name":"manager"}],"output":null}],[11,"count","","Count the total number of referenced resources",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",95,null],[11,"ref_shader","","Reference a shader",95,null],[11,"ref_program","","Reference a program",95,null],[11,"ref_pso","","Reference a pipeline state object",95,null],[11,"ref_texture","","Reference a texture",95,null],[11,"ref_srv","","Reference a shader resource view",95,null],[11,"ref_uav","","Reference an unordered access view",95,null],[11,"ref_rtv","","Reference an RTV",95,null],[11,"ref_dsv","","Reference a DSV",95,null],[11,"ref_sampler","","Reference a sampler",95,null],[11,"ref_fence","","Reference a fence",95,null],[0,"mapping","gfx_core","Memory mapping",null,null],[3,"Reader","gfx_core::mapping","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[4,"Error","","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",96,null],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",97,null],[11,"deref","","",98,null],[11,"deref_mut","","",98,null],[0,"memory","gfx_core","Memory stuff",null,null],[3,"Access","gfx_core::memory","Memory access",null,null],[3,"Bind","","Bind flags",null,null],[4,"Usage","","How this memory will be used.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",99,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",99,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",99,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",99,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[17,"READ","","Read access",null,null],[17,"WRITE","","Write access",null,null],[17,"RW","","Full access",null,null],[17,"RENDER_TARGET","","Can be rendered into.",null,null],[17,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","Can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",null,null],[17,"TRANSFER_SRC","","Can be transfered from.",null,null],[17,"TRANSFER_DST","","Can be transfered into.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"hash","","",99,null],[11,"partial_cmp","","",99,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"option"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"cmp","","",99,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"hash","","",100,null],[11,"cmp","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"option"}}],[11,"lt","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"le","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"gt","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ge","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",100,{"inputs":[],"output":{"name":"access"}}],[11,"all","","Returns the set containing all flags.",100,{"inputs":[],"output":{"name":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",100,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",100,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",100,{"inputs":[{"name":"u8"}],"output":{"name":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitor_assign","","Adds the set of flags.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitxor_assign","","Toggles the set of flags.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"sub_assign","","Disables all flags enabled in the set.",100,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",100,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"extend","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",100,{"inputs":[{"name":"t"}],"output":{"name":"access"}}],[11,"hash","","",101,null],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",101,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",101,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",101,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",101,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitor_assign","","Adds the set of flags.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor_assign","","Toggles the set of flags.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub_assign","","Disables all flags enabled in the set.",101,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",101,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"extend","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",101,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"is_mutable","","Is this memory bound to be mutated ?",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"pso","gfx_core","Raw Pipeline State Objects",null,null],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",null,null],[3,"ColorInfo","","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",102,null],[12,"color","","Optional color blending",102,null],[12,"alpha","","Optional alpha blending",102,null],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",103,null],[12,"front","","Optional stencil test on the front faces",103,null],[12,"back","","Optional stencil test on the back faces",103,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",104,null],[12,"offset","","Offset from the beginning of the container, in bytes",104,null],[3,"VertexBufferDesc","","Vertex buffer descriptor",null,null],[12,"stride","","Total container size, in bytes",105,null],[12,"rate","","Rate of the input for the given buffer",105,null],[3,"Descriptor","","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",106,null],[12,"rasterizer","","Rasterizer setup",106,null],[12,"scissor","","Enable scissor test",106,null],[12,"vertex_buffers","","Vertex buffers",106,null],[12,"attributes","","Vertex attributes",106,null],[12,"constant_buffers","","Constant buffers",106,null],[12,"resource_views","","Shader resource views",106,null],[12,"unordered_views","","Unordered access views",106,null],[12,"samplers","","Samplers",106,null],[12,"color_targets","","Render target views (RTV)",106,null],[12,"depth_stencil","","Depth stencil view (DSV)",106,null],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",107,null],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",108,null],[12,"1","","",108,null],[12,"2","","",108,null],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",109,null],[12,"1","","",109,null],[12,"2","","",109,null],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",110,null],[12,"1","","",110,null],[12,"2","","",110,null],[3,"SamplerParam","","A sampler run-time parameter for PSO.",null,null],[12,"0","","",111,null],[12,"1","","",111,null],[12,"2","","",111,null],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",112,null],[12,"depth","","Depth target view",112,null],[12,"stencil","","Stencil target view",112,null],[12,"dimensions","","Rendering dimensions",112,null],[3,"AccessInfo","","Informations about what is accessed by the pipeline",null,null],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",null,null],[6,"BufferIndex","","Index of a vertex buffer.",null,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[6,"AttributeDesc","","PSO vertex attribute descriptor",null,null],[6,"ConstantBufferDesc","","PSO constant buffer descriptor",null,null],[6,"ResourceViewDesc","","PSO shader resource view descriptor",null,null],[6,"UnorderedViewDesc","","PSO unordered access view descriptor",null,null],[6,"SamplerDesc","","PSO sampler descriptor",null,null],[6,"ColorTargetDesc","","PSO color target descriptor",null,null],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",null,null],[17,"MAX_VERTEX_BUFFERS","","Maximum number of vertex buffers used in a PSO definition.",null,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"colorinfo"}}],[11,"from","","",102,{"inputs":[{"name":"colormask"}],"output":{"name":"colorinfo"}}],[11,"from","","",102,{"inputs":[{"name":"blend"}],"output":{"name":"colorinfo"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",103,{"inputs":[{"name":"depth"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",103,{"inputs":[{"name":"stencil"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",103,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"vertexbufferdesc"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"vertexbufferdesc"}],"output":{"name":"bool"}}],[11,"hash","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"vertexbufferdesc"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"descriptor"}}],[11,"new","","Create a new empty PSO descriptor.",106,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"vertexbufferset"}}],[11,"new","","Create an empty set",107,{"inputs":[],"output":{"name":"vertexbufferset"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"constantbufferparam"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"resourceviewparam"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"unorderedviewparam"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"samplerparam"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":{"name":"bool"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"pixeltargetset"}}],[11,"new","","Create an empty set",112,{"inputs":[],"output":{"name":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",112,null],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",112,null],[11,"get_view","","Get the rendering view (returns values > 0)",112,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates empty access informations",114,{"inputs":[],"output":{"name":"self"}}],[11,"clear","","Clear access informations",114,{"inputs":[{"name":"self"}],"output":null}],[11,"buffer_read","","Register a buffer read access",114,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":null}],[11,"buffer_write","","Register a buffer write access",114,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":null}],[11,"mapped_reads","","Returns a slice of mappings associated to buffers that The GPU will read from",114,null],[11,"mapped_writes","","Returns a slice of mappings associated to buffers that The GPU will write to",114,null],[0,"shade","gfx_core","Shader handling.",null,null],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",null,null],[12,"0","","",115,null],[12,"1","","",115,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",116,null],[12,"slot","","Slot of the vertex attribute.",116,null],[12,"base_type","","Type that this attribute is composed of.",116,null],[12,"container","","\"Scalarness\" of this attribute.",116,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",117,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",117,null],[12,"count","","Number of elements this constant represents.",117,null],[12,"base_type","","Type that this constant is composed of",117,null],[12,"container","","\"Scalarness\" of this constant.",117,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",118,null],[12,"slot","","Slot of the constant buffer.",118,null],[12,"size","","Size (in bytes) of this buffer's data.",118,null],[12,"usage","","What program stage this buffer is used in.",118,null],[12,"elements","","List of individual elements in this buffer.",118,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",119,null],[12,"slot","","Slot of this texture variable.",119,null],[12,"base_type","","Base type for the texture.",119,null],[12,"ty","","Type of this texture.",119,null],[12,"usage","","What program stage this texture is used in.",119,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",120,null],[12,"slot","","Slot of this unordered variable.",120,null],[12,"usage","","What program stage this UAV is used in.",120,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",121,null],[12,"slot","","Slot of this sampler variable.",121,null],[12,"ty","","Type of this sampler.",121,null],[12,"usage","","What program stage this texture is used in.",121,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",122,null],[12,"slot","","Output color target index.",122,null],[12,"base_type","","Type of the output component.",122,null],[12,"container","","\"Scalarness\" of this output.",122,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",123,null],[12,"globals","","Global constants in the program",123,null],[12,"constant_buffers","","Constant buffers in the program",123,null],[12,"textures","","Textures in the program",123,null],[12,"unordereds","","Unordered access resources in the program",123,null],[12,"samplers","","Samplers in the program",123,null],[12,"outputs","","Output targets in the program",123,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",123,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",123,null],[3,"Program","","A program",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",124,null],[13,"NoArray","","",124,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",125,null],[13,"NoCompare","","",125,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",126,null],[13,"NoMultiSample","","",126,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",127,null],[13,"NoRect","","",127,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",128,null],[13,"RowMajor","","",128,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",129,null],[13,"D1","","Sample from a 1D texture",129,null],[13,"D2","","Sample from a 2D texture",129,null],[13,"D3","","Sample from a 3D texture",129,null],[13,"Cube","","Sample from a cubemap.",129,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",130,null],[13,"U32","","",130,null],[13,"F32","","",130,null],[13,"F64","","",130,null],[13,"Bool","","",130,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",131,null],[13,"Vector","","A vector with `Dimension` components.",131,null],[13,"Matrix","","A matrix.",131,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",132,null],[13,"Hull","","",132,null],[13,"Domain","","",132,null],[13,"Geometry","","",132,null],[13,"Pixel","","",132,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",133,null],[13,"F32","","",133,null],[13,"I32Vector2","","",133,null],[13,"I32Vector3","","",133,null],[13,"I32Vector4","","",133,null],[13,"F32Vector2","","",133,null],[13,"F32Vector3","","",133,null],[13,"F32Vector4","","",133,null],[13,"F32Matrix2","","",133,null],[13,"F32Matrix3","","",133,null],[13,"F32Matrix4","","",133,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",134,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",134,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",134,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",135,null],[13,"StageNotSupported","","The device does not support the shader stage.",135,null],[13,"CompilationFailed","","The shader failed to compile.",135,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[6,"CreateProgramError","","An error type for creating programs.",null,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[17,"HULL","","Used by the hull shader",null,null],[17,"DOMAIN","","Used by the pixel shader",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",136,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",137,{"inputs":[],"output":{"name":"constformat"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"isarray"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,null],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"iscomparison"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"ismultisample"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"isrect"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"matrixformat"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"texturetype"}}],[11,"can_sample","","Check if this texture can be used with a sampler.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"samplertype"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"basetype"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"containertype"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"stage"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"cmp","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",138,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",138,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",138,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",138,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",138,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",138,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",138,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitor_assign","","Adds the set of flags.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitxor_assign","","Toggles the set of flags.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"sub_assign","","Disables all flags enabled in the set.",138,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",138,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"extend","","",138,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",138,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from","","",138,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"attributevar"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"constvar"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"constantbuffervar"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"texturevar"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"unorderedvar"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"samplervar"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"outputvar"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_info","","Get program info",139,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"hash","","",139,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"compatibilityerror"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",117,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"createshadererror"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",135,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"texture","gfx_core","Texture creation and modification.",null,null],[6,"Layer","gfx_core::texture","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",140,null],[12,"yoffset","","",140,null],[12,"zoffset","","",140,null],[12,"width","","",140,null],[12,"height","","",140,null],[12,"depth","","",140,null],[12,"format","","Format of each texel.",140,null],[12,"mipmap","","Which mipmap to select.",140,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",141,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",142,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",142,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",142,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",142,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",142,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",142,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",143,null],[12,"levels","","",143,null],[12,"format","","",143,null],[12,"bind","","",143,null],[12,"usage","","",143,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",144,null],[12,"layer","","",144,null],[12,"min","","",144,null],[12,"max","","",144,null],[12,"swizzle","","",144,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",145,null],[12,"level","","",145,null],[12,"layer","","",145,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",146,null],[12,"layer","","",146,null],[12,"flags","","",146,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",147,null],[13,"Kind","","The kind doesn't support a particular operation.",147,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",147,null],[13,"Size","","Unsupported size in one of the dimensions.",147,null],[13,"Data","","The given data has a different size than the target texture slice.",147,null],[13,"Usage","","The mentioned usage mode is not supported",147,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",148,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",148,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",149,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",149,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",149,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",150,null],[13,"Mipmap","","Add simple mipmapping.",150,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",150,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",150,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",150,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",151,null],[13,"NegX","","",151,null],[13,"PosY","","",151,null],[13,"NegY","","",151,null],[13,"PosZ","","",151,null],[13,"NegZ","","",151,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",152,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",152,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",152,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",152,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",152,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",152,null],[13,"CubeArray","","An array of Cube textures.",152,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",153,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",153,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",153,null],[13,"Border","","Use border color.",153,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[17,"MAX_LEVEL","","Maximum accessible mipmap level of a texture.",null,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_info","","Get texture descriptor",154,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",154,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",147,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"hash","","",148,null],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"layererror"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",148,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"aamode"}}],[11,"hash","","",149,null],[11,"partial_cmp","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"cmp","","",149,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"from","","",149,{"inputs":[{"name":"numsamples"}],"output":{"name":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",149,{"inputs":[{"name":"self"}],"output":{"name":"numfragments"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"filtermethod"}}],[11,"hash","","",150,null],[11,"partial_cmp","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"cmp","","",150,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"cubeface"}}],[11,"hash","","",151,null],[11,"partial_cmp","","",151,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"cmp","","",151,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"hash","","",152,null],[11,"partial_cmp","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"cmp","","",152,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",152,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",152,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"dimensions"}}],[11,"get_num_levels","","Count the number of mipmap levels.",152,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"imageinfocommon"}}],[11,"hash","","",140,null],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"cmp","","",140,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"get_texel_count","","Get the total number of texels.",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",140,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",140,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[11,"hash","","",153,null],[11,"partial_cmp","","",153,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"cmp","","",153,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"option"}}],[11,"lt","","",155,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",155,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",155,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",155,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"lod"}}],[11,"from","","",155,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"into","","",155,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"partial_cmp","","",141,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"option"}}],[11,"lt","","",141,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",141,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",141,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",141,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"hash","","",141,null],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"packedcolor"}}],[11,"from","","",141,null],[11,"into","","",141,null],[11,"partial_cmp","","",142,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"hash","","",142,null],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",142,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"hash","","",143,null],[11,"partial_cmp","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"cmp","","",143,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"ordering"}}],[11,"to_image_info","","Get image info for a given mip.",143,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"newimageinfo"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",143,{"inputs":[{"name":"self"},{"name":"channeltype"},{"name":"level"}],"output":{"name":"rawimageinfo"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"resourcedesc"}}],[11,"hash","","",144,null],[11,"partial_cmp","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"cmp","","",144,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"renderdesc"}}],[11,"hash","","",145,null],[11,"partial_cmp","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"option"}}],[11,"lt","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"cmp","","",145,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"hash","","",156,null],[11,"cmp","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"option"}}],[11,"lt","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",156,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",156,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",156,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",156,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",156,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitor_assign","","Adds the set of flags.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",156,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",156,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"extend","","",156,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",156,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"depthstencildesc"}}],[11,"hash","","",146,null],[11,"partial_cmp","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"cmp","","",146,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"from","","",146,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[6,"VertexCount","gfx_core","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"PatchSize","","Number of vertices in a patch",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",null,null],[6,"ResourceViewSlot","","Slot for a shader resource view.",null,null],[6,"UnorderedViewSlot","","Slot for an unordered access object.",null,null],[6,"ColorSlot","","Slot for an active color buffer.",null,null],[6,"SamplerSlot","","Slot for a sampler.",null,null],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",157,null],[16,"Shader","","",157,null],[16,"Program","","",157,null],[16,"PipelineStateObject","","",157,null],[16,"Texture","","",157,null],[16,"ShaderResourceView","","",157,null],[16,"UnorderedAccessView","","",157,null],[16,"RenderTargetView","","",157,null],[16,"DepthStencilView","","",157,null],[16,"Sampler","","",157,null],[16,"Fence","","",157,null],[16,"Mapping","","",157,null],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",158,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",158,null],[10,"get_capabilities","","Returns the capabilities of this `Ðevice`.",158,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",158,{"inputs":[{"name":"self"},{"name":"manager"}],"output":null}],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",158,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",158,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",158,{"inputs":[{"name":"self"},{"name":"fence"}],"output":null}],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",158,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"vertexshader"}}],[11,"reference","","",159,null],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"hullshader"}}],[11,"reference","","",160,null],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"hash","","",161,null],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"domainshader"}}],[11,"reference","","",161,null],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"hash","","",162,null],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"geometryshader"}}],[11,"reference","","",162,null],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"hash","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"pixelshader"}}],[11,"reference","","",163,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"get_usage","","Return the aggregated stage usage for the set.",19,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"primitive"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"hash","","",21,null],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"name":"option"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"name":"ordering"}}],[11,"eq","gfx_core::state","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","gfx_core::target","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"hash","gfx_core::state","",0,null],[11,"hash","","",1,null],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"hash","","",164,null],[11,"hash","","",4,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",8,null],[11,"hash","","",9,null],[11,"hash","","",10,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"hash","","",14,null],[11,"hash","","",165,null],[11,"hash","","",15,null],[11,"hash","gfx_core::target","",17,null],[11,"hash","","",166,null],[11,"default","gfx_core::state","",7,{"inputs":[],"output":{"name":"stencilside"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"stencil"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"depth"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"color"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"refvalues"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","gfx_core::target","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitxor","gfx_core::state","Returns the left flags, but with all the right flags toggled.",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor","gfx_core::target","Returns the left flags, but with all the right flags toggled.",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"cmp","gfx_core::state","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"cmp","","",164,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"cmp","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"cmp","gfx_core::target","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"bitxor_assign","gfx_core::state","Toggles the set of flags.",165,null],[11,"bitxor_assign","gfx_core::target","Toggles the set of flags.",166,null],[11,"bitor","gfx_core::state","Returns the union of the two sets of flags.",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor","gfx_core::target","Returns the union of the two sets of flags.",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand_assign","gfx_core::state","Disables all flags disabled in the set.",165,null],[11,"bitand_assign","gfx_core::target","Disables all flags disabled in the set.",166,null],[11,"from_iter","gfx_core::state","",165,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"from_iter","gfx_core::target","",166,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}],[11,"partial_cmp","gfx_core::state","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",164,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx_core::target","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"sub_assign","gfx_core::state","Disables all flags enabled in the set.",165,null],[11,"sub_assign","gfx_core::target","Disables all flags enabled in the set.",166,null],[11,"sub","gfx_core::state","Returns the set difference of the two sets of flags.",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub","gfx_core::target","Returns the set difference of the two sets of flags.",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand","gfx_core::state","Returns the intersection between the two sets of flags.",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand","gfx_core::target","Returns the intersection between the two sets of flags.",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"clone","gfx_core::state","",0,{"inputs":[{"name":"self"}],"output":{"name":"frontface"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cullface"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rastermethod"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"multisample"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"comparison"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"stencilop"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"stencilside"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"equation"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"blendvalue"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"factor"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"blendchannel"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"refvalues"}}],[11,"clone","gfx_core::target","",17,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"bitor_assign","gfx_core::state","Adds the set of flags.",165,null],[11,"bitor_assign","gfx_core::target","Adds the set of flags.",166,null],[11,"not","gfx_core::state","Returns the complement of this set of flags.",165,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"not","gfx_core::target","Returns the complement of this set of flags.",166,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"new_fill","gfx_core::state","Create a new filling rasterizer.",4,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"empty","","Returns an empty set of flags.",165,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",165,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",165,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",165,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",165,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",165,null],[11,"remove","","Removes the specified flags in-place.",165,null],[11,"toggle","","Toggles the specified flags in-place.",165,null],[11,"empty","gfx_core::target","Returns an empty set of flags.",166,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",166,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",166,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",166,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",166,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",166,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",166,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",166,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",166,null],[11,"remove","","Removes the specified flags in-place.",166,null],[11,"toggle","","Toggles the specified flags in-place.",166,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Capabilities"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[3,"Info"],[4,"Role"],[4,"CreationError"],[3,"Raw"],[4,"ClearColor"],[8,"Buffer"],[4,"DummyResources"],[3,"DummyFence"],[3,"DummyMapping"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Factory"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"B8_G8_R8_A8"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[4,"Error"],[3,"Reader"],[3,"Writer"],[4,"Usage"],[3,"Access"],[3,"Bind"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"VertexBufferDesc"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"AccessInfo"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"Program"],[3,"ImageInfoCommon"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"WrapMode"],[3,"Raw"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[3,"MultiSample"],[3,"ColorMask"],[3,"Mirror"]]};
searchIndex["gfx_device_gl"] = {"doc":"OpenGL implementation of a device, striving to support OpenGL 2.0 with at least VAOs, but using newer extensions when available.","items":[[3,"CommandBuffer","gfx_device_gl","",null,null],[12,"buf","","",0,null],[12,"data","","",0,null],[3,"Factory","","GL resource factory.",null,null],[3,"Info","","OpenGL implementation information",null,null],[12,"platform_name","","The platform identifier",1,null],[12,"version","","The OpenGL API vesion number",1,null],[12,"shading_language","","The GLSL vesion number",1,null],[12,"extensions","","The extensions supported by the implementation",1,null],[3,"PlatformName","","A unique platform identifier that does not change between releases",null,null],[12,"vendor","","The company responsible for the OpenGL implementation",2,null],[12,"renderer","","The name of the renderer",2,null],[3,"Version","","A version number for a specific component of an OpenGL implementation",null,null],[12,"is_embedded","","",3,null],[12,"major","","",3,null],[12,"minor","","",3,null],[12,"revision","","",3,null],[12,"vendor_info","","",3,null],[3,"Fence","","",null,null],[3,"BufferElement","","",null,null],[12,"desc","","",4,null],[12,"elem","","",4,null],[3,"OutputMerger","","",null,null],[12,"draw_mask","","",5,null],[12,"stencil","","",5,null],[12,"depth","","",5,null],[12,"colors","","",5,null],[3,"PipelineState","","",null,null],[3,"ResourceView","","",null,null],[3,"FatSampler","","",null,null],[3,"Device","","An OpenGL device with GLSL shaders.",null,null],[4,"Resources","","",null,null],[4,"NewTexture","","",null,null],[13,"Surface","","",6,null],[13,"Texture","","",6,null],[4,"TargetView","","",null,null],[13,"Surface","","",7,null],[13,"Texture","","",7,null],[13,"TextureLayer","","",7,null],[4,"Error","","",null,null],[13,"NoError","","",8,null],[13,"InvalidEnum","","",8,null],[13,"InvalidValue","","",8,null],[13,"InvalidOperation","","",8,null],[13,"InvalidFramebufferOperation","","",8,null],[13,"OutOfMemory","","",8,null],[13,"UnknownError","","",8,null],[5,"create","","Create a new device with a factory.",null,null],[5,"create_main_targets_raw","","Create the proxy target views (RTV and DSV) for the attachments of the main framebuffer. These have GL names equal to 0. Not supposed to be used by the users directly.",null,null],[11,"new","","",0,{"inputs":[{"name":"framebuffer"}],"output":{"name":"commandbuffer"}}],[11,"reset","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"bind_pipeline_state","","",0,{"inputs":[{"name":"self"},{"name":"pipelinestate"}],"output":null}],[11,"bind_vertex_buffers","","",0,{"inputs":[{"name":"self"},{"name":"vertexbufferset"}],"output":null}],[11,"bind_constant_buffers","","",0,null],[11,"bind_global_constant","","",0,{"inputs":[{"name":"self"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[11,"bind_resource_views","","",0,null],[11,"bind_unordered_views","","",0,null],[11,"bind_samplers","","",0,null],[11,"bind_pixel_targets","","",0,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":null}],[11,"bind_index","","",0,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"indextype"}],"output":null}],[11,"set_scissor","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[11,"set_ref_values","","",0,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":null}],[11,"copy_buffer","","",0,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"buffer"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"update_buffer","","",0,null],[11,"update_texture","","",0,null],[11,"generate_mipmap","","",0,{"inputs":[{"name":"self"},{"name":"resourceview"}],"output":null}],[11,"clear_color","","",0,{"inputs":[{"name":"self"},{"name":"targetview"},{"name":"clearcolor"}],"output":null}],[11,"clear_depth_stencil","","",0,{"inputs":[{"name":"self"},{"name":"targetview"},{"name":"option"},{"name":"option"}],"output":null}],[11,"call_draw","","",0,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"option"}],"output":null}],[11,"call_draw_indexed","","",0,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"option"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"factory"}}],[11,"new","","Create a new `Factory`.",9,{"inputs":[{"name":"rc"}],"output":{"name":"factory"}}],[11,"create_command_buffer","","",9,{"inputs":[{"name":"self"}],"output":{"name":"commandbuffer"}}],[11,"get_capabilities","","",9,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"create_buffer_raw","","",9,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"result"}}],[11,"create_buffer_immutable_raw","","",9,null],[11,"create_shader","","",9,null],[11,"create_program","","",9,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"result"}}],[11,"create_pipeline_state_raw","","",9,{"inputs":[{"name":"self"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[11,"create_texture_raw","","",9,{"inputs":[{"name":"self"},{"name":"info"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource_raw","","",9,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access_raw","","",9,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource_raw","","",9,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[11,"view_texture_as_unordered_access_raw","","",9,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target_raw","","",9,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_raw","","",9,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_sampler","","",9,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[11,"read_mapping","","",9,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"write_mapping","","",9,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"new","","Create a new OpenGL version number",3,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"option"},{"name":"str"}],"output":{"name":"version"}}],[11,"new_embedded","","Create a new OpenGL ES version number",3,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"str"}],"output":{"name":"version"}}],[11,"parse","","According to the OpenGL specification, the version information is expected to follow the following syntax:",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"platformname"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"platformname"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"platformname"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_version_supported","","",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_embedded_version_supported","","",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_extension_supported","","Returns `true` if the implementation supports the extension",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_version_or_extension_supported","","",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"str"}],"output":{"name":"bool"}}],[6,"Buffer","","",null,null],[6,"ArrayBuffer","","",null,null],[6,"Shader","","",null,null],[6,"Program","","",null,null],[6,"FrameBuffer","","",null,null],[6,"Surface","","",null,null],[6,"Texture","","",null,null],[6,"Sampler","","",null,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fence"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"resources"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"resources"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"bufferelement"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"bufferelement"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bufferelement"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outputmerger"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outputmerger"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outputmerger"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"pipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"pipelinestate"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pipelinestate"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"newtexture"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"newtexture"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"newtexture"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"resourceview"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"resourceview"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"resourceview"}}],[11,"new_texture","","",13,{"inputs":[{"name":"texture"},{"name":"kind"}],"output":{"name":"resourceview"}}],[11,"new_buffer","","",13,{"inputs":[{"name":"texture"}],"output":{"name":"resourceview"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fatsampler"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fatsampler"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fatsampler"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"targetview"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"targetview"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"targetview"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from_error_code","","",8,{"inputs":[{"name":"glenum"}],"output":{"name":"error"}}],[11,"with_gl","","Access the OpenGL directly via a closure. OpenGL types and enumerations can be found in the `gl` crate.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"get_info","","Get the OpenGL-specific driver information",15,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"get_capabilities","","",15,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",15,{"inputs":[{"name":"self"},{"name":"manager"}],"output":null}],[11,"submit","","",15,{"inputs":[{"name":"self"},{"name":"commandbuffer"},{"name":"accessinfo"}],"output":null}],[11,"fenced_submit","","",15,{"inputs":[{"name":"self"},{"name":"commandbuffer"},{"name":"accessinfo"},{"name":"option"}],"output":{"name":"fence"}}],[11,"wait_fence","","",15,{"inputs":[{"name":"self"},{"name":"fence"}],"output":null}],[11,"cleanup","","",15,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CommandBuffer"],[3,"Info"],[3,"PlatformName"],[3,"Version"],[3,"BufferElement"],[3,"OutputMerger"],[4,"NewTexture"],[4,"TargetView"],[4,"Error"],[3,"Factory"],[3,"Fence"],[4,"Resources"],[3,"PipelineState"],[3,"ResourceView"],[3,"FatSampler"],[3,"Device"]]};
searchIndex["gfx_gl"] = {"doc":"An OpenGL loader generated by gl-rs.","items":[[3,"FnPtr","gfx_gl","",null,null],[3,"Gl","","",null,null],[12,"IsSampler","","",0,null],[12,"MultiTexCoordP1uiv","","",0,null],[12,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",0,null],[12,"VertexArrayAttribBinding","","",0,null],[12,"Uniform2ui","","Fallbacks: Uniform2uiEXT",0,null],[12,"GetProgramResourceLocation","","",0,null],[12,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT, TexSubImage3DOES",0,null],[12,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT",0,null],[12,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",0,null],[12,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",0,null],[12,"BufferData","","Fallbacks: BufferDataARB",0,null],[12,"ColorP4ui","","",0,null],[12,"TextureStorage2DMultisample","","",0,null],[12,"GetProgramStageiv","","",0,null],[12,"Uniform3dv","","",0,null],[12,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS",0,null],[12,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",0,null],[12,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV",0,null],[12,"ClearTexImage","","",0,null],[12,"CreateQueries","","",0,null],[12,"GetnConvolutionFilter","","",0,null],[12,"CreateRenderbuffers","","",0,null],[12,"GetProgramResourceName","","",0,null],[12,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",0,null],[12,"Uniform4dv","","",0,null],[12,"Uniform4fv","","Fallbacks: Uniform4fvARB",0,null],[12,"UseProgramStages","","",0,null],[12,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT",0,null],[12,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV",0,null],[12,"TransformFeedbackBufferBase","","",0,null],[12,"GetTexImage","","",0,null],[12,"ProgramUniform4uiv","","Fallbacks: ProgramUniform4uivEXT",0,null],[12,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT",0,null],[12,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",0,null],[12,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT",0,null],[12,"Uniform1d","","",0,null],[12,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",0,null],[12,"BlendColor","","Fallbacks: BlendColorEXT",0,null],[12,"NamedFramebufferTextureLayer","","",0,null],[12,"ClearBufferSubData","","",0,null],[12,"BlitNamedFramebuffer","","",0,null],[12,"Uniform2i","","Fallbacks: Uniform2iARB",0,null],[12,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",0,null],[12,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB",0,null],[12,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",0,null],[12,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",0,null],[12,"GetCompressedTextureImage","","",0,null],[12,"ProgramUniform2ui","","Fallbacks: ProgramUniform2uiEXT",0,null],[12,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",0,null],[12,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV",0,null],[12,"GetNamedRenderbufferParameteriv","","",0,null],[12,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",0,null],[12,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX",0,null],[12,"DrawArrays","","Fallbacks: DrawArraysEXT",0,null],[12,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",0,null],[12,"Viewport","","",0,null],[12,"GetFramebufferParameteriv","","",0,null],[12,"ProgramUniform1i","","Fallbacks: ProgramUniform1iEXT",0,null],[12,"ProgramUniformMatrix3fv","","Fallbacks: ProgramUniformMatrix3fvEXT",0,null],[12,"ScissorArrayv","","Fallbacks: ScissorArrayvNV",0,null],[12,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",0,null],[12,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB",0,null],[12,"CopyTextureSubImage3D","","",0,null],[12,"ProgramUniform1ui","","Fallbacks: ProgramUniform1uiEXT",0,null],[12,"SamplerParameteriv","","",0,null],[12,"SamplerParameteri","","",0,null],[12,"CompileShader","","Fallbacks: CompileShaderARB",0,null],[12,"GetUniformiv","","Fallbacks: GetUniformivARB",0,null],[12,"TexParameterf","","",0,null],[12,"CompressedTextureSubImage1D","","",0,null],[12,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",0,null],[12,"CreateShaderProgramv","","",0,null],[12,"BlendFunciARB","","",0,null],[12,"Uniform4i","","Fallbacks: Uniform4iARB",0,null],[12,"GetTextureImage","","",0,null],[12,"CompressedTextureSubImage3D","","",0,null],[12,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT",0,null],[12,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT",0,null],[12,"ActiveShaderProgram","","",0,null],[12,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",0,null],[12,"Uniform4d","","",0,null],[12,"BindBuffersRange","","",0,null],[12,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB",0,null],[12,"VertexP3ui","","",0,null],[12,"GetActiveUniformName","","",0,null],[12,"Finish","","",0,null],[12,"GetQueryIndexediv","","",0,null],[12,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",0,null],[12,"LinkProgram","","Fallbacks: LinkProgramARB",0,null],[12,"GetnPixelMapusv","","",0,null],[12,"FramebufferParameteri","","",0,null],[12,"VertexP2ui","","",0,null],[12,"GetnPixelMapuiv","","",0,null],[12,"GetProgramResourceIndex","","",0,null],[12,"ProgramUniform2fv","","Fallbacks: ProgramUniform2fvEXT",0,null],[12,"ProgramUniform2uiv","","Fallbacks: ProgramUniform2uivEXT",0,null],[12,"VertexP3uiv","","",0,null],[12,"GetnHistogram","","",0,null],[12,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",0,null],[12,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",0,null],[12,"UnmapNamedBuffer","","",0,null],[12,"GenerateTextureMipmap","","",0,null],[12,"VertexAttribP3ui","","",0,null],[12,"GenProgramPipelines","","",0,null],[12,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",0,null],[12,"EndQueryIndexed","","",0,null],[12,"NormalP3ui","","",0,null],[12,"NamedFramebufferDrawBuffers","","",0,null],[12,"TextureStorage1D","","",0,null],[12,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT",0,null],[12,"GetError","","",0,null],[12,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",0,null],[12,"ClearNamedFramebufferiv","","",0,null],[12,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",0,null],[12,"InvalidateNamedFramebufferSubData","","",0,null],[12,"ReleaseShaderCompiler","","",0,null],[12,"ClearDepthf","","Fallbacks: ClearDepthfOES",0,null],[12,"DrawElementsIndirect","","",0,null],[12,"DrawTransformFeedbackStreamInstanced","","",0,null],[12,"BeginQueryIndexed","","",0,null],[12,"SecondaryColorP3uiv","","",0,null],[12,"GetQueryBufferObjecti64v","","",0,null],[12,"DrawElementsInstancedBaseVertexBaseInstance","","Fallbacks: DrawElementsInstancedBaseVertexBaseInstanceEXT",0,null],[12,"ClearNamedFramebufferfv","","",0,null],[12,"BindTransformFeedback","","",0,null],[12,"LogicOp","","",0,null],[12,"TexImage3D","","Fallbacks: TexImage3DEXT, TexImage3DOES",0,null],[12,"GetnColorTable","","",0,null],[12,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",0,null],[12,"StencilMask","","",0,null],[12,"VertexAttribL1dv","","Fallbacks: VertexAttribL1dvEXT",0,null],[12,"GetVertexAttribLdv","","Fallbacks: GetVertexAttribLdvEXT",0,null],[12,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, ColorMaskiOES",0,null],[12,"GetVertexArrayIndexediv","","",0,null],[12,"GetNamedFramebufferParameteriv","","",0,null],[12,"Uniform1dv","","",0,null],[12,"TexBufferRange","","Fallbacks: TexBufferRangeEXT, TexBufferRangeOES",0,null],[12,"GetnMapiv","","",0,null],[12,"NamedFramebufferRenderbuffer","","",0,null],[12,"DispatchCompute","","",0,null],[12,"GetInteger64i_v","","",0,null],[12,"UniformMatrix4x2dv","","",0,null],[12,"VertexP4uiv","","",0,null],[12,"ProgramUniform2i","","Fallbacks: ProgramUniform2iEXT",0,null],[12,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT",0,null],[12,"EndQuery","","Fallbacks: EndQueryARB",0,null],[12,"GetDoublei_v","","Fallbacks: GetDoubleIndexedvEXT, GetDoublei_vEXT",0,null],[12,"InvalidateFramebuffer","","",0,null],[12,"ClearBufferfv","","",0,null],[12,"GetnMapdv","","",0,null],[12,"BlendEquationiARB","","",0,null],[12,"ProgramUniformMatrix4x2fv","","Fallbacks: ProgramUniformMatrix4x2fvEXT",0,null],[12,"StencilMaskSeparate","","",0,null],[12,"GetProgramResourceiv","","",0,null],[12,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",0,null],[12,"GetTextureLevelParameterfv","","",0,null],[12,"GetnPixelMapfv","","",0,null],[12,"IsTransformFeedback","","Fallbacks: IsTransformFeedbackNV",0,null],[12,"FrontFace","","",0,null],[12,"GetActiveSubroutineName","","",0,null],[12,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",0,null],[12,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",0,null],[12,"ClearDepth","","",0,null],[12,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV",0,null],[12,"WaitSync","","Fallbacks: WaitSyncAPPLE",0,null],[12,"VertexArrayBindingDivisor","","",0,null],[12,"ClearNamedFramebufferfi","","",0,null],[12,"ClipControl","","",0,null],[12,"DepthRangeIndexed","","",0,null],[12,"InvalidateTexImage","","",0,null],[12,"VertexArrayAttribIFormat","","",0,null],[12,"TexImage2D","","",0,null],[12,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV",0,null],[12,"GetTextureParameterIuiv","","",0,null],[12,"UniformMatrix2x3dv","","",0,null],[12,"ProgramUniformMatrix2dv","","",0,null],[12,"VertexAttribL3d","","Fallbacks: VertexAttribL3dEXT",0,null],[12,"ProgramUniformMatrix4fv","","Fallbacks: ProgramUniformMatrix4fvEXT",0,null],[12,"GetBufferParameteri64v","","",0,null],[12,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV",0,null],[12,"TextureParameterfv","","",0,null],[12,"VertexAttribL4dv","","Fallbacks: VertexAttribL4dvEXT",0,null],[12,"GetQueryBufferObjectuiv","","",0,null],[12,"InvalidateBufferData","","",0,null],[12,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES",0,null],[12,"SamplerParameterIiv","","Fallbacks: SamplerParameterIivEXT, SamplerParameterIivOES",0,null],[12,"ClearBufferuiv","","",0,null],[12,"DispatchComputeIndirect","","",0,null],[12,"VertexAttribBinding","","",0,null],[12,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",0,null],[12,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB",0,null],[12,"TextureView","","Fallbacks: TextureViewEXT, TextureViewOES",0,null],[12,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",0,null],[12,"MultiDrawElementsBaseVertex","","Fallbacks: MultiDrawElementsBaseVertexEXT, MultiDrawElementsBaseVertexOES",0,null],[12,"ProgramUniform2dv","","",0,null],[12,"TextureParameteri","","",0,null],[12,"Uniform3f","","Fallbacks: Uniform3fARB",0,null],[12,"ProgramUniformMatrix4x3fv","","Fallbacks: ProgramUniformMatrix4x3fvEXT",0,null],[12,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",0,null],[12,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",0,null],[12,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",0,null],[12,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",0,null],[12,"DeleteProgramPipelines","","",0,null],[12,"BindTextureUnit","","",0,null],[12,"SamplerParameterIuiv","","Fallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES",0,null],[12,"DeleteShader","","",0,null],[12,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV",0,null],[12,"ProgramUniformMatrix3x2dv","","",0,null],[12,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT, TexParameterIuivOES",0,null],[12,"ClearTexSubImage","","",0,null],[12,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",0,null],[12,"ProgramUniform1f","","Fallbacks: ProgramUniform1fEXT",0,null],[12,"FenceSync","","Fallbacks: FenceSyncAPPLE",0,null],[12,"DisableVertexArrayAttrib","","",0,null],[12,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV",0,null],[12,"VertexAttribL3dv","","Fallbacks: VertexAttribL3dvEXT",0,null],[12,"GetActiveSubroutineUniformiv","","",0,null],[12,"TexImage2DMultisample","","",0,null],[12,"TexStorage1D","","Fallbacks: TexStorage1DEXT",0,null],[12,"ProgramUniform4fv","","Fallbacks: ProgramUniform4fvEXT",0,null],[12,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, DisableiOES",0,null],[12,"TextureBufferRange","","",0,null],[12,"SamplerParameterfv","","",0,null],[12,"ProgramUniformMatrix3x4fv","","Fallbacks: ProgramUniformMatrix3x4fvEXT",0,null],[12,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",0,null],[12,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR",0,null],[12,"SampleCoverage","","Fallbacks: SampleCoverageARB",0,null],[12,"ProgramUniform1uiv","","Fallbacks: ProgramUniform1uivEXT",0,null],[12,"DepthRange","","",0,null],[12,"CreateBuffers","","",0,null],[12,"VertexAttribP2uiv","","",0,null],[12,"IsQuery","","Fallbacks: IsQueryARB",0,null],[12,"ActiveTexture","","Fallbacks: ActiveTextureARB",0,null],[12,"GetTextureLevelParameteriv","","",0,null],[12,"NamedFramebufferReadBuffer","","",0,null],[12,"TexBuffer","","Fallbacks: TexBufferARB, TexBufferEXT, TexBufferOES",0,null],[12,"CullFace","","",0,null],[12,"VertexP4ui","","",0,null],[12,"TexStorage3D","","Fallbacks: TexStorage3DEXT",0,null],[12,"GetProgramiv","","",0,null],[12,"Clear","","",0,null],[12,"DrawElementsInstancedBaseVertex","","Fallbacks: DrawElementsInstancedBaseVertexEXT, DrawElementsInstancedBaseVertexOES",0,null],[12,"TextureParameterIiv","","",0,null],[12,"ViewportArrayv","","Fallbacks: ViewportArrayvNV",0,null],[12,"ProgramUniformMatrix4x3dv","","",0,null],[12,"UniformSubroutinesuiv","","",0,null],[12,"GetActiveUniformBlockName","","",0,null],[12,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, EnableiOES",0,null],[12,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",0,null],[12,"ProgramUniform4d","","",0,null],[12,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB",0,null],[12,"StencilFuncSeparate","","",0,null],[12,"ColorP3uiv","","",0,null],[12,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",0,null],[12,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",0,null],[12,"DrawRangeElementsBaseVertex","","Fallbacks: DrawRangeElementsBaseVertexEXT, DrawRangeElementsBaseVertexOES",0,null],[12,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT",0,null],[12,"CreateShader","","Fallbacks: CreateShaderObjectARB",0,null],[12,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",0,null],[12,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV",0,null],[12,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",0,null],[12,"IsEnabled","","",0,null],[12,"ProgramUniformMatrix2x3fv","","Fallbacks: ProgramUniformMatrix2x3fvEXT",0,null],[12,"BindVertexBuffer","","",0,null],[12,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",0,null],[12,"TexCoordP4ui","","",0,null],[12,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",0,null],[12,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV",0,null],[12,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT",0,null],[12,"PolygonOffset","","",0,null],[12,"BindFragDataLocationIndexed","","",0,null],[12,"ValidateProgram","","Fallbacks: ValidateProgramARB",0,null],[12,"PolygonMode","","Fallbacks: PolygonModeNV",0,null],[12,"ProgramUniformMatrix4dv","","",0,null],[12,"GetInternalformativ","","",0,null],[12,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES",0,null],[12,"ClearNamedBufferSubData","","",0,null],[12,"ClearNamedFramebufferuiv","","",0,null],[12,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",0,null],[12,"GetSamplerParameterIiv","","Fallbacks: GetSamplerParameterIivEXT, GetSamplerParameterIivOES",0,null],[12,"InvalidateTexSubImage","","",0,null],[12,"Uniform3fv","","Fallbacks: Uniform3fvARB",0,null],[12,"MinSampleShading","","Fallbacks: MinSampleShadingARB, MinSampleShadingOES",0,null],[12,"VertexArrayAttribFormat","","",0,null],[12,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",0,null],[12,"GetActiveUniformBlockiv","","",0,null],[12,"DeleteQueries","","Fallbacks: DeleteQueriesARB",0,null],[12,"VertexP2uiv","","",0,null],[12,"MultiTexCoordP4ui","","",0,null],[12,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",0,null],[12,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",0,null],[12,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",0,null],[12,"VertexAttribP4uiv","","",0,null],[12,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT",0,null],[12,"GetTransformFeedbackiv","","",0,null],[12,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV",0,null],[12,"ProgramUniformMatrix2x4fv","","Fallbacks: ProgramUniformMatrix2x4fvEXT",0,null],[12,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",0,null],[12,"ProgramUniform1d","","",0,null],[12,"DepthFunc","","",0,null],[12,"GetShaderPrecisionFormat","","",0,null],[12,"MultiTexCoordP2uiv","","",0,null],[12,"BeginQuery","","Fallbacks: BeginQueryARB",0,null],[12,"UniformMatrix3dv","","",0,null],[12,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB",0,null],[12,"GetProgramInterfaceiv","","",0,null],[12,"TexParameteri","","",0,null],[12,"ProgramUniform4iv","","Fallbacks: ProgramUniform4ivEXT",0,null],[12,"ProgramUniform3ui","","Fallbacks: ProgramUniform3uiEXT",0,null],[12,"VertexAttribIFormat","","",0,null],[12,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT",0,null],[12,"ProgramUniform4dv","","",0,null],[12,"UniformBlockBinding","","",0,null],[12,"BlendEquationSeparatei","","Fallbacks: BlendEquationSeparateIndexedAMD, BlendEquationSeparateiARB, BlendEquationSeparateiEXT, BlendEquationSeparateiOES",0,null],[12,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",0,null],[12,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",0,null],[12,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB, CompressedTexImage3DOES",0,null],[12,"VertexAttribP2ui","","",0,null],[12,"PauseTransformFeedback","","Fallbacks: PauseTransformFeedbackNV",0,null],[12,"GetDoublev","","",0,null],[12,"VertexAttribL2d","","Fallbacks: VertexAttribL2dEXT",0,null],[12,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV",0,null],[12,"VertexBindingDivisor","","",0,null],[12,"TexCoordP4uiv","","",0,null],[12,"BindBuffer","","Fallbacks: BindBufferARB",0,null],[12,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV",0,null],[12,"ProgramUniform2d","","",0,null],[12,"ProgramUniformMatrix3x4dv","","",0,null],[12,"GetNamedBufferPointerv","","",0,null],[12,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",0,null],[12,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",0,null],[12,"VertexAttribL4d","","Fallbacks: VertexAttribL4dEXT",0,null],[12,"UniformMatrix2dv","","",0,null],[12,"TexCoordP2uiv","","",0,null],[12,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",0,null],[12,"ShaderStorageBlockBinding","","",0,null],[12,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV",0,null],[12,"ProgramUniformMatrix3x2fv","","Fallbacks: ProgramUniformMatrix3x2fvEXT",0,null],[12,"GetSubroutineUniformLocation","","",0,null],[12,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",0,null],[12,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT",0,null],[12,"GetTexParameterfv","","",0,null],[12,"GetTextureParameteriv","","",0,null],[12,"TexParameteriv","","",0,null],[12,"CopyTextureSubImage1D","","",0,null],[12,"BufferSubData","","Fallbacks: BufferSubDataARB",0,null],[12,"TextureSubImage1D","","",0,null],[12,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",0,null],[12,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",0,null],[12,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV",0,null],[12,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT",0,null],[12,"GenBuffers","","Fallbacks: GenBuffersARB",0,null],[12,"GetnUniformiv","","Fallbacks: GetnUniformivKHR",0,null],[12,"TextureParameterIuiv","","",0,null],[12,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",0,null],[12,"VertexArrayAttribLFormat","","",0,null],[12,"VertexAttribLFormat","","",0,null],[12,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB",0,null],[12,"DeleteProgram","","",0,null],[12,"GetTextureSubImage","","",0,null],[12,"GetNamedBufferSubData","","",0,null],[12,"ObjectLabel","","Fallbacks: ObjectLabelKHR",0,null],[12,"Uniform1iv","","Fallbacks: Uniform1ivARB",0,null],[12,"LineWidth","","",0,null],[12,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS",0,null],[12,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",0,null],[12,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",0,null],[12,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB",0,null],[12,"GetnUniformfv","","Fallbacks: GetnUniformfvKHR",0,null],[12,"DepthRangef","","Fallbacks: DepthRangefOES",0,null],[12,"NamedBufferSubData","","Fallbacks: NamedBufferSubDataEXT",0,null],[12,"BindVertexArray","","Fallbacks: BindVertexArrayOES",0,null],[12,"TextureSubImage3D","","",0,null],[12,"Uniform3d","","",0,null],[12,"VertexArrayVertexBuffers","","",0,null],[12,"CreateVertexArrays","","",0,null],[12,"ProgramUniform4i","","Fallbacks: ProgramUniform4iEXT",0,null],[12,"TextureStorage3DMultisample","","",0,null],[12,"GetActiveAtomicCounterBufferiv","","",0,null],[12,"GetUniformBlockIndex","","",0,null],[12,"GetTexLevelParameterfv","","",0,null],[12,"ProgramUniformMatrix4x2dv","","",0,null],[12,"MultiTexCoordP2ui","","",0,null],[12,"GetUniformIndices","","",0,null],[12,"TexParameterfv","","",0,null],[12,"GetActiveUniformsiv","","",0,null],[12,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",0,null],[12,"GetSamplerParameteriv","","",0,null],[12,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT, FramebufferTexture3DOES",0,null],[12,"CopyTextureSubImage2D","","",0,null],[12,"DrawElementsBaseVertex","","Fallbacks: DrawElementsBaseVertexEXT, DrawElementsBaseVertexOES",0,null],[12,"NamedBufferData","","",0,null],[12,"TextureSubImage2D","","",0,null],[12,"DrawBuffer","","",0,null],[12,"ColorMask","","",0,null],[12,"UniformMatrix4dv","","",0,null],[12,"DeleteSamplers","","",0,null],[12,"IsShader","","",0,null],[12,"ProgramUniform3f","","Fallbacks: ProgramUniform3fEXT",0,null],[12,"UseProgram","","Fallbacks: UseProgramObjectARB",0,null],[12,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB",0,null],[12,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT",0,null],[12,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",0,null],[12,"Enable","","",0,null],[12,"TexImage1D","","",0,null],[12,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT",0,null],[12,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB",0,null],[12,"GetSynciv","","Fallbacks: GetSyncivAPPLE",0,null],[12,"BindVertexBuffers","","",0,null],[12,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV",0,null],[12,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB",0,null],[12,"GenSamplers","","",0,null],[12,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",0,null],[12,"ScissorIndexedv","","Fallbacks: ScissorIndexedvNV",0,null],[12,"BindImageTextures","","",0,null],[12,"PatchParameteri","","Fallbacks: PatchParameteriEXT, PatchParameteriOES",0,null],[12,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",0,null],[12,"BindTextures","","",0,null],[12,"TextureParameterf","","",0,null],[12,"BindSamplers","","",0,null],[12,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",0,null],[12,"CreateProgramPipelines","","",0,null],[12,"PointParameteriv","","Fallbacks: PointParameterivNV",0,null],[12,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",0,null],[12,"GenQueries","","Fallbacks: GenQueriesARB",0,null],[12,"QueryCounter","","Fallbacks: QueryCounterEXT",0,null],[12,"TransformFeedbackBufferRange","","",0,null],[12,"AttachShader","","Fallbacks: AttachObjectARB",0,null],[12,"MapNamedBufferRange","","",0,null],[12,"GetSamplerParameterfv","","",0,null],[12,"ViewportIndexedfv","","Fallbacks: ViewportIndexedfvNV",0,null],[12,"ViewportIndexedf","","Fallbacks: ViewportIndexedfNV",0,null],[12,"Flush","","",0,null],[12,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",0,null],[12,"GetQueryObjecti64v","","Fallbacks: GetQueryObjecti64vEXT",0,null],[12,"ProgramUniform1fv","","Fallbacks: ProgramUniform1fvEXT",0,null],[12,"Hint","","",0,null],[12,"Uniform2f","","Fallbacks: Uniform2fARB",0,null],[12,"InvalidateBufferSubData","","",0,null],[12,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",0,null],[12,"ProgramUniformMatrix2x3dv","","",0,null],[12,"Uniform1fv","","Fallbacks: Uniform1fvARB",0,null],[12,"DrawArraysInstancedBaseInstance","","Fallbacks: DrawArraysInstancedBaseInstanceEXT",0,null],[12,"ProgramUniform3d","","",0,null],[12,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV",0,null],[12,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",0,null],[12,"InvalidateSubFramebuffer","","",0,null],[12,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",0,null],[12,"Uniform2d","","",0,null],[12,"VertexAttribP1ui","","",0,null],[12,"TexStorage2D","","Fallbacks: TexStorage2DEXT",0,null],[12,"Uniform1i","","Fallbacks: Uniform1iARB",0,null],[12,"ProgramUniformMatrix3dv","","",0,null],[12,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",0,null],[12,"VertexArrayVertexBuffer","","",0,null],[12,"TextureBarrier","","",0,null],[12,"GetTexLevelParameteriv","","",0,null],[12,"CompressedTextureSubImage2D","","",0,null],[12,"Uniform3ui","","Fallbacks: Uniform3uiEXT",0,null],[12,"VertexAttribP3uiv","","",0,null],[12,"GetBooleanv","","",0,null],[12,"GetVertexArrayiv","","",0,null],[12,"GetNamedBufferParameteriv","","",0,null],[12,"ClearBufferiv","","",0,null],[12,"ReadPixels","","",0,null],[12,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",0,null],[12,"GetQueryObjectui64v","","Fallbacks: GetQueryObjectui64vEXT",0,null],[12,"CreateFramebuffers","","",0,null],[12,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV",0,null],[12,"BlendFunci","","Fallbacks: BlendFuncIndexedAMD, BlendFunciARB, BlendFunciEXT, BlendFunciOES",0,null],[12,"MultiTexCoordP1ui","","",0,null],[12,"GetUniformdv","","",0,null],[12,"NamedRenderbufferStorage","","",0,null],[12,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT",0,null],[12,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT",0,null],[12,"CopyNamedBufferSubData","","",0,null],[12,"TexCoordP1uiv","","",0,null],[12,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",0,null],[12,"VertexAttribP4ui","","",0,null],[12,"DeleteTransformFeedbacks","","Fallbacks: DeleteTransformFeedbacksNV",0,null],[12,"MultiTexCoordP3ui","","",0,null],[12,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",0,null],[12,"BlendEquation","","Fallbacks: BlendEquationEXT",0,null],[12,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",0,null],[12,"BlendFuncSeparatei","","Fallbacks: BlendFuncSeparateIndexedAMD, BlendFuncSeparateiARB, BlendFuncSeparateiEXT, BlendFuncSeparateiOES",0,null],[12,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",0,null],[12,"BindSampler","","",0,null],[12,"VertexAttribP1uiv","","",0,null],[12,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV, IsEnablediOES",0,null],[12,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT",0,null],[12,"GetnUniformdv","","",0,null],[12,"MapNamedBuffer","","",0,null],[12,"GetnCompressedTexImage","","",0,null],[12,"GetSubroutineIndex","","",0,null],[12,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT",0,null],[12,"CreateTextures","","",0,null],[12,"SamplerParameterf","","",0,null],[12,"InvalidateNamedFramebufferData","","",0,null],[12,"ProgramUniform4f","","Fallbacks: ProgramUniform4fEXT",0,null],[12,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",0,null],[12,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",0,null],[12,"ClampColor","","Fallbacks: ClampColorARB",0,null],[12,"ResumeTransformFeedback","","Fallbacks: ResumeTransformFeedbackNV",0,null],[12,"GenTextures","","",0,null],[12,"ColorP4uiv","","",0,null],[12,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB, CompressedTexSubImage3DOES",0,null],[12,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",0,null],[12,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",0,null],[12,"GetQueryBufferObjectui64v","","",0,null],[12,"PointSize","","",0,null],[12,"VertexArrayElementBuffer","","",0,null],[12,"ProgramUniform3iv","","Fallbacks: ProgramUniform3ivEXT",0,null],[12,"UniformMatrix3x4dv","","",0,null],[12,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",0,null],[12,"Disable","","",0,null],[12,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",0,null],[12,"GetShaderInfoLog","","",0,null],[12,"BlendEquationSeparateiARB","","",0,null],[12,"Uniform4f","","Fallbacks: Uniform4fARB",0,null],[12,"VertexAttribLPointer","","Fallbacks: VertexAttribLPointerEXT",0,null],[12,"CreateTransformFeedbacks","","",0,null],[12,"Uniform1f","","Fallbacks: Uniform1fARB",0,null],[12,"Uniform4ui","","Fallbacks: Uniform4uiEXT",0,null],[12,"GetnPolygonStipple","","",0,null],[12,"IsTexture","","",0,null],[12,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",0,null],[12,"DrawArraysIndirect","","",0,null],[12,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT",0,null],[12,"GetShaderiv","","",0,null],[12,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT, CopyTexSubImage3DOES",0,null],[12,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",0,null],[12,"GetProgramPipelineiv","","",0,null],[12,"PointParameteri","","Fallbacks: PointParameteriNV",0,null],[12,"TexCoordP2ui","","",0,null],[12,"GetStringi","","",0,null],[12,"ClearBufferData","","",0,null],[12,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB",0,null],[12,"BindProgramPipeline","","",0,null],[12,"ProgramUniform3fv","","Fallbacks: ProgramUniform3fvEXT",0,null],[12,"CreateProgram","","Fallbacks: CreateProgramObjectARB",0,null],[12,"GetActiveSubroutineUniformName","","",0,null],[12,"GetQueryBufferObjectiv","","",0,null],[12,"IsSync","","Fallbacks: IsSyncAPPLE",0,null],[12,"PixelStoref","","",0,null],[12,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",0,null],[12,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",0,null],[12,"DrawTransformFeedback","","Fallbacks: DrawTransformFeedbackNV",0,null],[12,"GetUniformfv","","Fallbacks: GetUniformfvARB",0,null],[12,"ProgramUniformMatrix2fv","","Fallbacks: ProgramUniformMatrix2fvEXT",0,null],[12,"GetQueryiv","","Fallbacks: GetQueryivARB",0,null],[12,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",0,null],[12,"UniformMatrix3x2dv","","",0,null],[12,"PixelStorei","","",0,null],[12,"ClearColor","","",0,null],[12,"MemoryBarrierByRegion","","",0,null],[12,"Uniform1ui","","Fallbacks: Uniform1uiEXT",0,null],[12,"GetTransformFeedbacki_v","","",0,null],[12,"TexCoordP3uiv","","",0,null],[12,"ClearNamedBufferData","","",0,null],[12,"TexStorage2DMultisample","","",0,null],[12,"GetUniformSubroutineuiv","","",0,null],[12,"Uniform2fv","","Fallbacks: Uniform2fvARB",0,null],[12,"Uniform2dv","","",0,null],[12,"Uniform3iv","","Fallbacks: Uniform3ivARB",0,null],[12,"ReadnPixels","","Fallbacks: ReadnPixelsARB, ReadnPixelsEXT, ReadnPixelsKHR",0,null],[12,"DepthMask","","",0,null],[12,"SampleMaski","","",0,null],[12,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",0,null],[12,"NamedFramebufferDrawBuffer","","",0,null],[12,"EnableVertexArrayAttrib","","",0,null],[12,"BlendFunc","","",0,null],[12,"ProgramUniform1dv","","",0,null],[12,"BufferStorage","","Fallbacks: BufferStorageEXT",0,null],[12,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",0,null],[12,"Uniform3i","","Fallbacks: Uniform3iARB",0,null],[12,"GetTransformFeedbacki64_v","","",0,null],[12,"ReadBuffer","","",0,null],[12,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT",0,null],[12,"StencilFunc","","",0,null],[12,"BindBuffersBase","","",0,null],[12,"BindFramebuffer","","",0,null],[12,"GetString","","",0,null],[12,"TexStorage3DMultisample","","Fallbacks: TexStorage3DMultisampleOES",0,null],[12,"GetAttachedShaders","","",0,null],[12,"TexParameterIiv","","Fallbacks: TexParameterIivEXT, TexParameterIivOES",0,null],[12,"DrawElementsInstancedBaseInstance","","Fallbacks: DrawElementsInstancedBaseInstanceEXT",0,null],[12,"GetnMinmax","","",0,null],[12,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",0,null],[12,"NamedFramebufferParameteri","","",0,null],[12,"DrawElements","","",0,null],[12,"PrimitiveRestartIndex","","",0,null],[12,"GetnSeparableFilter","","",0,null],[12,"MultiDrawElementsIndirect","","Fallbacks: MultiDrawElementsIndirectAMD, MultiDrawElementsIndirectEXT",0,null],[12,"SecondaryColorP3ui","","",0,null],[12,"PatchParameterfv","","",0,null],[12,"GetGraphicsResetStatus","","Fallbacks: GetGraphicsResetStatusKHR",0,null],[12,"ProgramUniform3dv","","",0,null],[12,"TextureParameteriv","","",0,null],[12,"DrawTransformFeedbackInstanced","","",0,null],[12,"GetnTexImage","","",0,null],[12,"TextureStorage3D","","",0,null],[12,"ValidateProgramPipeline","","",0,null],[12,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",0,null],[12,"IsBuffer","","Fallbacks: IsBufferARB",0,null],[12,"GetnMapfv","","",0,null],[12,"GetTexParameteriv","","",0,null],[12,"ProgramUniform3uiv","","Fallbacks: ProgramUniform3uivEXT",0,null],[12,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",0,null],[12,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT",0,null],[12,"Uniform2iv","","Fallbacks: Uniform2ivARB",0,null],[12,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT, GetTexParameterIivOES",0,null],[12,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV",0,null],[12,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",0,null],[12,"ProgramUniformMatrix2x4dv","","",0,null],[12,"GetProgramPipelineInfoLog","","",0,null],[12,"ProgramUniform2iv","","Fallbacks: ProgramUniform2ivEXT",0,null],[12,"StencilOp","","",0,null],[12,"ShaderSource","","Fallbacks: ShaderSourceARB",0,null],[12,"TexCoordP3ui","","",0,null],[12,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",0,null],[12,"GetCompressedTextureSubImage","","",0,null],[12,"GetProgramInfoLog","","",0,null],[12,"VertexAttribL2dv","","Fallbacks: VertexAttribL2dvEXT",0,null],[12,"TextureStorage2D","","",0,null],[12,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",0,null],[12,"ProgramUniform3i","","Fallbacks: ProgramUniform3iEXT",0,null],[12,"MultiTexCoordP3uiv","","",0,null],[12,"CopyImageSubData","","Fallbacks: CopyImageSubDataEXT, CopyImageSubDataOES",0,null],[12,"GetNamedBufferParameteri64v","","",0,null],[12,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB",0,null],[12,"GetFragDataIndex","","",0,null],[12,"BindTexture","","Fallbacks: BindTextureEXT",0,null],[12,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",0,null],[12,"GetShaderSource","","Fallbacks: GetShaderSourceARB",0,null],[12,"GetnUniformuiv","","Fallbacks: GetnUniformuivKHR",0,null],[12,"ClearStencil","","",0,null],[12,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",0,null],[12,"NamedFramebufferTexture","","",0,null],[12,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",0,null],[12,"NamedRenderbufferStorageMultisample","","",0,null],[12,"NormalP3uiv","","",0,null],[12,"NamedBufferStorage","","Fallbacks: NamedBufferStorageEXT",0,null],[12,"CheckNamedFramebufferStatus","","",0,null],[12,"ScissorIndexed","","Fallbacks: ScissorIndexedNV",0,null],[12,"BindImageTexture","","",0,null],[12,"GetProgramResourceLocationIndex","","",0,null],[12,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB",0,null],[12,"GetFloatv","","",0,null],[12,"ProvokingVertex","","Fallbacks: ProvokingVertexEXT",0,null],[12,"BlendEquationi","","Fallbacks: BlendEquationIndexedAMD, BlendEquationiARB, BlendEquationiEXT, BlendEquationiOES",0,null],[12,"TextureBuffer","","",0,null],[12,"GetIntegerv","","",0,null],[12,"MultiDrawArraysIndirect","","Fallbacks: MultiDrawArraysIndirectAMD, MultiDrawArraysIndirectEXT",0,null],[12,"GetTextureParameterfv","","",0,null],[12,"DetachShader","","Fallbacks: DetachObjectARB",0,null],[12,"Uniform4iv","","Fallbacks: Uniform4ivARB",0,null],[12,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",0,null],[12,"DeleteTextures","","",0,null],[12,"DrawTransformFeedbackStream","","",0,null],[12,"IsProgram","","",0,null],[12,"GetVertexArrayIndexed64iv","","",0,null],[12,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",0,null],[12,"VertexAttribFormat","","",0,null],[12,"FlushMappedNamedBufferRange","","",0,null],[12,"GetInternalformati64v","","",0,null],[12,"GetNamedFramebufferAttachmentParameteriv","","",0,null],[12,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",0,null],[12,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV",0,null],[12,"ClearBufferfi","","",0,null],[12,"BindRenderbuffer","","",0,null],[12,"TexCoordP1ui","","",0,null],[12,"UniformMatrix4x3dv","","",0,null],[12,"GenTransformFeedbacks","","Fallbacks: GenTransformFeedbacksNV",0,null],[12,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT",0,null],[12,"MemoryBarrier","","Fallbacks: MemoryBarrierEXT",0,null],[12,"IsProgramPipeline","","",0,null],[12,"ColorP3ui","","",0,null],[12,"GetSamplerParameterIuiv","","Fallbacks: GetSamplerParameterIuivEXT, GetSamplerParameterIuivOES",0,null],[12,"ProgramBinary","","Fallbacks: ProgramBinaryOES",0,null],[12,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",0,null],[12,"Scissor","","",0,null],[12,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",0,null],[12,"CreateSamplers","","",0,null],[12,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",0,null],[12,"FramebufferTexture","","Fallbacks: FramebufferTextureARB, FramebufferTextureEXT, FramebufferTextureOES",0,null],[12,"DepthRangeArrayv","","",0,null],[12,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",0,null],[12,"VertexAttribL1d","","Fallbacks: VertexAttribL1dEXT",0,null],[12,"GetFloati_v","","Fallbacks: GetFloatIndexedvEXT, GetFloati_vEXT, GetFloati_vNV",0,null],[12,"GetTextureParameterIiv","","",0,null],[12,"UniformMatrix2x4dv","","",0,null],[12,"BlendFuncSeparateiARB","","",0,null],[12,"ProgramUniform1iv","","Fallbacks: ProgramUniform1ivEXT",0,null],[12,"MultiTexCoordP4uiv","","",0,null],[12,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",0,null],[12,"TexImage3DMultisample","","",0,null],[12,"ShaderBinary","","",0,null],[12,"ProgramUniform2f","","Fallbacks: ProgramUniform2fEXT",0,null],[12,"ProgramUniform4ui","","Fallbacks: ProgramUniform4uiEXT",0,null],[0,"types","","",null,null],[4,"__GLsync","gfx_gl::types","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[6,"GLenum","","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[17,"PROGRAM","gfx_gl","",null,null],[17,"TEXTURE_HEIGHT","","",null,null],[17,"TEXTURE_LOD_BIAS","","",null,null],[17,"STACK_OVERFLOW","","",null,null],[17,"LINK_STATUS","","",null,null],[17,"DRAW_FRAMEBUFFER","","",null,null],[17,"ELEMENT_ARRAY_BUFFER","","",null,null],[17,"RENDERBUFFER_DEPTH_SIZE","","",null,null],[17,"NEAREST_MIPMAP_LINEAR","","",null,null],[17,"TEXTURE15","","",null,null],[17,"FUNC_SUBTRACT","","",null,null],[17,"OFFSET","","",null,null],[17,"R8I","","",null,null],[17,"STATIC_DRAW","","",null,null],[17,"UNSIGNED_INT_VEC3","","",null,null],[17,"GEQUAL","","",null,null],[17,"R32UI","","",null,null],[17,"COMPRESSED_RGBA_BPTC_UNORM","","",null,null],[17,"STENCIL_PASS_DEPTH_FAIL","","",null,null],[17,"TEXTURE21","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_VECTORS","","",null,null],[17,"DEBUG_TYPE_ERROR","","",null,null],[17,"UNSIGNED_SHORT_5_6_5","","",null,null],[17,"FRAGMENT_SUBROUTINE","","",null,null],[17,"BOOL_VEC3","","",null,null],[17,"SRGB8_ALPHA8","","",null,null],[17,"CLIP_DISTANCE6","","",null,null],[17,"RGB32I","","",null,null],[17,"VIEW_CLASS_S3TC_DXT1_RGB","","",null,null],[17,"QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",null,null],[17,"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"TESS_EVALUATION_SHADER","","",null,null],[17,"VIEW_CLASS_16_BITS","","",null,null],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",null,null],[17,"MAX_COLOR_ATTACHMENTS","","",null,null],[17,"RGB","","",null,null],[17,"UNIFORM_BLOCK","","",null,null],[17,"RGBA32I","","",null,null],[17,"COPY","","",null,null],[17,"GET_TEXTURE_IMAGE_FORMAT","","",null,null],[17,"VIEW_CLASS_48_BITS","","",null,null],[17,"COLOR_ATTACHMENT0","","",null,null],[17,"RGB10_A2","","",null,null],[17,"COLOR_ATTACHMENT25","","",null,null],[17,"DRAW_BUFFER11","","",null,null],[17,"TESS_EVALUATION_SUBROUTINE","","",null,null],[17,"FLOAT_MAT3x4","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"VIEW_CLASS_S3TC_DXT5_RGBA","","",null,null],[17,"MAX_PATCH_VERTICES","","",null,null],[17,"DEBUG_TYPE_POP_GROUP","","",null,null],[17,"FLOAT_MAT2","","",null,null],[17,"MAP_PERSISTENT_BIT","","",null,null],[17,"UNSIGNED_SHORT","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",null,null],[17,"VIEW_CLASS_128_BITS","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_STRIDE","","",null,null],[17,"SAMPLE_MASK_VALUE","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4","","",null,null],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",null,null],[17,"CONTEXT_RELEASE_BEHAVIOR_FLUSH","","",null,null],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR","","",null,null],[17,"MAX_TESS_CONTROL_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_IMAGE_UNIFORMS","","",null,null],[17,"IMAGE_CLASS_1_X_8","","",null,null],[17,"INT_IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"RENDERBUFFER_ALPHA_SIZE","","",null,null],[17,"R32I","","",null,null],[17,"CLEAR","","",null,null],[17,"MAX_GEOMETRY_ATOMIC_COUNTERS","","",null,null],[17,"SHADER","","",null,null],[17,"TEXTURE_1D_ARRAY","","",null,null],[17,"MAX","","",null,null],[17,"SAMPLER","","",null,null],[17,"MAX_VIEWPORTS","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D","","",null,null],[17,"SHADER_TYPE","","",null,null],[17,"SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"BOOL_VEC4","","",null,null],[17,"TEXTURE7","","",null,null],[17,"TEXTURE9","","",null,null],[17,"TEXTURE_FETCH_BARRIER_BIT","","",null,null],[17,"STENCIL_REF","","",null,null],[17,"TEXTURE_CUBE_MAP_ARRAY","","",null,null],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",null,null],[17,"TEXTURE_BINDING_1D","","",null,null],[17,"TRUE","","",null,null],[17,"COLOR_ATTACHMENT31","","",null,null],[17,"PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED","","",null,null],[17,"TEXTURE_ALPHA_TYPE","","",null,null],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"MAX_GEOMETRY_SHADER_INVOCATIONS","","",null,null],[17,"TESS_CONTROL_SHADER_BIT","","",null,null],[17,"ACTIVE_TEXTURE","","",null,null],[17,"DEBUG_SOURCE_THIRD_PARTY","","",null,null],[17,"RGBA8","","",null,null],[17,"UNSIGNED_NORMALIZED","","",null,null],[17,"TEXTURE_IMAGE_FORMAT","","",null,null],[17,"REPLACE","","",null,null],[17,"DITHER","","",null,null],[17,"FRAGMENT_INTERPOLATION_OFFSET_BITS","","",null,null],[17,"TEXTURE6","","",null,null],[17,"TEXTURE_3D","","",null,null],[17,"FLOAT_MAT4x2","","",null,null],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"CONTEXT_CORE_PROFILE_BIT","","",null,null],[17,"INT_IMAGE_BUFFER","","",null,null],[17,"MAX_COMBINED_DIMENSIONS","","",null,null],[17,"LOW_INT","","",null,null],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",null,null],[17,"UNPACK_ALIGNMENT","","",null,null],[17,"DRAW_BUFFER13","","",null,null],[17,"LOGIC_OP_MODE","","",null,null],[17,"TEXTURE_VIEW","","",null,null],[17,"SAMPLER_2D","","",null,null],[17,"UNIFORM_BUFFER","","",null,null],[17,"ACTIVE_UNIFORMS","","",null,null],[17,"DEBUG_TYPE_PERFORMANCE","","",null,null],[17,"TEXTURE_BUFFER_SIZE","","",null,null],[17,"MAX_VERTEX_SHADER_STORAGE_BLOCKS","","",null,null],[17,"CAVEAT_SUPPORT","","",null,null],[17,"INT_SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"TEXTURE14","","",null,null],[17,"MAX_ELEMENTS_VERTICES","","",null,null],[17,"OR_INVERTED","","",null,null],[17,"COPY_READ_BUFFER","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","","",null,null],[17,"REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"FRAMEBUFFER_UNSUPPORTED","","",null,null],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTERS","","",null,null],[17,"PACK_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_BINDINGS","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORMS","","",null,null],[17,"COMPRESSED_SRGB_ALPHA_BPTC_UNORM","","",null,null],[17,"TEXTURE_CUBE_MAP_SEAMLESS","","",null,null],[17,"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"FRAMEBUFFER_SRGB","","",null,null],[17,"TEXTURE27","","",null,null],[17,"SCISSOR_TEST","","",null,null],[17,"RED","","",null,null],[17,"REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"POLYGON_OFFSET_POINT","","",null,null],[17,"COLOR_ATTACHMENT30","","",null,null],[17,"COLOR_ATTACHMENT4","","",null,null],[17,"PACK_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"COLOR_ATTACHMENT7","","",null,null],[17,"TEXTURE_BINDING_RECTANGLE","","",null,null],[17,"BGR_INTEGER","","",null,null],[17,"COLOR_WRITEMASK","","",null,null],[17,"RGB16UI","","",null,null],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"FLOAT_VEC3","","",null,null],[17,"MAX_SUBROUTINES","","",null,null],[17,"RGBA8UI","","",null,null],[17,"RGBA16","","",null,null],[17,"TOP_LEVEL_ARRAY_SIZE","","",null,null],[17,"COLOR_ATTACHMENT14","","",null,null],[17,"NEAREST_MIPMAP_NEAREST","","",null,null],[17,"SHADER_STORAGE_BUFFER_START","","",null,null],[17,"INTERNALFORMAT_GREEN_TYPE","","",null,null],[17,"PIXEL_PACK_BUFFER_BINDING","","",null,null],[17,"PACK_LSB_FIRST","","",null,null],[17,"SRC1_ALPHA","","",null,null],[17,"TEXTURE_BASE_LEVEL","","",null,null],[17,"DEPTH_STENCIL_ATTACHMENT","","",null,null],[17,"TEXTURE26","","",null,null],[17,"COLOR_ATTACHMENT26","","",null,null],[17,"DEPTH_FUNC","","",null,null],[17,"NEVER","","",null,null],[17,"TEXTURE_BLUE_SIZE","","",null,null],[17,"REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"UNSIGNED_SHORT_5_5_5_1","","",null,null],[17,"DEPTH_COMPONENT24","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","","",null,null],[17,"BGRA","","",null,null],[17,"ONE","","",null,null],[17,"PROXY_TEXTURE_2D_ARRAY","","",null,null],[17,"PACK_COMPRESSED_BLOCK_DEPTH","","",null,null],[17,"VALIDATE_STATUS","","",null,null],[17,"UNIFORM_MATRIX_STRIDE","","",null,null],[17,"BUFFER_UPDATE_BARRIER_BIT","","",null,null],[17,"SHADER_STORAGE_BUFFER_BINDING","","",null,null],[17,"SAMPLE_POSITION","","",null,null],[17,"TRIANGLE_STRIP_ADJACENCY","","",null,null],[17,"TEXTURE_IMMUTABLE_LEVELS","","",null,null],[17,"COLOR_ATTACHMENT5","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST","","",null,null],[17,"DEBUG_SOURCE_WINDOW_SYSTEM","","",null,null],[17,"CONTEXT_COMPATIBILITY_PROFILE_BIT","","",null,null],[17,"DEPTH","","",null,null],[17,"FRAMEBUFFER_DEFAULT","","",null,null],[17,"INT_SAMPLER_2D_ARRAY","","",null,null],[17,"DEBUG_TYPE_MARKER","","",null,null],[17,"DOUBLEBUFFER","","",null,null],[17,"LESS","","",null,null],[17,"QUERY","","",null,null],[17,"RGB8I","","",null,null],[17,"DEBUG_TYPE_OTHER","","",null,null],[17,"TEXTURE_MAG_FILTER","","",null,null],[17,"LINE_WIDTH_GRANULARITY","","",null,null],[17,"TEXTURE_IMAGE_TYPE","","",null,null],[17,"UNIFORM_BARRIER_BIT","","",null,null],[17,"TEXTURE28","","",null,null],[17,"SHADER_STORAGE_BUFFER_SIZE","","",null,null],[17,"AUTO_GENERATE_MIPMAP","","",null,null],[17,"COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"UNSIGNED_INT_IMAGE_3D","","",null,null],[17,"IMAGE_BINDING_FORMAT","","",null,null],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"COLOR_ATTACHMENT19","","",null,null],[17,"QUERY_BUFFER","","",null,null],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTERS","","",null,null],[17,"COLOR_BUFFER_BIT","","",null,null],[17,"TEXTURE_SWIZZLE_B","","",null,null],[17,"IS_PER_PATCH","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"R11F_G11F_B10F","","",null,null],[17,"DOUBLE_MAT3x4","","",null,null],[17,"PACK_SWAP_BYTES","","",null,null],[17,"IMAGE_2D_MULTISAMPLE","","",null,null],[17,"MAP_INVALIDATE_BUFFER_BIT","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"BLEND_EQUATION_ALPHA","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",null,null],[17,"ONE_MINUS_CONSTANT_COLOR","","",null,null],[17,"TEXTURE_TARGET","","",null,null],[17,"MAX_COMPUTE_UNIFORM_BLOCKS","","",null,null],[17,"COLOR_ATTACHMENT1","","",null,null],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",null,null],[17,"OBJECT_TYPE","","",null,null],[17,"UNIFORM_OFFSET","","",null,null],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",null,null],[17,"UNSIGNED_INT_IMAGE_BUFFER","","",null,null],[17,"INTERNALFORMAT_RED_SIZE","","",null,null],[17,"RGB4","","",null,null],[17,"FRAMEBUFFER_DEFAULT_WIDTH","","",null,null],[17,"TEXTURE30","","",null,null],[17,"R8","","",null,null],[17,"IMAGE_2D","","",null,null],[17,"MAP_COHERENT_BIT","","",null,null],[17,"CLIP_DISTANCE3","","",null,null],[17,"TEXTURE_COMPRESSED","","",null,null],[17,"STREAM_COPY","","",null,null],[17,"BUFFER_BINDING","","",null,null],[17,"FASTEST","","",null,null],[17,"CURRENT_PROGRAM","","",null,null],[17,"RGBA4","","",null,null],[17,"INTERNALFORMAT_BLUE_TYPE","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_COMPONENTS","","",null,null],[17,"BUFFER","","",null,null],[17,"MAX_VIEWPORT_DIMS","","",null,null],[17,"BUFFER_SIZE","","",null,null],[17,"MAP_WRITE_BIT","","",null,null],[17,"RGBA8I","","",null,null],[17,"IMAGE_CLASS_2_X_8","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"STEREO","","",null,null],[17,"DEPTH_STENCIL","","",null,null],[17,"CLIP_DISTANCE5","","",null,null],[17,"PATCH_VERTICES","","",null,null],[17,"ONE_MINUS_SRC1_ALPHA","","",null,null],[17,"SRGB","","",null,null],[17,"DOUBLE_MAT2","","",null,null],[17,"INT_IMAGE_3D","","",null,null],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",null,null],[17,"READ_FRAMEBUFFER_BINDING","","",null,null],[17,"FRAGMENT_SHADER_BIT","","",null,null],[17,"MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS","","",null,null],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",null,null],[17,"UNSIGNED_INT_5_9_9_9_REV","","",null,null],[17,"TIMESTAMP","","",null,null],[17,"COLOR_ATTACHMENT17","","",null,null],[17,"TRIANGLE_STRIP","","",null,null],[17,"STENCIL_WRITEMASK","","",null,null],[17,"FRAMEBUFFER_RENDERABLE","","",null,null],[17,"UNSIGNED_INT_VEC4","","",null,null],[17,"MAX_GEOMETRY_INPUT_COMPONENTS","","",null,null],[17,"DEBUG_SOURCE_API","","",null,null],[17,"NUM_COMPATIBLE_SUBROUTINES","","",null,null],[17,"ACTIVE_VARIABLES","","",null,null],[17,"RGB8","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"SAMPLE_COVERAGE_VALUE","","",null,null],[17,"MAX_GEOMETRY_SHADER_STORAGE_BLOCKS","","",null,null],[17,"STENCIL_CLEAR_VALUE","","",null,null],[17,"READ_BUFFER","","",null,null],[17,"LOCATION_COMPONENT","","",null,null],[17,"VIEW_CLASS_8_BITS","","",null,null],[17,"COLOR_COMPONENTS","","",null,null],[17,"IMAGE_2D_RECT","","",null,null],[17,"GREATER","","",null,null],[17,"UNSIGNED_INT_IMAGE_1D","","",null,null],[17,"READ_PIXELS","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"STENCIL_BACK_WRITEMASK","","",null,null],[17,"MIRROR_CLAMP_TO_EDGE","","",null,null],[17,"DRAW_BUFFER6","","",null,null],[17,"SYNC_FENCE","","",null,null],[17,"TEXTURE_ALPHA_SIZE","","",null,null],[17,"RG16UI","","",null,null],[17,"STATIC_READ","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"DELETE_STATUS","","",null,null],[17,"FRAMEBUFFER_BINDING","","",null,null],[17,"FLOAT_VEC4","","",null,null],[17,"MAX_ELEMENT_INDEX","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_TYPE","","",null,null],[17,"VERTEX_SUBROUTINE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",null,null],[17,"RENDERBUFFER_RED_SIZE","","",null,null],[17,"INTERNALFORMAT_BLUE_SIZE","","",null,null],[17,"RGB_INTEGER","","",null,null],[17,"INT_IMAGE_2D_MULTISAMPLE","","",null,null],[17,"RG8I","","",null,null],[17,"TEXTURE_SAMPLES","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",null,null],[17,"COLOR_ATTACHMENT16","","",null,null],[17,"RGBA8_SNORM","","",null,null],[17,"MAX_COMPUTE_TEXTURE_IMAGE_UNITS","","",null,null],[17,"HALF_FLOAT","","",null,null],[17,"STENCIL_INDEX","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",null,null],[17,"BACK","","",null,null],[17,"COMPRESSED_RGB","","",null,null],[17,"IMAGE_CLASS_4_X_16","","",null,null],[17,"ONE_MINUS_SRC1_COLOR","","",null,null],[17,"SRC_COLOR","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTERS","","",null,null],[17,"NUM_ACTIVE_VARIABLES","","",null,null],[17,"ONE_MINUS_DST_COLOR","","",null,null],[17,"CONSTANT_ALPHA","","",null,null],[17,"NOTEQUAL","","",null,null],[17,"INT_SAMPLER_3D","","",null,null],[17,"NEAREST","","",null,null],[17,"IMAGE_BINDING_NAME","","",null,null],[17,"RG_INTEGER","","",null,null],[17,"COLOR_ATTACHMENT23","","",null,null],[17,"MAX_SUBROUTINE_UNIFORM_LOCATIONS","","",null,null],[17,"R8UI","","",null,null],[17,"TRIANGLE_FAN","","",null,null],[17,"UNSIGNED_BYTE_3_3_2","","",null,null],[17,"TEXTURE_BUFFER_BINDING","","",null,null],[17,"SAMPLER_2D_ARRAY","","",null,null],[17,"VIEWPORT_INDEX_PROVOKING_VERTEX","","",null,null],[17,"IMAGE_BINDING_ACCESS","","",null,null],[17,"FRAMEBUFFER_COMPLETE","","",null,null],[17,"WAIT_FAILED","","",null,null],[17,"FLOAT_MAT3x2","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_RECT","","",null,null],[17,"ALREADY_SIGNALED","","",null,null],[17,"STENCIL","","",null,null],[17,"BACK_LEFT","","",null,null],[17,"SMOOTH_POINT_SIZE_RANGE","","",null,null],[17,"ZERO","","",null,null],[17,"RGB8_SNORM","","",null,null],[17,"MIN","","",null,null],[17,"GEOMETRY_SUBROUTINE","","",null,null],[17,"MINOR_VERSION","","",null,null],[17,"QUADS","","",null,null],[17,"STREAM_DRAW","","",null,null],[17,"BUFFER_IMMUTABLE_STORAGE","","",null,null],[17,"UNSIGNED_INT_8_8_8_8_REV","","",null,null],[17,"SAMPLE_SHADING","","",null,null],[17,"R16","","",null,null],[17,"RENDERER","","",null,null],[17,"UNPACK_IMAGE_HEIGHT","","",null,null],[17,"STENCIL_VALUE_MASK","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT","","",null,null],[17,"RGBA16UI","","",null,null],[17,"INNOCENT_CONTEXT_RESET","","",null,null],[17,"SRC1_COLOR","","",null,null],[17,"MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"UNPACK_SKIP_PIXELS","","",null,null],[17,"TEXTURE5","","",null,null],[17,"REPEAT","","",null,null],[17,"BOOL","","",null,null],[17,"ALIASED_LINE_WIDTH_RANGE","","",null,null],[17,"DEPTH_WRITEMASK","","",null,null],[17,"BUFFER_ACCESS","","",null,null],[17,"CLIP_DISTANCE0","","",null,null],[17,"COLOR_ATTACHMENT20","","",null,null],[17,"UNIFORM_IS_ROW_MAJOR","","",null,null],[17,"VERTEX_ATTRIB_BINDING","","",null,null],[17,"TEXTURE_STENCIL_SIZE","","",null,null],[17,"PATCH_DEFAULT_OUTER_LEVEL","","",null,null],[17,"MAX_NUM_ACTIVE_VARIABLES","","",null,null],[17,"PROXY_TEXTURE_1D_ARRAY","","",null,null],[17,"COPY_READ_BUFFER_BINDING","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH","","",null,null],[17,"SHADER_IMAGE_LOAD","","",null,null],[17,"FRAMEBUFFER_BARRIER_BIT","","",null,null],[17,"VERTEX_BINDING_OFFSET","","",null,null],[17,"TRANSFORM_FEEDBACK_BINDING","","",null,null],[17,"MAX_INTEGER_SAMPLES","","",null,null],[17,"DEPTH_RENDERABLE","","",null,null],[17,"FRONT","","",null,null],[17,"PROGRAM_BINARY_FORMATS","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_DATA_SIZE","","",null,null],[17,"PRIMITIVE_RESTART_FIXED_INDEX","","",null,null],[17,"GEOMETRY_VERTICES_OUT","","",null,null],[17,"RGB16F","","",null,null],[17,"TEXTURE16","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"COLOR_ATTACHMENT3","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"LEFT","","",null,null],[17,"MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"TEXTURE_MIN_LOD","","",null,null],[17,"TEXTURE_DEPTH_TYPE","","",null,null],[17,"RG8UI","","",null,null],[17,"TEXTURE_WRAP_R","","",null,null],[17,"FILL","","",null,null],[17,"NICEST","","",null,null],[17,"UNSIGNED_INT_ATOMIC_COUNTER","","",null,null],[17,"IMAGE_CUBE","","",null,null],[17,"BUFFER_MAP_LENGTH","","",null,null],[17,"COMPRESSED_RED","","",null,null],[17,"MAX_VERTEX_ATTRIB_BINDINGS","","",null,null],[17,"SAMPLER_3D","","",null,null],[17,"COMPUTE_SHADER","","",null,null],[17,"NUM_SHADING_LANGUAGE_VERSIONS","","",null,null],[17,"MIN_MAP_BUFFER_ALIGNMENT","","",null,null],[17,"ACTIVE_PROGRAM","","",null,null],[17,"MAX_TESS_EVALUATION_OUTPUT_COMPONENTS","","",null,null],[17,"SAMPLER_CUBE","","",null,null],[17,"COMPRESSED_SIGNED_RG11_EAC","","",null,null],[17,"DRAW_BUFFER5","","",null,null],[17,"ATOMIC_COUNTER_BUFFER","","",null,null],[17,"BUFFER_USAGE","","",null,null],[17,"QUERY_WAIT","","",null,null],[17,"MAX_WIDTH","","",null,null],[17,"COLOR","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_CLASS","","",null,null],[17,"CCW","","",null,null],[17,"STENCIL_PASS_DEPTH_PASS","","",null,null],[17,"DST_ALPHA","","",null,null],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"UNIFORM","","",null,null],[17,"PACK_ALIGNMENT","","",null,null],[17,"IMAGE_CLASS_2_X_32","","",null,null],[17,"ALPHA","","",null,null],[17,"SRGB_READ","","",null,null],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",null,null],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"DEBUG_OUTPUT_SYNCHRONOUS","","",null,null],[17,"GREEN","","",null,null],[17,"BLEND_DST","","",null,null],[17,"MAX_HEIGHT","","",null,null],[17,"DYNAMIC_DRAW","","",null,null],[17,"RED_INTEGER","","",null,null],[17,"INTERLEAVED_ATTRIBS","","",null,null],[17,"DEPTH_COMPONENT32F","","",null,null],[17,"TESS_CONTROL_TEXTURE","","",null,null],[17,"FLOAT_MAT2x4","","",null,null],[17,"QUERY_WAIT_INVERTED","","",null,null],[17,"POLYGON_SMOOTH","","",null,null],[17,"RG32F","","",null,null],[17,"TEXTURE_GATHER_SHADOW","","",null,null],[17,"FRACTIONAL_ODD","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",null,null],[17,"TESS_EVALUATION_SUBROUTINE_UNIFORM","","",null,null],[17,"TEXTURE_SWIZZLE_R","","",null,null],[17,"ACTIVE_SUBROUTINES","","",null,null],[17,"TEXTURE_BUFFER","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER","","",null,null],[17,"VIEWPORT_BOUNDS_RANGE","","",null,null],[17,"DRAW_BUFFER7","","",null,null],[17,"KEEP","","",null,null],[17,"LINEAR_MIPMAP_LINEAR","","",null,null],[17,"DOUBLE_MAT4x3","","",null,null],[17,"TEXTURE_BUFFER_OFFSET","","",null,null],[17,"MAX_GEOMETRY_TEXTURE_IMAGE_UNITS","","",null,null],[17,"DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"AND_REVERSE","","",null,null],[17,"TEXTURE_SWIZZLE_A","","",null,null],[17,"SET","","",null,null],[17,"DEPTH_CLEAR_VALUE","","",null,null],[17,"MAX_DEPTH","","",null,null],[17,"FRAGMENT_TEXTURE","","",null,null],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"INVALID_FRAMEBUFFER_OPERATION","","",null,null],[17,"TEXTURE_WIDTH","","",null,null],[17,"UNPACK_LSB_FIRST","","",null,null],[17,"DOUBLE_MAT2x3","","",null,null],[17,"DEBUG_TYPE_PUSH_GROUP","","",null,null],[17,"BUFFER_MAPPED","","",null,null],[17,"VERTEX_ARRAY","","",null,null],[17,"TESS_GEN_SPACING","","",null,null],[17,"QUERY_TARGET","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",null,null],[17,"DEBUG_SEVERITY_LOW","","",null,null],[17,"DEBUG_SOURCE_SHADER_COMPILER","","",null,null],[17,"READ_PIXELS_TYPE","","",null,null],[17,"TEXTURE_GREEN_SIZE","","",null,null],[17,"UNPACK_SWAP_BYTES","","",null,null],[17,"SAMPLES_PASSED","","",null,null],[17,"INCR_WRAP","","",null,null],[17,"DECR","","",null,null],[17,"DRAW_BUFFER","","",null,null],[17,"MAX_DEBUG_LOGGED_MESSAGES","","",null,null],[17,"SAMPLER_1D_ARRAY_SHADOW","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",null,null],[17,"TEXTURE_BINDING_2D_ARRAY","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_BLOCKS","","",null,null],[17,"MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS","","",null,null],[17,"NAME_LENGTH","","",null,null],[17,"TEXTURE_GATHER","","",null,null],[17,"VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"FRAMEBUFFER_DEFAULT_LAYERS","","",null,null],[17,"DOUBLE_VEC3","","",null,null],[17,"COPY_WRITE_BUFFER_BINDING","","",null,null],[17,"IMAGE_PIXEL_TYPE","","",null,null],[17,"MAP_READ_BIT","","",null,null],[17,"TEXTURE_DEPTH_SIZE","","",null,null],[17,"UNPACK_ROW_LENGTH","","",null,null],[17,"DEBUG_TYPE_PORTABILITY","","",null,null],[17,"UNPACK_SKIP_ROWS","","",null,null],[17,"SRGB_WRITE","","",null,null],[17,"IMAGE_TEXEL_SIZE","","",null,null],[17,"IMAGE_3D","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"HIGH_FLOAT","","",null,null],[17,"MIN_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"INT_VEC3","","",null,null],[17,"MIN_FRAGMENT_INTERPOLATION_OFFSET","","",null,null],[17,"DEBUG_SEVERITY_NOTIFICATION","","",null,null],[17,"SHADER_SOURCE_LENGTH","","",null,null],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","","",null,null],[17,"ONE_MINUS_CONSTANT_ALPHA","","",null,null],[17,"INT_VEC4","","",null,null],[17,"COMPRESSED_RG11_EAC","","",null,null],[17,"COLOR_ENCODING","","",null,null],[17,"TEXTURE13","","",null,null],[17,"CONDITION_SATISFIED","","",null,null],[17,"LINE","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",null,null],[17,"INT_SAMPLER_BUFFER","","",null,null],[17,"MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"DOUBLE_MAT2x4","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"FLOAT_MAT4x3","","",null,null],[17,"LOSE_CONTEXT_ON_RESET","","",null,null],[17,"TEXTURE_VIEW_NUM_LAYERS","","",null,null],[17,"QUERY_BY_REGION_WAIT","","",null,null],[17,"TEXTURE_BORDER_COLOR","","",null,null],[17,"TEXTURE","","",null,null],[17,"BUFFER_DATA_SIZE","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",null,null],[17,"PIXEL_UNPACK_BUFFER","","",null,null],[17,"MAX_UNIFORM_BLOCK_SIZE","","",null,null],[17,"COLOR_ATTACHMENT28","","",null,null],[17,"POLYGON_SMOOTH_HINT","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"CLAMP_READ_COLOR","","",null,null],[17,"RGB565","","",null,null],[17,"FUNC_ADD","","",null,null],[17,"RENDERBUFFER","","",null,null],[17,"BLEND_EQUATION_RGB","","",null,null],[17,"CONTEXT_FLAG_DEBUG_BIT","","",null,null],[17,"MAX_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"TEXTURE_BINDING_1D_ARRAY","","",null,null],[17,"NOOP","","",null,null],[17,"UNSIGNED_BYTE","","",null,null],[17,"RGB16_SNORM","","",null,null],[17,"COMPRESSED_RGBA8_ETC2_EAC","","",null,null],[17,"UNIFORM_BLOCK_BINDING","","",null,null],[17,"RGBA2","","",null,null],[17,"TEXTURE_BINDING_3D","","",null,null],[17,"INVALID_VALUE","","",null,null],[17,"DEBUG_SEVERITY_HIGH","","",null,null],[17,"FRAGMENT_SHADER","","",null,null],[17,"LOWER_LEFT","","",null,null],[17,"PROGRAM_SEPARABLE","","",null,null],[17,"SAMPLE_MASK","","",null,null],[17,"TESS_CONTROL_OUTPUT_VERTICES","","",null,null],[17,"BGRA_INTEGER","","",null,null],[17,"RGBA","","",null,null],[17,"QUERY_BUFFER_BINDING","","",null,null],[17,"MAX_GEOMETRY_IMAGE_UNIFORMS","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"FRONT_LEFT","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"ONE_MINUS_SRC_COLOR","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"MIRRORED_REPEAT","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",null,null],[17,"COLOR_RENDERABLE","","",null,null],[17,"FRAMEBUFFER_BLEND","","",null,null],[17,"VIEW_CLASS_S3TC_DXT3_RGBA","","",null,null],[17,"VERTEX_ARRAY_BINDING","","",null,null],[17,"INT_SAMPLER_1D_ARRAY","","",null,null],[17,"FLOAT_MAT4","","",null,null],[17,"OR","","",null,null],[17,"GEOMETRY_SHADER_BIT","","",null,null],[17,"TEXTURE25","","",null,null],[17,"MAX_3D_TEXTURE_SIZE","","",null,null],[17,"MAX_VERTEX_IMAGE_UNIFORMS","","",null,null],[17,"TEXTURE_INTERNAL_FORMAT","","",null,null],[17,"INTERNALFORMAT_PREFERRED","","",null,null],[17,"MAX_TESS_EVALUATION_UNIFORM_COMPONENTS","","",null,null],[17,"TEXTURE_COMPRESSION_HINT","","",null,null],[17,"TEXTURE_MIN_FILTER","","",null,null],[17,"EQUIV","","",null,null],[17,"AND","","",null,null],[17,"DRAW_BUFFER3","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTERS","","",null,null],[17,"MAX_COMPUTE_IMAGE_UNIFORMS","","",null,null],[17,"TEXTURE8","","",null,null],[17,"ATTACHED_SHADERS","","",null,null],[17,"DRAW_BUFFER4","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",null,null],[17,"MAX_IMAGE_UNITS","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",null,null],[17,"STENCIL_BACK_FAIL","","",null,null],[17,"RENDERBUFFER_BINDING","","",null,null],[17,"FLOAT","","",null,null],[17,"READ_ONLY","","",null,null],[17,"SAMPLER_CUBE_SHADOW","","",null,null],[17,"DEPTH_STENCIL_TEXTURE_MODE","","",null,null],[17,"MAX_TEXTURE_LOD_BIAS","","",null,null],[17,"IMAGE_CLASS_10_10_10_2","","",null,null],[17,"RGBA16I","","",null,null],[17,"COLOR_ATTACHMENT15","","",null,null],[17,"MANUAL_GENERATE_MIPMAP","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",null,null],[17,"VERTEX_BINDING_STRIDE","","",null,null],[17,"POINT_SPRITE_COORD_ORIGIN","","",null,null],[17,"UNSIGNED_INT_10_10_10_2","","",null,null],[17,"ARRAY_BUFFER_BINDING","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"VIEW_CLASS_RGTC1_RED","","",null,null],[17,"CONTEXT_RELEASE_BEHAVIOR","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"SRGB8","","",null,null],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",null,null],[17,"MAX_SERVER_WAIT_TIMEOUT","","",null,null],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",null,null],[17,"GEOMETRY_OUTPUT_TYPE","","",null,null],[17,"PROGRAM_INPUT","","",null,null],[17,"TRANSFORM_FEEDBACK_BARRIER_BIT","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",null,null],[17,"PROVOKING_VERTEX","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP_ARRAY","","",null,null],[17,"DEBUG_LOGGED_MESSAGES","","",null,null],[17,"MAX_VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"SHADER_STORAGE_BLOCK","","",null,null],[17,"RASTERIZER_DISCARD","","",null,null],[17,"NEGATIVE_ONE_TO_ONE","","",null,null],[17,"RGB8UI","","",null,null],[17,"IMAGE_1D_ARRAY","","",null,null],[17,"MAX_TESS_CONTROL_OUTPUT_COMPONENTS","","",null,null],[17,"UNIFORM_NAME_LENGTH","","",null,null],[17,"POINT_SIZE_RANGE","","",null,null],[17,"MAX_VARYING_FLOATS","","",null,null],[17,"DEPTH_RANGE","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_ACTIVE","","",null,null],[17,"XOR","","",null,null],[17,"CURRENT_QUERY","","",null,null],[17,"ONE_MINUS_SRC_ALPHA","","",null,null],[17,"VIEW_CLASS_64_BITS","","",null,null],[17,"BLEND_DST_RGB","","",null,null],[17,"RENDERBUFFER_BLUE_SIZE","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"STENCIL_FAIL","","",null,null],[17,"PACK_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR","","",null,null],[17,"RESET_NOTIFICATION_STRATEGY","","",null,null],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"GREEN_INTEGER","","",null,null],[17,"COMPARE_REF_TO_TEXTURE","","",null,null],[17,"COMPATIBLE_SUBROUTINES","","",null,null],[17,"IS_ROW_MAJOR","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",null,null],[17,"IMAGE_1D","","",null,null],[17,"SAMPLER_CUBE_MAP_ARRAY_SHADOW","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER","","",null,null],[17,"COPY_WRITE_BUFFER","","",null,null],[17,"RGBA12","","",null,null],[17,"R16F","","",null,null],[17,"RGB10","","",null,null],[17,"TEXTURE_GREEN_TYPE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"PROXY_TEXTURE_2D","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE","","",null,null],[17,"ALL_SHADER_BITS","","",null,null],[17,"MAX_LAYERS","","",null,null],[17,"PROGRAM_BINARY_RETRIEVABLE_HINT","","",null,null],[17,"VIEW_CLASS_BPTC_UNORM","","",null,null],[17,"DEPTH32F_STENCIL8","","",null,null],[17,"DRAW_INDIRECT_BUFFER_BINDING","","",null,null],[17,"QUERY_NO_WAIT_INVERTED","","",null,null],[17,"MAX_SHADER_STORAGE_BLOCK_SIZE","","",null,null],[17,"DEBUG_SOURCE_OTHER","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP","","",null,null],[17,"QUERY_BY_REGION_WAIT_INVERTED","","",null,null],[17,"COMPUTE_SUBROUTINE","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS","","",null,null],[17,"VERSION","","",null,null],[17,"TRIANGLES","","",null,null],[17,"CLIP_DISTANCE1","","",null,null],[17,"INT_IMAGE_CUBE","","",null,null],[17,"READ_WRITE","","",null,null],[17,"ACTIVE_ATTRIBUTES","","",null,null],[17,"BLUE","","",null,null],[17,"COLOR_ATTACHMENT10","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_INDEX","","",null,null],[17,"RGB16","","",null,null],[17,"FALSE","","",null,null],[17,"CLIP_DISTANCE7","","",null,null],[17,"CW","","",null,null],[17,"MAX_DRAW_BUFFERS","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",null,null],[17,"SRGB_ALPHA","","",null,null],[17,"TEXTURE10","","",null,null],[17,"INTERNALFORMAT_GREEN_SIZE","","",null,null],[17,"TOP_LEVEL_ARRAY_STRIDE","","",null,null],[17,"TESS_EVALUATION_TEXTURE","","",null,null],[17,"RIGHT","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",null,null],[17,"BLEND_SRC","","",null,null],[17,"INTERNALFORMAT_ALPHA_SIZE","","",null,null],[17,"INVALID_INDEX","","",null,null],[17,"TEXTURE_BUFFER_DATA_STORE_BINDING","","",null,null],[17,"BUFFER_VARIABLE","","",null,null],[17,"PACK_SKIP_PIXELS","","",null,null],[17,"UNSIGNED_INT_8_8_8_8","","",null,null],[17,"SAMPLER_2D_SHADOW","","",null,null],[17,"PACK_ROW_LENGTH","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",null,null],[17,"DRAW_BUFFER15","","",null,null],[17,"MAX_SAMPLES","","",null,null],[17,"SAMPLE_COVERAGE_INVERT","","",null,null],[17,"TESS_GEN_VERTEX_ORDER","","",null,null],[17,"TEXTURE_WRAP_T","","",null,null],[17,"VIEWPORT","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES","","",null,null],[17,"TEXTURE_SHARED_SIZE","","",null,null],[17,"UNPACK_SKIP_IMAGES","","",null,null],[17,"FRAMEBUFFER_DEFAULT_HEIGHT","","",null,null],[17,"TEXTURE1","","",null,null],[17,"TEXTURE_MAX_LEVEL","","",null,null],[17,"VIEW_CLASS_96_BITS","","",null,null],[17,"MAX_SAMPLE_MASK_WORDS","","",null,null],[17,"TESS_GEN_POINT_MODE","","",null,null],[17,"FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"MAX_TESS_EVALUATION_IMAGE_UNIFORMS","","",null,null],[17,"MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS","","",null,null],[17,"DOUBLE_MAT4","","",null,null],[17,"BUFFER_MAP_OFFSET","","",null,null],[17,"RGBA16_SNORM","","",null,null],[17,"FULL_SUPPORT","","",null,null],[17,"INVERT","","",null,null],[17,"ZERO_TO_ONE","","",null,null],[17,"STENCIL_BUFFER_BIT","","",null,null],[17,"QUERY_RESULT","","",null,null],[17,"SAMPLER_BUFFER","","",null,null],[17,"POINTS","","",null,null],[17,"TEXTURE29","","",null,null],[17,"CONSTANT_COLOR","","",null,null],[17,"SAMPLE_COVERAGE","","",null,null],[17,"READ_PIXELS_FORMAT","","",null,null],[17,"LEQUAL","","",null,null],[17,"INT_2_10_10_10_REV","","",null,null],[17,"MAX_VARYING_VECTORS","","",null,null],[17,"DOUBLE_VEC2","","",null,null],[17,"FIXED","","",null,null],[17,"RG16","","",null,null],[17,"COLOR_ATTACHMENT22","","",null,null],[17,"VIEW_COMPATIBILITY_CLASS","","",null,null],[17,"UNIFORM_ARRAY_STRIDE","","",null,null],[17,"STENCIL_ATTACHMENT","","",null,null],[17,"IMAGE_2D_ARRAY","","",null,null],[17,"FRONT_AND_BACK","","",null,null],[17,"VERTEX_BINDING_DIVISOR","","",null,null],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",null,null],[17,"PROGRAM_BINARY_LENGTH","","",null,null],[17,"QUERY_COUNTER_BITS","","",null,null],[17,"MAP_FLUSH_EXPLICIT_BIT","","",null,null],[17,"COMPUTE_SHADER_BIT","","",null,null],[17,"SIGNALED","","",null,null],[17,"SUBPIXEL_BITS","","",null,null],[17,"NOR","","",null,null],[17,"TESS_GEN_MODE","","",null,null],[17,"IMAGE_BUFFER","","",null,null],[17,"STENCIL_FUNC","","",null,null],[17,"POLYGON_OFFSET_FILL","","",null,null],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",null,null],[17,"MAX_IMAGE_SAMPLES","","",null,null],[17,"POLYGON_OFFSET_LINE","","",null,null],[17,"INVALID_OPERATION","","",null,null],[17,"NAND","","",null,null],[17,"TEXTURE17","","",null,null],[17,"SYNC_STATUS","","",null,null],[17,"RG16F","","",null,null],[17,"MAX_RECTANGLE_TEXTURE_SIZE","","",null,null],[17,"DRAW_FRAMEBUFFER_BINDING","","",null,null],[17,"RGB5_A1","","",null,null],[17,"INT_IMAGE_2D_ARRAY","","",null,null],[17,"INT","","",null,null],[17,"MAX_CULL_DISTANCES","","",null,null],[17,"ACTIVE_SUBROUTINE_MAX_LENGTH","","",null,null],[17,"MAX_ELEMENTS_INDICES","","",null,null],[17,"MAX_FRAMEBUFFER_LAYERS","","",null,null],[17,"R16_SNORM","","",null,null],[17,"STENCIL_COMPONENTS","","",null,null],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST","","",null,null],[17,"DEPTH_COMPONENT16","","",null,null],[17,"UNSIGNED_INT_SAMPLER_BUFFER","","",null,null],[17,"MIPMAP","","",null,null],[17,"MAX_RENDERBUFFER_SIZE","","",null,null],[17,"UNSIGNED_INT_IMAGE_1D_ARRAY","","",null,null],[17,"ANY_SAMPLES_PASSED","","",null,null],[17,"RGBA32UI","","",null,null],[17,"SAMPLE_BUFFERS","","",null,null],[17,"MAX_FRAGMENT_IMAGE_UNIFORMS","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",null,null],[17,"TEXTURE_SHADOW","","",null,null],[17,"FLOAT_MAT3","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",null,null],[17,"TEXTURE_DEPTH","","",null,null],[17,"TEXTURE_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"R16UI","","",null,null],[17,"MAJOR_VERSION","","",null,null],[17,"MAX_VERTEX_UNIFORM_VECTORS","","",null,null],[17,"UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX","","",null,null],[17,"LINEAR_MIPMAP_NEAREST","","",null,null],[17,"UNSIGNED_SHORT_1_5_5_5_REV","","",null,null],[17,"DEBUG_SEVERITY_MEDIUM","","",null,null],[17,"DEPTH_BUFFER_BIT","","",null,null],[17,"IMAGE_COMPATIBILITY_CLASS","","",null,null],[17,"SAMPLER_BINDING","","",null,null],[17,"UNSIGNALED","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",null,null],[17,"DST_COLOR","","",null,null],[17,"SAMPLER_2D_RECT_SHADOW","","",null,null],[17,"COMPRESSED_SRGB","","",null,null],[17,"LOCATION","","",null,null],[17,"MAX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"TEXTURE11","","",null,null],[17,"UNIFORM_BUFFER_SIZE","","",null,null],[17,"BOOL_VEC2","","",null,null],[17,"BYTE","","",null,null],[17,"SHADER_IMAGE_ATOMIC","","",null,null],[17,"R32F","","",null,null],[17,"TEXTURE19","","",null,null],[17,"STENCIL_INDEX4","","",null,null],[17,"COMPRESSED_RGB8_ETC2","","",null,null],[17,"FRONT_RIGHT","","",null,null],[17,"TYPE","","",null,null],[17,"UNDEFINED_VERTEX","","",null,null],[17,"SHADER_COMPILER","","",null,null],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"DOUBLE_VEC4","","",null,null],[17,"GEOMETRY_SHADER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"GUILTY_CONTEXT_RESET","","",null,null],[17,"MAX_FRAMEBUFFER_SAMPLES","","",null,null],[17,"VERTEX_SUBROUTINE_UNIFORM","","",null,null],[17,"PACK_SKIP_IMAGES","","",null,null],[17,"CLIP_DISTANCE4","","",null,null],[17,"COMPRESSED_RED_RGTC1","","",null,null],[17,"TEXTURE24","","",null,null],[17,"MULTISAMPLE","","",null,null],[17,"INT_SAMPLER_2D","","",null,null],[17,"MAX_DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"STENCIL_INDEX16","","",null,null],[17,"STATIC_COPY","","",null,null],[17,"INDEX","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",null,null],[17,"MEDIUM_INT","","",null,null],[17,"SAMPLER_1D","","",null,null],[17,"UNIFORM_BLOCK_INDEX","","",null,null],[17,"R8_SNORM","","",null,null],[17,"TEXTURE_VIEW_NUM_LEVELS","","",null,null],[17,"COMMAND_BARRIER_BIT","","",null,null],[17,"BGR","","",null,null],[17,"TEXTURE_SWIZZLE_G","","",null,null],[17,"DOUBLE","","",null,null],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","","",null,null],[17,"COLOR_LOGIC_OP","","",null,null],[17,"TRANSFORM_FEEDBACK","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",null,null],[17,"GEOMETRY_SHADER_INVOCATIONS","","",null,null],[17,"SHORT","","",null,null],[17,"TESS_CONTROL_SUBROUTINE","","",null,null],[17,"COMPRESSED_SIGNED_RED_RGTC1","","",null,null],[17,"MAX_COMBINED_CLIP_AND_CULL_DISTANCES","","",null,null],[17,"SIGNED_NORMALIZED","","",null,null],[17,"MAX_TESS_CONTROL_UNIFORM_BLOCKS","","",null,null],[17,"TEXTURE_2D","","",null,null],[17,"MAX_DEBUG_MESSAGE_LENGTH","","",null,null],[17,"COLOR_ATTACHMENT2","","",null,null],[17,"MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS","","",null,null],[17,"QUERY_NO_WAIT","","",null,null],[17,"COMPRESSED_RGBA","","",null,null],[17,"WRITE_ONLY","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_VERTICES","","",null,null],[17,"STACK_UNDERFLOW","","",null,null],[17,"IMAGE_CLASS_1_X_32","","",null,null],[17,"RG32UI","","",null,null],[17,"OUT_OF_MEMORY","","",null,null],[17,"RGB32UI","","",null,null],[17,"NUM_SHADER_BINARY_FORMATS","","",null,null],[17,"LINE_SMOOTH","","",null,null],[17,"NONE","","",null,null],[17,"UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"COMPRESSED_SIGNED_RG_RGTC2","","",null,null],[17,"ELEMENT_ARRAY_BARRIER_BIT","","",null,null],[17,"LINEAR","","",null,null],[17,"INTERNALFORMAT_DEPTH_SIZE","","",null,null],[17,"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","","",null,null],[17,"MAX_DUAL_SOURCE_DRAW_BUFFERS","","",null,null],[17,"TEXTURE12","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"MAX_UNIFORM_LOCATIONS","","",null,null],[17,"TEXTURE_BINDING_BUFFER","","",null,null],[17,"SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_SIZE","","",null,null],[17,"TIMEOUT_EXPIRED","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP","","",null,null],[17,"MAX_TEXTURE_BUFFER_SIZE","","",null,null],[17,"PROGRAM_PIPELINE","","",null,null],[17,"DYNAMIC_READ","","",null,null],[17,"UNSIGNED_INT_VEC2","","",null,null],[17,"SYNC_FLUSH_COMMANDS_BIT","","",null,null],[17,"BLOCK_INDEX","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",null,null],[17,"CULL_FACE_MODE","","",null,null],[17,"NO_ERROR","","",null,null],[17,"STENCIL_BACK_VALUE_MASK","","",null,null],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"CLIENT_MAPPED_BUFFER_BARRIER_BIT","","",null,null],[17,"LAST_VERTEX_CONVENTION","","",null,null],[17,"BUFFER_MAP_POINTER","","",null,null],[17,"PRIMITIVES_GENERATED","","",null,null],[17,"CLEAR_BUFFER","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_PAUSED","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"RGBA16F","","",null,null],[17,"MAX_TESS_EVALUATION_INPUT_COMPONENTS","","",null,null],[17,"COLOR_ATTACHMENT27","","",null,null],[17,"CONTEXT_FLAG_ROBUST_ACCESS_BIT","","",null,null],[17,"PRIMITIVE_RESTART","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",null,null],[17,"VENDOR","","",null,null],[17,"TRIANGLES_ADJACENCY","","",null,null],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",null,null],[17,"RGB9_E5","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",null,null],[17,"VERTEX_BINDING_BUFFER","","",null,null],[17,"UNIFORM_BUFFER_BINDING","","",null,null],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH","","",null,null],[17,"COLOR_CLEAR_VALUE","","",null,null],[17,"FRONT_FACE","","",null,null],[17,"MAX_VERTEX_STREAMS","","",null,null],[17,"MAX_NUM_COMPATIBLE_SUBROUTINES","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",null,null],[17,"IMAGE_PIXEL_FORMAT","","",null,null],[17,"IMAGE_BINDING_LAYER","","",null,null],[17,"MAX_TESS_CONTROL_IMAGE_UNIFORMS","","",null,null],[17,"TEXTURE_VIEW_MIN_LEVEL","","",null,null],[17,"LINE_STRIP","","",null,null],[17,"MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS","","",null,null],[17,"DEPTH_TEST","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4_REV","","",null,null],[17,"INT_IMAGE_1D_ARRAY","","",null,null],[17,"RGB32F","","",null,null],[17,"INT_SAMPLER_CUBE","","",null,null],[17,"PATCHES","","",null,null],[17,"IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","","",null,null],[17,"R16I","","",null,null],[17,"DEPTH_COMPONENT","","",null,null],[17,"LINE_SMOOTH_HINT","","",null,null],[17,"CURRENT_VERTEX_ATTRIB","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",null,null],[17,"COMPILE_STATUS","","",null,null],[17,"FLOAT_MAT2x3","","",null,null],[17,"BACK_RIGHT","","",null,null],[17,"DRAW_BUFFER12","","",null,null],[17,"INTERNALFORMAT_SHARED_SIZE","","",null,null],[17,"R3_G3_B2","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",null,null],[17,"INTERNALFORMAT_ALPHA_TYPE","","",null,null],[17,"SHADER_BINARY_FORMATS","","",null,null],[17,"INT_IMAGE_2D_RECT","","",null,null],[17,"GET_TEXTURE_IMAGE_TYPE","","",null,null],[17,"RENDERBUFFER_STENCIL_SIZE","","",null,null],[17,"RGB10_A2UI","","",null,null],[17,"TRANSFORM_FEEDBACK_ACTIVE","","",null,null],[17,"MAX_TESS_CONTROL_INPUT_COMPONENTS","","",null,null],[17,"TEXTURE_VIEW_MIN_LAYER","","",null,null],[17,"UNIFORM_SIZE","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_DEPTH","","",null,null],[17,"COMPRESSED_SIGNED_R11_EAC","","",null,null],[17,"EXTENSIONS","","",null,null],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"UNIFORM_TYPE","","",null,null],[17,"IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_RED_TYPE","","",null,null],[17,"IMAGE_BINDING_LEVEL","","",null,null],[17,"UNSIGNED_INT_2_10_10_10_REV","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",null,null],[17,"UNSIGNED_INT","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"MAP_UNSYNCHRONIZED_BIT","","",null,null],[17,"MAX_NAME_LENGTH","","",null,null],[17,"DONT_CARE","","",null,null],[17,"QUERY_BUFFER_BARRIER_BIT","","",null,null],[17,"REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"RG8","","",null,null],[17,"SHADER_IMAGE_ACCESS_BARRIER_BIT","","",null,null],[17,"STENCIL_INDEX1","","",null,null],[17,"INT_SAMPLER_1D","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",null,null],[17,"ANY_SAMPLES_PASSED_CONSERVATIVE","","",null,null],[17,"POLYGON_OFFSET_FACTOR","","",null,null],[17,"VIEW_CLASS_S3TC_DXT1_RGBA","","",null,null],[17,"STENCIL_TEST","","",null,null],[17,"POINT_SIZE_GRANULARITY","","",null,null],[17,"DISPLAY_LIST","","",null,null],[17,"SAMPLER_2D_RECT","","",null,null],[17,"SMOOTH_POINT_SIZE_GRANULARITY","","",null,null],[17,"TEXTURE4","","",null,null],[17,"ARRAY_SIZE","","",null,null],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",null,null],[17,"DEBUG_SOURCE_APPLICATION","","",null,null],[17,"VERTEX_TEXTURE","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",null,null],[17,"PROXY_TEXTURE_3D","","",null,null],[17,"RG32I","","",null,null],[17,"MAX_COMBINED_SHADER_STORAGE_BLOCKS","","",null,null],[17,"TEXTURE_RECTANGLE","","",null,null],[17,"MAX_TESS_PATCH_COMPONENTS","","",null,null],[17,"UNSIGNED_SHORT_5_6_5_REV","","",null,null],[17,"NUM_SAMPLE_COUNTS","","",null,null],[17,"SAMPLES","","",null,null],[17,"ACTIVE_RESOURCES","","",null,null],[17,"CLAMP_TO_BORDER","","",null,null],[17,"ALL_BARRIER_BITS","","",null,null],[17,"SHADING_LANGUAGE_VERSION","","",null,null],[17,"DEPTH_CLAMP","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"MAX_VERTEX_ATTRIB_STRIDE","","",null,null],[17,"PIXEL_PACK_BUFFER","","",null,null],[17,"RGB16I","","",null,null],[17,"BLEND","","",null,null],[17,"LINE_LOOP","","",null,null],[17,"TEXTURE22","","",null,null],[17,"COMPRESSED_SRGB8_ETC2","","",null,null],[17,"ALWAYS","","",null,null],[17,"PROXY_TEXTURE_RECTANGLE","","",null,null],[17,"TEXTURE3","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",null,null],[17,"UNSIGNED_BYTE_2_3_3_REV","","",null,null],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",null,null],[17,"POINT_SIZE","","",null,null],[17,"COMPRESSED_RG","","",null,null],[17,"PACK_IMAGE_HEIGHT","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",null,null],[17,"BLEND_SRC_RGB","","",null,null],[17,"SAMPLER_1D_ARRAY","","",null,null],[17,"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT","","",null,null],[17,"VIEWPORT_SUBPIXEL_BITS","","",null,null],[17,"DEBUG_CALLBACK_USER_PARAM","","",null,null],[17,"SRC_ALPHA_SATURATE","","",null,null],[17,"TEXTURE_MAX_ANISOTROPY_EXT","","",null,null],[17,"LOW_FLOAT","","",null,null],[17,"FRACTIONAL_EVEN","","",null,null],[17,"COLOR_ATTACHMENT6","","",null,null],[17,"SAMPLER_2D_ARRAY_SHADOW","","",null,null],[17,"LINE_WIDTH","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT_INVERTED","","",null,null],[17,"MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS","","",null,null],[17,"TEXTURE2","","",null,null],[17,"REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"CONTEXT_FLAGS","","",null,null],[17,"INTERNALFORMAT_DEPTH_TYPE","","",null,null],[17,"OR_REVERSE","","",null,null],[17,"COLOR_ATTACHMENT21","","",null,null],[17,"MAX_TESS_GEN_LEVEL","","",null,null],[17,"QUERY_RESULT_NO_WAIT","","",null,null],[17,"CLIP_DISTANCE2","","",null,null],[17,"CLIP_DEPTH_MODE","","",null,null],[17,"PATCH_DEFAULT_INNER_LEVEL","","",null,null],[17,"FILTER","","",null,null],[17,"MAX_FRAGMENT_INTERPOLATION_OFFSET","","",null,null],[17,"DOUBLE_MAT3","","",null,null],[17,"COLOR_ATTACHMENT12","","",null,null],[17,"ARRAY_STRIDE","","",null,null],[17,"TEXTURE_1D","","",null,null],[17,"SAMPLE_ALPHA_TO_ONE","","",null,null],[17,"TEXTURE20","","",null,null],[17,"LOCATION_INDEX","","",null,null],[17,"DRAW_INDIRECT_BUFFER","","",null,null],[17,"MAX_FRAMEBUFFER_WIDTH","","",null,null],[17,"TEXTURE_BLUE_TYPE","","",null,null],[17,"GEOMETRY_INPUT_TYPE","","",null,null],[17,"TEXTURE31","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",null,null],[17,"LINE_WIDTH_RANGE","","",null,null],[17,"STENCIL_RENDERABLE","","",null,null],[17,"READ_FRAMEBUFFER","","",null,null],[17,"LINES","","",null,null],[17,"CONTEXT_LOST","","",null,null],[17,"INTERNALFORMAT_RED_TYPE","","",null,null],[17,"IMAGE_CLASS_4_X_8","","",null,null],[17,"DOUBLE_MAT3x2","","",null,null],[17,"COLOR_ATTACHMENT11","","",null,null],[17,"UNSIGNED_INT_24_8","","",null,null],[17,"ACTIVE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_INVOCATIONS","","",null,null],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",null,null],[17,"DEPTH24_STENCIL8","","",null,null],[17,"BLEND_DST_ALPHA","","",null,null],[17,"VERTEX_SHADER_BIT","","",null,null],[17,"PROGRAM_POINT_SIZE","","",null,null],[17,"SHADER_IMAGE_STORE","","",null,null],[17,"POLYGON_OFFSET_UNITS","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"RGBA32F","","",null,null],[17,"COLOR_ATTACHMENT13","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",null,null],[17,"TEXTURE0","","",null,null],[17,"RG8_SNORM","","",null,null],[17,"SRC_ALPHA","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"MAX_CLIP_DISTANCES","","",null,null],[17,"TIME_ELAPSED","","",null,null],[17,"IMAGE_BINDING_LAYERED","","",null,null],[17,"POINT_FADE_THRESHOLD_SIZE","","",null,null],[17,"POLYGON_MODE","","",null,null],[17,"VERTEX_SHADER","","",null,null],[17,"RG","","",null,null],[17,"COLOR_ATTACHMENT24","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"FRAGMENT_SUBROUTINE_UNIFORM","","",null,null],[17,"GEOMETRY_SUBROUTINE_UNIFORM","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_FORMAT","","",null,null],[17,"PIXEL_BUFFER_BARRIER_BIT","","",null,null],[17,"DYNAMIC_COPY","","",null,null],[17,"CLAMP_TO_EDGE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",null,null],[17,"PRIMITIVE_RESTART_INDEX","","",null,null],[17,"REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"TEXTURE_WRAP_S","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_LAYERED","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS","","",null,null],[17,"FIRST_VERTEX_CONVENTION","","",null,null],[17,"VIEW_CLASS_32_BITS","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE","","",null,null],[17,"MEDIUM_FLOAT","","",null,null],[17,"TESS_CONTROL_SHADER","","",null,null],[17,"DYNAMIC_STORAGE_BIT","","",null,null],[17,"TEXTURE18","","",null,null],[17,"SMOOTH_LINE_WIDTH_RANGE","","",null,null],[17,"IMAGE_CLASS_2_X_16","","",null,null],[17,"SHADER_STORAGE_BARRIER_BIT","","",null,null],[17,"MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"INFO_LOG_LENGTH","","",null,null],[17,"HIGH_INT","","",null,null],[17,"RGB5","","",null,null],[17,"MATRIX_STRIDE","","",null,null],[17,"TEXTURE23","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"COMPRESSED_RG_RGTC2","","",null,null],[17,"TEXTURE_MAX_LOD","","",null,null],[17,"DRAW_BUFFER1","","",null,null],[17,"RENDERBUFFER_SAMPLES","","",null,null],[17,"DEPTH_COMPONENTS","","",null,null],[17,"EQUAL","","",null,null],[17,"MAP_INVALIDATE_RANGE_BIT","","",null,null],[17,"INCR","","",null,null],[17,"MAX_FRAMEBUFFER_HEIGHT","","",null,null],[17,"SYNC_FLAGS","","",null,null],[17,"MAX_TESS_EVALUATION_UNIFORM_BLOCKS","","",null,null],[17,"FIXED_ONLY","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_LONG","","",null,null],[17,"TRANSFORM_FEEDBACK_PAUSED","","",null,null],[17,"SCISSOR_BOX","","",null,null],[17,"RENDERBUFFER_GREEN_SIZE","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTERS","","",null,null],[17,"BUFFER_STORAGE_FLAGS","","",null,null],[17,"VIEW_CLASS_RGTC2_RG","","",null,null],[17,"DRAW_BUFFER8","","",null,null],[17,"BLUE_INTEGER","","",null,null],[17,"INT_SAMPLER_2D_RECT","","",null,null],[17,"MAX_LABEL_LENGTH","","",null,null],[17,"GEOMETRY_TEXTURE","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"SHADER_STORAGE_BUFFER","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER_BINDING","","",null,null],[17,"DECR_WRAP","","",null,null],[17,"QUERY_RESULT_AVAILABLE","","",null,null],[17,"RG16I","","",null,null],[17,"SYNC_CONDITION","","",null,null],[17,"INT_IMAGE_2D","","",null,null],[17,"COMPRESSED_SRGB_ALPHA","","",null,null],[17,"MAX_COMBINED_SHADER_OUTPUT_RESOURCES","","",null,null],[17,"COLOR_ATTACHMENT9","","",null,null],[17,"AND_INVERTED","","",null,null],[17,"MAX_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"DEBUG_OUTPUT","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_BUFFERS","","",null,null],[17,"INVALID_ENUM","","",null,null],[17,"NUM_PROGRAM_BINARY_FORMATS","","",null,null],[17,"TEXTURE_COMPARE_MODE","","",null,null],[17,"ARRAY_BUFFER","","",null,null],[17,"PACK_SKIP_ROWS","","",null,null],[17,"TEXTURE_RED_SIZE","","",null,null],[17,"COMPRESSED_R11_EAC","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP_ARRAY","","",null,null],[17,"TEXTURE_SWIZZLE_RGBA","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS","","",null,null],[17,"TEXTURE_BINDING_2D","","",null,null],[17,"INTERNALFORMAT_STENCIL_SIZE","","",null,null],[17,"CLIP_ORIGIN","","",null,null],[17,"DEBUG_CALLBACK_FUNCTION","","",null,null],[17,"MAX_VERTEX_ATTRIBS","","",null,null],[17,"IMAGE_CLASS_11_11_10","","",null,null],[17,"INT_IMAGE_1D","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","","",null,null],[17,"FRAMEBUFFER","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE","","",null,null],[17,"COMPRESSED_RGB_BPTC_SIGNED_FLOAT","","",null,null],[17,"DRAW_BUFFER2","","",null,null],[17,"CLIENT_STORAGE_BIT","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",null,null],[17,"TEXTURE_UPDATE_BARRIER_BIT","","",null,null],[17,"MAX_FRAGMENT_SHADER_STORAGE_BLOCKS","","",null,null],[17,"LINES_ADJACENCY","","",null,null],[17,"ACTIVE_UNIFORM_BLOCKS","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"CONTEXT_PROFILE_MASK","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"RGB12","","",null,null],[17,"RGBA_INTEGER","","",null,null],[17,"INTERNALFORMAT_STENCIL_TYPE","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"MIN_SAMPLE_SHADING_VALUE","","",null,null],[17,"MAX_SHADER_STORAGE_BUFFER_BINDINGS","","",null,null],[17,"TIMEOUT_IGNORED","","",null,null],[17,"TEXTURE_CUBE_MAP","","",null,null],[17,"TEXTURE_2D_ARRAY","","",null,null],[17,"DRAW_BUFFER0","","",null,null],[17,"MAX_TEXTURE_MAX_ANISOTROPY_EXT","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_START","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_RECT","","",null,null],[17,"NUM_EXTENSIONS","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTERS","","",null,null],[17,"COMPUTE_TEXTURE","","",null,null],[17,"INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"SEPARATE_ATTRIBS","","",null,null],[17,"STREAM_READ","","",null,null],[17,"MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS","","",null,null],[17,"TESS_CONTROL_SUBROUTINE_UNIFORM","","",null,null],[17,"FUNC_REVERSE_SUBTRACT","","",null,null],[17,"ATOMIC_COUNTER_BARRIER_BIT","","",null,null],[17,"CLEAR_TEXTURE","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"INTERNALFORMAT_SUPPORTED","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_BINDING","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"BUFFER_ACCESS_FLAGS","","",null,null],[17,"MAX_COMPUTE_SHADER_STORAGE_BLOCKS","","",null,null],[17,"VERTEX_PROGRAM_POINT_SIZE","","",null,null],[17,"TEXTURE_COMPARE_FUNC","","",null,null],[17,"DEPTH_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_UNDEFINED","","",null,null],[17,"DOUBLE_MAT4x2","","",null,null],[17,"UNSIGNED_INT_IMAGE_CUBE","","",null,null],[17,"UPPER_LEFT","","",null,null],[17,"COLOR_ATTACHMENT18","","",null,null],[17,"TEXTURE_IMMUTABLE_FORMAT","","",null,null],[17,"POINT","","",null,null],[17,"UNIFORM_BUFFER_START","","",null,null],[17,"LAYER_PROVOKING_VERTEX","","",null,null],[17,"IMAGE_CLASS_1_X_16","","",null,null],[17,"MAX_VARYING_COMPONENTS","","",null,null],[17,"STENCIL_INDEX8","","",null,null],[17,"DEPTH_COMPONENT32","","",null,null],[17,"RENDERBUFFER_HEIGHT","","",null,null],[17,"IMAGE_CLASS_4_X_32","","",null,null],[17,"RG16_SNORM","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_COUNT","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"DRAW_BUFFER9","","",null,null],[17,"COPY_INVERTED","","",null,null],[17,"FRAMEBUFFER_RENDERABLE_LAYERED","","",null,null],[17,"PROGRAM_PIPELINE_BINDING","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_ARRAY","","",null,null],[17,"PROGRAM_OUTPUT","","",null,null],[17,"COMPUTE_SUBROUTINE_UNIFORM","","",null,null],[17,"STENCIL_BACK_FUNC","","",null,null],[17,"MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"STENCIL_BACK_REF","","",null,null],[17,"MAX_TEXTURE_SIZE","","",null,null],[17,"ISOLINES","","",null,null],[17,"DRAW_BUFFER14","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"VIEW_CLASS_BPTC_FLOAT","","",null,null],[17,"UNIFORM_BLOCK_DATA_SIZE","","",null,null],[17,"INT_VEC2","","",null,null],[17,"LINE_STRIP_ADJACENCY","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_INDEX","","",null,null],[17,"UNSIGNED_INT_SAMPLER_3D","","",null,null],[17,"FRAMEBUFFER_DEFAULT_SAMPLES","","",null,null],[17,"SAMPLER_1D_SHADOW","","",null,null],[17,"NO_RESET_NOTIFICATION","","",null,null],[17,"UNKNOWN_CONTEXT_RESET","","",null,null],[17,"COLOR_ATTACHMENT29","","",null,null],[17,"MAX_COMPUTE_SHARED_MEMORY_SIZE","","",null,null],[17,"VIEW_CLASS_24_BITS","","",null,null],[17,"DRAW_BUFFER10","","",null,null],[17,"CULL_FACE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BARRIER_BIT","","",null,null],[17,"BLEND_SRC_ALPHA","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D","","",null,null],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",null,null],[17,"COLOR_ATTACHMENT8","","",null,null],[17,"ONE_MINUS_DST_ALPHA","","",null,null],[17,"PROXY_TEXTURE_1D","","",null,null],[17,"TESS_EVALUATION_SHADER_BIT","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_TYPE","","",null,null],[17,"FLOAT_VEC2","","",null,null],[17,"RENDERBUFFER_WIDTH","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fnptr"}}],[11,"is_loaded","","Returns `true` if the function has been successfully loaded.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gl"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",0,{"inputs":[{"name":"f"}],"output":{"name":"gl"}}],[11,"IsSampler","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"MultiTexCoordP1uiv","","",0,null],[11,"GetVertexAttribIiv","","",0,null],[11,"VertexArrayAttribBinding","","",0,null],[11,"Uniform2ui","","",0,null],[11,"GetProgramResourceLocation","","",0,null],[11,"TexSubImage3D","","",0,null],[11,"CopyTexSubImage1D","","",0,null],[11,"BeginTransformFeedback","","",0,null],[11,"EndTransformFeedback","","",0,null],[11,"BufferData","","",0,null],[11,"ColorP4ui","","",0,null],[11,"TextureStorage2DMultisample","","",0,null],[11,"GetProgramStageiv","","",0,null],[11,"Uniform3dv","","",0,null],[11,"PointParameterfv","","",0,null],[11,"GetBufferPointerv","","",0,null],[11,"VertexAttrib4Nub","","",0,null],[11,"ClearTexImage","","",0,null],[11,"CreateQueries","","",0,null],[11,"GetnConvolutionFilter","","",0,null],[11,"CreateRenderbuffers","","",0,null],[11,"GetProgramResourceName","","",0,null],[11,"GetVertexAttribiv","","",0,null],[11,"Uniform4dv","","",0,null],[11,"Uniform4fv","","",0,null],[11,"UseProgramStages","","",0,null],[11,"VertexAttribI2ui","","",0,null],[11,"VertexAttrib1d","","",0,null],[11,"TransformFeedbackBufferBase","","",0,null],[11,"GetTexImage","","",0,null],[11,"ProgramUniform4uiv","","",0,null],[11,"VertexAttribI3i","","",0,null],[11,"FlushMappedBufferRange","","",0,null],[11,"VertexAttribI2iv","","",0,null],[11,"Uniform1d","","",0,null],[11,"CompressedTexImage2D","","",0,null],[11,"BlendColor","","",0,null],[11,"NamedFramebufferTextureLayer","","",0,null],[11,"ClearBufferSubData","","",0,null],[11,"BlitNamedFramebuffer","","",0,null],[11,"Uniform2i","","",0,null],[11,"FramebufferRenderbuffer","","",0,null],[11,"VertexAttrib4Nbv","","",0,null],[11,"GetProgramBinary","","",0,null],[11,"UniformMatrix2x3fv","","",0,null],[11,"GetCompressedTextureImage","","",0,null],[11,"ProgramUniform2ui","","",0,null],[11,"ProgramParameteri","","",0,null],[11,"VertexAttrib2d","","",0,null],[11,"GetNamedRenderbufferParameteriv","","",0,null],[11,"GenRenderbuffers","","",0,null],[11,"EndConditionalRender","","",0,null],[11,"DrawArrays","","",0,null],[11,"UniformMatrix3x2fv","","",0,null],[11,"Viewport","","",0,null],[11,"GetFramebufferParameteriv","","",0,null],[11,"ProgramUniform1i","","",0,null],[11,"ProgramUniformMatrix3fv","","",0,null],[11,"ScissorArrayv","","",0,null],[11,"UnmapBuffer","","",0,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"VertexAttrib4Nsv","","",0,null],[11,"CopyTextureSubImage3D","","",0,null],[11,"ProgramUniform1ui","","",0,null],[11,"SamplerParameteriv","","",0,null],[11,"SamplerParameteri","","",0,null],[11,"CompileShader","","",0,null],[11,"GetUniformiv","","",0,null],[11,"TexParameterf","","",0,null],[11,"CompressedTextureSubImage1D","","",0,null],[11,"BindAttribLocation","","",0,null],[11,"CreateShaderProgramv","","",0,null],[11,"BlendFunciARB","","",0,null],[11,"Uniform4i","","",0,null],[11,"GetTextureImage","","",0,null],[11,"CompressedTextureSubImage3D","","",0,null],[11,"BindFragDataLocation","","",0,null],[11,"MultiDrawElements","","",0,null],[11,"ActiveShaderProgram","","",0,null],[11,"VertexAttribPointer","","",0,null],[11,"Uniform4d","","",0,null],[11,"BindBuffersRange","","",0,null],[11,"GetBufferSubData","","",0,null],[11,"VertexP3ui","","",0,null],[11,"GetActiveUniformName","","",0,null],[11,"Finish","","",0,null],[11,"GetQueryIndexediv","","",0,null],[11,"Uniform2uiv","","",0,null],[11,"LinkProgram","","",0,null],[11,"GetnPixelMapusv","","",0,null],[11,"FramebufferParameteri","","",0,null],[11,"VertexP2ui","","",0,null],[11,"GetnPixelMapuiv","","",0,null],[11,"GetProgramResourceIndex","","",0,null],[11,"ProgramUniform2fv","","",0,null],[11,"ProgramUniform2uiv","","",0,null],[11,"VertexP3uiv","","",0,null],[11,"GetnHistogram","","",0,null],[11,"DebugMessageCallback","","",0,null],[11,"GetObjectPtrLabel","","",0,null],[11,"UnmapNamedBuffer","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"GenerateTextureMipmap","","",0,null],[11,"VertexAttribP3ui","","",0,null],[11,"GenProgramPipelines","","",0,null],[11,"VertexAttrib3f","","",0,null],[11,"EndQueryIndexed","","",0,null],[11,"NormalP3ui","","",0,null],[11,"NamedFramebufferDrawBuffers","","",0,null],[11,"TextureStorage1D","","",0,null],[11,"TexSubImage1D","","",0,null],[11,"GetError","","",0,{"inputs":[{"name":"self"}],"output":{"name":"glenum"}}],[11,"CopyTexSubImage2D","","",0,null],[11,"ClearNamedFramebufferiv","","",0,null],[11,"BindBufferRange","","",0,null],[11,"InvalidateNamedFramebufferSubData","","",0,null],[11,"ReleaseShaderCompiler","","",0,null],[11,"ClearDepthf","","",0,null],[11,"DrawElementsIndirect","","",0,null],[11,"DrawTransformFeedbackStreamInstanced","","",0,null],[11,"BeginQueryIndexed","","",0,null],[11,"SecondaryColorP3uiv","","",0,null],[11,"GetQueryBufferObjecti64v","","",0,null],[11,"DrawElementsInstancedBaseVertexBaseInstance","","",0,null],[11,"ClearNamedFramebufferfv","","",0,null],[11,"BindTransformFeedback","","",0,null],[11,"LogicOp","","",0,null],[11,"TexImage3D","","",0,null],[11,"GetnColorTable","","",0,null],[11,"UniformMatrix3x4fv","","",0,null],[11,"StencilMask","","",0,null],[11,"VertexAttribL1dv","","",0,null],[11,"GetVertexAttribLdv","","",0,null],[11,"ColorMaski","","",0,null],[11,"GetVertexArrayIndexediv","","",0,null],[11,"GetNamedFramebufferParameteriv","","",0,null],[11,"Uniform1dv","","",0,null],[11,"TexBufferRange","","",0,null],[11,"GetnMapiv","","",0,null],[11,"NamedFramebufferRenderbuffer","","",0,null],[11,"DispatchCompute","","",0,null],[11,"GetInteger64i_v","","",0,null],[11,"UniformMatrix4x2dv","","",0,null],[11,"VertexP4uiv","","",0,null],[11,"ProgramUniform2i","","",0,null],[11,"FramebufferTexture1D","","",0,null],[11,"EndQuery","","",0,null],[11,"GetDoublei_v","","",0,null],[11,"InvalidateFramebuffer","","",0,null],[11,"ClearBufferfv","","",0,null],[11,"GetnMapdv","","",0,null],[11,"BlendEquationiARB","","",0,null],[11,"ProgramUniformMatrix4x2fv","","",0,null],[11,"StencilMaskSeparate","","",0,null],[11,"GetProgramResourceiv","","",0,null],[11,"GetTransformFeedbackVarying","","",0,null],[11,"GetTextureLevelParameterfv","","",0,null],[11,"GetnPixelMapfv","","",0,null],[11,"IsTransformFeedback","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"FrontFace","","",0,null],[11,"GetActiveSubroutineName","","",0,null],[11,"GetRenderbufferParameteriv","","",0,null],[11,"VertexAttrib1f","","",0,null],[11,"ClearDepth","","",0,null],[11,"VertexAttrib2sv","","",0,null],[11,"WaitSync","","",0,null],[11,"VertexArrayBindingDivisor","","",0,null],[11,"ClearNamedFramebufferfi","","",0,null],[11,"ClipControl","","",0,null],[11,"DepthRangeIndexed","","",0,null],[11,"InvalidateTexImage","","",0,null],[11,"VertexArrayAttribIFormat","","",0,null],[11,"TexImage2D","","",0,null],[11,"VertexAttrib4Nubv","","",0,null],[11,"GetTextureParameterIuiv","","",0,null],[11,"UniformMatrix2x3dv","","",0,null],[11,"ProgramUniformMatrix2dv","","",0,null],[11,"VertexAttribL3d","","",0,null],[11,"ProgramUniformMatrix4fv","","",0,null],[11,"GetBufferParameteri64v","","",0,null],[11,"VertexAttrib3sv","","",0,null],[11,"TextureParameterfv","","",0,null],[11,"VertexAttribL4dv","","",0,null],[11,"GetQueryBufferObjectuiv","","",0,null],[11,"InvalidateBufferData","","",0,null],[11,"MapBuffer","","",0,null],[11,"SamplerParameterIiv","","",0,null],[11,"ClearBufferuiv","","",0,null],[11,"DispatchComputeIndirect","","",0,null],[11,"VertexAttribBinding","","",0,null],[11,"VertexAttrib1fv","","",0,null],[11,"VertexAttrib4bv","","",0,null],[11,"TextureView","","",0,null],[11,"VertexAttrib2f","","",0,null],[11,"MultiDrawElementsBaseVertex","","",0,null],[11,"ProgramUniform2dv","","",0,null],[11,"TextureParameteri","","",0,null],[11,"Uniform3f","","",0,null],[11,"ProgramUniformMatrix4x3fv","","",0,null],[11,"UniformMatrix4fv","","",0,null],[11,"GetMultisamplefv","","",0,null],[11,"DeleteVertexArrays","","",0,null],[11,"GenerateMipmap","","",0,null],[11,"DeleteProgramPipelines","","",0,null],[11,"BindTextureUnit","","",0,null],[11,"SamplerParameterIuiv","","",0,null],[11,"DeleteShader","","",0,null],[11,"VertexAttrib4d","","",0,null],[11,"ProgramUniformMatrix3x2dv","","",0,null],[11,"TexParameterIuiv","","",0,null],[11,"ClearTexSubImage","","",0,null],[11,"DeleteBuffers","","",0,null],[11,"ProgramUniform1f","","",0,null],[11,"FenceSync","","",0,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[11,"DisableVertexArrayAttrib","","",0,null],[11,"VertexAttrib4dv","","",0,null],[11,"VertexAttribL3dv","","",0,null],[11,"GetActiveSubroutineUniformiv","","",0,null],[11,"TexImage2DMultisample","","",0,null],[11,"TexStorage1D","","",0,null],[11,"ProgramUniform4fv","","",0,null],[11,"Disablei","","",0,null],[11,"TextureBufferRange","","",0,null],[11,"SamplerParameterfv","","",0,null],[11,"ProgramUniformMatrix3x4fv","","",0,null],[11,"GenVertexArrays","","",0,null],[11,"GetPointerv","","",0,null],[11,"SampleCoverage","","",0,null],[11,"ProgramUniform1uiv","","",0,null],[11,"DepthRange","","",0,null],[11,"CreateBuffers","","",0,null],[11,"VertexAttribP2uiv","","",0,null],[11,"IsQuery","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"ActiveTexture","","",0,null],[11,"GetTextureLevelParameteriv","","",0,null],[11,"NamedFramebufferReadBuffer","","",0,null],[11,"TexBuffer","","",0,null],[11,"CullFace","","",0,null],[11,"VertexP4ui","","",0,null],[11,"TexStorage3D","","",0,null],[11,"GetProgramiv","","",0,null],[11,"Clear","","",0,null],[11,"DrawElementsInstancedBaseVertex","","",0,null],[11,"TextureParameterIiv","","",0,null],[11,"ViewportArrayv","","",0,null],[11,"ProgramUniformMatrix4x3dv","","",0,null],[11,"UniformSubroutinesuiv","","",0,null],[11,"GetActiveUniformBlockName","","",0,null],[11,"Enablei","","",0,null],[11,"CompressedTexSubImage2D","","",0,null],[11,"ProgramUniform4d","","",0,null],[11,"VertexAttrib4ubv","","",0,null],[11,"StencilFuncSeparate","","",0,null],[11,"ColorP3uiv","","",0,null],[11,"CopyTexImage2D","","",0,null],[11,"TransformFeedbackVaryings","","",0,null],[11,"DrawRangeElementsBaseVertex","","",0,null],[11,"VertexAttribI1iv","","",0,null],[11,"CreateShader","","",0,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"gluint"}}],[11,"GetInteger64v","","",0,null],[11,"VertexAttrib3s","","",0,null],[11,"IsVertexArray","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"IsEnabled","","",0,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"ProgramUniformMatrix2x3fv","","",0,null],[11,"BindVertexBuffer","","",0,null],[11,"VertexAttribI4ui","","",0,null],[11,"TexCoordP4ui","","",0,null],[11,"GetDebugMessageLog","","",0,null],[11,"GetVertexAttribdv","","",0,null],[11,"VertexAttribI1i","","",0,null],[11,"PolygonOffset","","",0,null],[11,"BindFragDataLocationIndexed","","",0,null],[11,"ValidateProgram","","",0,null],[11,"PolygonMode","","",0,null],[11,"ProgramUniformMatrix4dv","","",0,null],[11,"GetInternalformativ","","",0,null],[11,"GetTexParameterIuiv","","",0,null],[11,"ClearNamedBufferSubData","","",0,null],[11,"ClearNamedFramebufferuiv","","",0,null],[11,"PushDebugGroup","","",0,null],[11,"GetSamplerParameterIiv","","",0,null],[11,"InvalidateTexSubImage","","",0,null],[11,"Uniform3fv","","",0,null],[11,"MinSampleShading","","",0,null],[11,"VertexArrayAttribFormat","","",0,null],[11,"GetBooleani_v","","",0,null],[11,"GetActiveUniformBlockiv","","",0,null],[11,"DeleteQueries","","",0,null],[11,"VertexP2uiv","","",0,null],[11,"MultiTexCoordP4ui","","",0,null],[11,"IsRenderbuffer","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"TexSubImage2D","","",0,null],[11,"UniformMatrix4x3fv","","",0,null],[11,"VertexAttribP4uiv","","",0,null],[11,"VertexAttribI2uiv","","",0,null],[11,"GetTransformFeedbackiv","","",0,null],[11,"BeginConditionalRender","","",0,null],[11,"ProgramUniformMatrix2x4fv","","",0,null],[11,"GetAttribLocation","","",0,null],[11,"ProgramUniform1d","","",0,null],[11,"DepthFunc","","",0,null],[11,"GetShaderPrecisionFormat","","",0,null],[11,"MultiTexCoordP2uiv","","",0,null],[11,"BeginQuery","","",0,null],[11,"UniformMatrix3dv","","",0,null],[11,"GetCompressedTexImage","","",0,null],[11,"GetProgramInterfaceiv","","",0,null],[11,"TexParameteri","","",0,null],[11,"ProgramUniform4iv","","",0,null],[11,"ProgramUniform3ui","","",0,null],[11,"VertexAttribIFormat","","",0,null],[11,"GetQueryObjectiv","","",0,null],[11,"ProgramUniform4dv","","",0,null],[11,"UniformBlockBinding","","",0,null],[11,"BlendEquationSeparatei","","",0,null],[11,"CheckFramebufferStatus","","",0,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glenum"}}],[11,"UniformMatrix4x2fv","","",0,null],[11,"CompressedTexImage3D","","",0,null],[11,"VertexAttribP2ui","","",0,null],[11,"PauseTransformFeedback","","",0,null],[11,"GetDoublev","","",0,null],[11,"VertexAttribL2d","","",0,null],[11,"VertexAttrib2dv","","",0,null],[11,"VertexBindingDivisor","","",0,null],[11,"TexCoordP4uiv","","",0,null],[11,"BindBuffer","","",0,null],[11,"VertexAttrib1s","","",0,null],[11,"ProgramUniform2d","","",0,null],[11,"ProgramUniformMatrix3x4dv","","",0,null],[11,"GetNamedBufferPointerv","","",0,null],[11,"BlendFuncSeparate","","",0,null],[11,"VertexAttribI4iv","","",0,null],[11,"VertexAttribL4d","","",0,null],[11,"UniformMatrix2dv","","",0,null],[11,"TexCoordP2uiv","","",0,null],[11,"GetIntegeri_v","","",0,null],[11,"ShaderStorageBlockBinding","","",0,null],[11,"VertexAttrib4s","","",0,null],[11,"ProgramUniformMatrix3x2fv","","",0,null],[11,"GetSubroutineUniformLocation","","",0,null],[11,"GetQueryObjectuiv","","",0,null],[11,"VertexAttribI3ui","","",0,null],[11,"GetTexParameterfv","","",0,null],[11,"GetTextureParameteriv","","",0,null],[11,"TexParameteriv","","",0,null],[11,"CopyTextureSubImage1D","","",0,null],[11,"BufferSubData","","",0,null],[11,"TextureSubImage1D","","",0,null],[11,"RenderbufferStorage","","",0,null],[11,"DeleteFramebuffers","","",0,null],[11,"VertexAttrib3d","","",0,null],[11,"VertexAttribI4ubv","","",0,null],[11,"GenBuffers","","",0,null],[11,"GetnUniformiv","","",0,null],[11,"TextureParameterIuiv","","",0,null],[11,"RenderbufferStorageMultisample","","",0,null],[11,"VertexArrayAttribLFormat","","",0,null],[11,"VertexAttribLFormat","","",0,null],[11,"VertexAttrib4Nuiv","","",0,null],[11,"DeleteProgram","","",0,null],[11,"GetTextureSubImage","","",0,null],[11,"GetNamedBufferSubData","","",0,null],[11,"ObjectLabel","","",0,null],[11,"Uniform1iv","","",0,null],[11,"LineWidth","","",0,null],[11,"PointParameterf","","",0,null],[11,"GetUniformLocation","","",0,null],[11,"UniformMatrix3fv","","",0,null],[11,"VertexAttrib4Niv","","",0,null],[11,"GetnUniformfv","","",0,null],[11,"DepthRangef","","",0,null],[11,"NamedBufferSubData","","",0,null],[11,"BindVertexArray","","",0,null],[11,"TextureSubImage3D","","",0,null],[11,"Uniform3d","","",0,null],[11,"VertexArrayVertexBuffers","","",0,null],[11,"CreateVertexArrays","","",0,null],[11,"ProgramUniform4i","","",0,null],[11,"TextureStorage3DMultisample","","",0,null],[11,"GetActiveAtomicCounterBufferiv","","",0,null],[11,"GetUniformBlockIndex","","",0,null],[11,"GetTexLevelParameterfv","","",0,null],[11,"ProgramUniformMatrix4x2dv","","",0,null],[11,"MultiTexCoordP2ui","","",0,null],[11,"GetUniformIndices","","",0,null],[11,"TexParameterfv","","",0,null],[11,"GetActiveUniformsiv","","",0,null],[11,"ClientWaitSync","","",0,{"inputs":[{"name":"self"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":{"name":"glenum"}}],[11,"GetSamplerParameteriv","","",0,null],[11,"FramebufferTexture3D","","",0,null],[11,"CopyTextureSubImage2D","","",0,null],[11,"DrawElementsBaseVertex","","",0,null],[11,"NamedBufferData","","",0,null],[11,"TextureSubImage2D","","",0,null],[11,"DrawBuffer","","",0,null],[11,"ColorMask","","",0,null],[11,"UniformMatrix4dv","","",0,null],[11,"DeleteSamplers","","",0,null],[11,"IsShader","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"ProgramUniform3f","","",0,null],[11,"UseProgram","","",0,null],[11,"VertexAttrib4iv","","",0,null],[11,"VertexAttribI4sv","","",0,null],[11,"VertexAttrib4f","","",0,null],[11,"Enable","","",0,null],[11,"TexImage1D","","",0,null],[11,"VertexAttribI4bv","","",0,null],[11,"VertexAttrib4usv","","",0,null],[11,"GetSynciv","","",0,null],[11,"BindVertexBuffers","","",0,null],[11,"VertexAttrib1dv","","",0,null],[11,"VertexAttrib4uiv","","",0,null],[11,"GenSamplers","","",0,null],[11,"VertexAttrib2fv","","",0,null],[11,"ScissorIndexedv","","",0,null],[11,"BindImageTextures","","",0,null],[11,"PatchParameteri","","",0,null],[11,"DrawRangeElements","","",0,null],[11,"BindTextures","","",0,null],[11,"TextureParameterf","","",0,null],[11,"BindSamplers","","",0,null],[11,"UniformMatrix2x4fv","","",0,null],[11,"CreateProgramPipelines","","",0,null],[11,"PointParameteriv","","",0,null],[11,"GetUniformuiv","","",0,null],[11,"GenQueries","","",0,null],[11,"QueryCounter","","",0,null],[11,"TransformFeedbackBufferRange","","",0,null],[11,"AttachShader","","",0,null],[11,"MapNamedBufferRange","","",0,null],[11,"GetSamplerParameterfv","","",0,null],[11,"ViewportIndexedfv","","",0,null],[11,"ViewportIndexedf","","",0,null],[11,"Flush","","",0,null],[11,"Uniform3uiv","","",0,null],[11,"GetQueryObjecti64v","","",0,null],[11,"ProgramUniform1fv","","",0,null],[11,"Hint","","",0,null],[11,"Uniform2f","","",0,null],[11,"InvalidateBufferSubData","","",0,null],[11,"DrawElementsInstanced","","",0,null],[11,"ProgramUniformMatrix2x3dv","","",0,null],[11,"Uniform1fv","","",0,null],[11,"DrawArraysInstancedBaseInstance","","",0,null],[11,"ProgramUniform3d","","",0,null],[11,"VertexAttrib4sv","","",0,null],[11,"GetActiveUniform","","",0,null],[11,"InvalidateSubFramebuffer","","",0,null],[11,"GenFramebuffers","","",0,null],[11,"Uniform2d","","",0,null],[11,"VertexAttribP1ui","","",0,null],[11,"TexStorage2D","","",0,null],[11,"Uniform1i","","",0,null],[11,"ProgramUniformMatrix3dv","","",0,null],[11,"BindBufferBase","","",0,null],[11,"VertexArrayVertexBuffer","","",0,null],[11,"TextureBarrier","","",0,null],[11,"GetTexLevelParameteriv","","",0,null],[11,"CompressedTextureSubImage2D","","",0,null],[11,"Uniform3ui","","",0,null],[11,"VertexAttribP3uiv","","",0,null],[11,"GetBooleanv","","",0,null],[11,"GetVertexArrayiv","","",0,null],[11,"GetNamedBufferParameteriv","","",0,null],[11,"ClearBufferiv","","",0,null],[11,"ReadPixels","","",0,null],[11,"PopDebugGroup","","",0,null],[11,"GetQueryObjectui64v","","",0,null],[11,"CreateFramebuffers","","",0,null],[11,"VertexAttrib2s","","",0,null],[11,"BlendFunci","","",0,null],[11,"MultiTexCoordP1ui","","",0,null],[11,"GetUniformdv","","",0,null],[11,"NamedRenderbufferStorage","","",0,null],[11,"VertexAttribI4usv","","",0,null],[11,"VertexAttribI1uiv","","",0,null],[11,"CopyNamedBufferSubData","","",0,null],[11,"TexCoordP1uiv","","",0,null],[11,"StencilOpSeparate","","",0,null],[11,"VertexAttribP4ui","","",0,null],[11,"DeleteTransformFeedbacks","","",0,null],[11,"MultiTexCoordP3ui","","",0,null],[11,"BlendEquationSeparate","","",0,null],[11,"BlendEquation","","",0,null],[11,"DebugMessageInsert","","",0,null],[11,"BlendFuncSeparatei","","",0,null],[11,"VertexAttribIPointer","","",0,null],[11,"BindSampler","","",0,null],[11,"VertexAttribP1uiv","","",0,null],[11,"IsEnabledi","","",0,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"MultiDrawArrays","","",0,null],[11,"GetnUniformdv","","",0,null],[11,"MapNamedBuffer","","",0,null],[11,"GetnCompressedTexImage","","",0,null],[11,"GetSubroutineIndex","","",0,null],[11,"VertexAttribI3iv","","",0,null],[11,"CreateTextures","","",0,null],[11,"SamplerParameterf","","",0,null],[11,"InvalidateNamedFramebufferData","","",0,null],[11,"ProgramUniform4f","","",0,null],[11,"VertexAttrib4fv","","",0,null],[11,"DisableVertexAttribArray","","",0,null],[11,"ClampColor","","",0,null],[11,"ResumeTransformFeedback","","",0,null],[11,"GenTextures","","",0,null],[11,"ColorP4uiv","","",0,null],[11,"CompressedTexSubImage3D","","",0,null],[11,"DebugMessageControl","","",0,null],[11,"GetBufferParameteriv","","",0,null],[11,"GetQueryBufferObjectui64v","","",0,null],[11,"PointSize","","",0,null],[11,"VertexArrayElementBuffer","","",0,null],[11,"ProgramUniform3iv","","",0,null],[11,"UniformMatrix3x4dv","","",0,null],[11,"VertexAttribI4uiv","","",0,null],[11,"Disable","","",0,null],[11,"GetVertexAttribfv","","",0,null],[11,"GetShaderInfoLog","","",0,null],[11,"BlendEquationSeparateiARB","","",0,null],[11,"Uniform4f","","",0,null],[11,"VertexAttribLPointer","","",0,null],[11,"CreateTransformFeedbacks","","",0,null],[11,"Uniform1f","","",0,null],[11,"Uniform4ui","","",0,null],[11,"GetnPolygonStipple","","",0,null],[11,"IsTexture","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"VertexAttribDivisor","","",0,null],[11,"DrawArraysIndirect","","",0,null],[11,"CopyTexImage1D","","",0,null],[11,"GetShaderiv","","",0,null],[11,"CopyTexSubImage3D","","",0,null],[11,"GetFramebufferAttachmentParameteriv","","",0,null],[11,"GetProgramPipelineiv","","",0,null],[11,"PointParameteri","","",0,null],[11,"TexCoordP2ui","","",0,null],[11,"GetStringi","","",0,null],[11,"ClearBufferData","","",0,null],[11,"CompressedTexImage1D","","",0,null],[11,"BindProgramPipeline","","",0,null],[11,"ProgramUniform3fv","","",0,null],[11,"CreateProgram","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gluint"}}],[11,"GetActiveSubroutineUniformName","","",0,null],[11,"GetQueryBufferObjectiv","","",0,null],[11,"IsSync","","",0,{"inputs":[{"name":"self"},{"name":"glsync"}],"output":{"name":"glboolean"}}],[11,"PixelStoref","","",0,null],[11,"GetFragDataLocation","","",0,null],[11,"EnableVertexAttribArray","","",0,null],[11,"DrawTransformFeedback","","",0,null],[11,"GetUniformfv","","",0,null],[11,"ProgramUniformMatrix2fv","","",0,null],[11,"GetQueryiv","","",0,null],[11,"DeleteRenderbuffers","","",0,null],[11,"UniformMatrix3x2dv","","",0,null],[11,"PixelStorei","","",0,null],[11,"ClearColor","","",0,null],[11,"MemoryBarrierByRegion","","",0,null],[11,"Uniform1ui","","",0,null],[11,"GetTransformFeedbacki_v","","",0,null],[11,"TexCoordP3uiv","","",0,null],[11,"ClearNamedBufferData","","",0,null],[11,"TexStorage2DMultisample","","",0,null],[11,"GetUniformSubroutineuiv","","",0,null],[11,"Uniform2fv","","",0,null],[11,"Uniform2dv","","",0,null],[11,"Uniform3iv","","",0,null],[11,"ReadnPixels","","",0,null],[11,"DepthMask","","",0,null],[11,"SampleMaski","","",0,null],[11,"Uniform4uiv","","",0,null],[11,"NamedFramebufferDrawBuffer","","",0,null],[11,"EnableVertexArrayAttrib","","",0,null],[11,"BlendFunc","","",0,null],[11,"ProgramUniform1dv","","",0,null],[11,"BufferStorage","","",0,null],[11,"DrawArraysInstanced","","",0,null],[11,"Uniform3i","","",0,null],[11,"GetTransformFeedbacki64_v","","",0,null],[11,"ReadBuffer","","",0,null],[11,"VertexAttribI1ui","","",0,null],[11,"StencilFunc","","",0,null],[11,"BindBuffersBase","","",0,null],[11,"BindFramebuffer","","",0,null],[11,"GetString","","",0,null],[11,"TexStorage3DMultisample","","",0,null],[11,"GetAttachedShaders","","",0,null],[11,"TexParameterIiv","","",0,null],[11,"DrawElementsInstancedBaseInstance","","",0,null],[11,"GetnMinmax","","",0,null],[11,"IsFramebuffer","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"NamedFramebufferParameteri","","",0,null],[11,"DrawElements","","",0,null],[11,"PrimitiveRestartIndex","","",0,null],[11,"GetnSeparableFilter","","",0,null],[11,"MultiDrawElementsIndirect","","",0,null],[11,"SecondaryColorP3ui","","",0,null],[11,"PatchParameterfv","","",0,null],[11,"GetGraphicsResetStatus","","",0,{"inputs":[{"name":"self"}],"output":{"name":"glenum"}}],[11,"ProgramUniform3dv","","",0,null],[11,"TextureParameteriv","","",0,null],[11,"DrawTransformFeedbackInstanced","","",0,null],[11,"GetnTexImage","","",0,null],[11,"TextureStorage3D","","",0,null],[11,"ValidateProgramPipeline","","",0,null],[11,"Uniform1uiv","","",0,null],[11,"IsBuffer","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"GetnMapfv","","",0,null],[11,"GetTexParameteriv","","",0,null],[11,"ProgramUniform3uiv","","",0,null],[11,"FramebufferTexture2D","","",0,null],[11,"VertexAttribI3uiv","","",0,null],[11,"Uniform2iv","","",0,null],[11,"GetTexParameterIiv","","",0,null],[11,"VertexAttrib1sv","","",0,null],[11,"DrawBuffers","","",0,null],[11,"ProgramUniformMatrix2x4dv","","",0,null],[11,"GetProgramPipelineInfoLog","","",0,null],[11,"ProgramUniform2iv","","",0,null],[11,"StencilOp","","",0,null],[11,"ShaderSource","","",0,null],[11,"TexCoordP3ui","","",0,null],[11,"VertexAttribI4i","","",0,null],[11,"GetCompressedTextureSubImage","","",0,null],[11,"GetProgramInfoLog","","",0,null],[11,"VertexAttribL2dv","","",0,null],[11,"TextureStorage2D","","",0,null],[11,"GetVertexAttribIuiv","","",0,null],[11,"ProgramUniform3i","","",0,null],[11,"MultiTexCoordP3uiv","","",0,null],[11,"CopyImageSubData","","",0,null],[11,"GetNamedBufferParameteri64v","","",0,null],[11,"CompressedTexSubImage1D","","",0,null],[11,"GetFragDataIndex","","",0,null],[11,"BindTexture","","",0,null],[11,"UniformMatrix2fv","","",0,null],[11,"GetShaderSource","","",0,null],[11,"GetnUniformuiv","","",0,null],[11,"ClearStencil","","",0,null],[11,"ObjectPtrLabel","","",0,null],[11,"NamedFramebufferTexture","","",0,null],[11,"DeleteSync","","",0,null],[11,"NamedRenderbufferStorageMultisample","","",0,null],[11,"NormalP3uiv","","",0,null],[11,"NamedBufferStorage","","",0,null],[11,"CheckNamedFramebufferStatus","","",0,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glenum"}}],[11,"ScissorIndexed","","",0,null],[11,"BindImageTexture","","",0,null],[11,"GetProgramResourceLocationIndex","","",0,null],[11,"VertexAttrib4Nusv","","",0,null],[11,"GetFloatv","","",0,null],[11,"ProvokingVertex","","",0,null],[11,"BlendEquationi","","",0,null],[11,"TextureBuffer","","",0,null],[11,"GetIntegerv","","",0,null],[11,"MultiDrawArraysIndirect","","",0,null],[11,"GetTextureParameterfv","","",0,null],[11,"DetachShader","","",0,null],[11,"Uniform4iv","","",0,null],[11,"VertexAttrib3fv","","",0,null],[11,"DeleteTextures","","",0,null],[11,"DrawTransformFeedbackStream","","",0,null],[11,"IsProgram","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"GetVertexArrayIndexed64iv","","",0,null],[11,"GetObjectLabel","","",0,null],[11,"VertexAttribFormat","","",0,null],[11,"FlushMappedNamedBufferRange","","",0,null],[11,"GetInternalformati64v","","",0,null],[11,"GetNamedFramebufferAttachmentParameteriv","","",0,null],[11,"GetVertexAttribPointerv","","",0,null],[11,"VertexAttrib3dv","","",0,null],[11,"ClearBufferfi","","",0,null],[11,"BindRenderbuffer","","",0,null],[11,"TexCoordP1ui","","",0,null],[11,"UniformMatrix4x3dv","","",0,null],[11,"GenTransformFeedbacks","","",0,null],[11,"VertexAttribI2i","","",0,null],[11,"MemoryBarrier","","",0,null],[11,"IsProgramPipeline","","",0,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"ColorP3ui","","",0,null],[11,"GetSamplerParameterIuiv","","",0,null],[11,"ProgramBinary","","",0,null],[11,"CopyBufferSubData","","",0,null],[11,"Scissor","","",0,null],[11,"MapBufferRange","","",0,null],[11,"CreateSamplers","","",0,null],[11,"FramebufferTextureLayer","","",0,null],[11,"FramebufferTexture","","",0,null],[11,"DepthRangeArrayv","","",0,null],[11,"BlitFramebuffer","","",0,null],[11,"VertexAttribL1d","","",0,null],[11,"GetFloati_v","","",0,null],[11,"GetTextureParameterIiv","","",0,null],[11,"UniformMatrix2x4dv","","",0,null],[11,"BlendFuncSeparateiARB","","",0,null],[11,"ProgramUniform1iv","","",0,null],[11,"MultiTexCoordP4uiv","","",0,null],[11,"GetActiveAttrib","","",0,null],[11,"TexImage3DMultisample","","",0,null],[11,"ShaderBinary","","",0,null],[11,"ProgramUniform2f","","",0,null],[11,"ProgramUniform4ui","","",0,null]],"paths":[[3,"Gl"],[3,"FnPtr"]]};
searchIndex["gfx_window_glutin"] = {"doc":"","items":[[5,"init","gfx_window_glutin","Initialize with a window builder. Generically parametrized version over the main framebuffer format.",null,null],[5,"init_existing","","Initialize with an existing Glutin window. Generically parametrized version over the main framebuffer format.",null,null],[5,"init_raw","","Initialize with a window builder. Raw version.",null,null],[5,"init_existing_raw","","Initialize with an existing Glutin window. Raw version.",null,null],[5,"update_views","","Update the internal dimensions of the main framebuffer targets. Generic version over the format.",null,{"inputs":[{"name":"window"},{"name":"rendertargetview"},{"name":"depthstencilview"}],"output":null}],[5,"update_views_raw","","Return new main target views if the window resolution has changed from the old dimensions.",null,{"inputs":[{"name":"window"},{"name":"dimensions"},{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[5,"new_views","","Create new main target views based on the current size of the window. Best called just after a WindowResize event.",null,null]],"paths":[]};
searchIndex["gif"] = {"doc":"GIF en- and decoding library ![Build Status](https://travis-ci.org/PistonDevelopers/image-gif.svg?branch=master)","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame. The returned frame does **not** any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"set_param","","",8,{"inputs":[{"name":"self"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"set_param","","",7,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",1,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_param","","",10,null],[11,"new_control_ext","","Constructor for control extension data.",9,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"self"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular pattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner. This currently only considers upper/lower case relationships between ASCII characters, but in future this might be extended to work with Unicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on Posix) must be matched by a literal `/`, rather than by `*` or `?` or `[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.` will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`, or `[...]` will not match. This is useful because such files are conventionally considered hidden on Unix systems and it might be desirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","The Path that the error corresponds to.",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"error","","The error in question.",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in brackets. The resulting string will, when compiled into a `Pattern`, match the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"as_str","","Access the original glob pattern.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used when calling functions that do not take an explicit `MatchOptions` parameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["glutin"] = {"doc":"The purpose of this library is to provide an OpenGL context on as many  platforms as possible.","items":[[4,"Event","glutin","",null,null],[13,"Resized","","The size of the window has changed.",0,null],[13,"Moved","","The position of the window has changed.",0,null],[13,"Closed","","The window has been closed.",0,null],[13,"DroppedFile","","A file has been dropped into the window.",0,null],[13,"ReceivedCharacter","","The window received a unicode character.",0,null],[13,"Focused","","The window gained or lost focus.",0,null],[13,"KeyboardInput","","An event from the keyboard has been received.",0,null],[13,"MouseMoved","","The cursor has moved on the window.",0,null],[13,"MouseEntered","","The cursor has entered the window.",0,null],[13,"MouseLeft","","The cursor has left the window.",0,null],[13,"MouseWheel","","A mouse wheel movement or touchpad scroll occurred.",0,null],[13,"MouseInput","","An event from the mouse has been received.",0,null],[13,"TouchpadPressure","","Touchpad pressure event.",0,null],[13,"Awakened","","The event loop was woken up by another thread.",0,null],[13,"Refresh","","The window needs to be redrawn.",0,null],[13,"Suspended","","App has been suspended or resumed.",0,null],[13,"Touch","","Touch event has been received",0,null],[4,"TouchPhase","","",null,null],[13,"Started","","",1,null],[13,"Moved","","",1,null],[13,"Ended","","",1,null],[13,"Cancelled","","",1,null],[3,"Touch","","Represents touch event",null,null],[12,"phase","","",2,null],[12,"location","","",2,null],[12,"id","","unique identifier of a finger.",2,null],[6,"ScanCode","","",null,null],[4,"ElementState","","",null,null],[13,"Pressed","","",3,null],[13,"Released","","",3,null],[4,"MouseButton","","",null,null],[13,"Left","","",4,null],[13,"Right","","",4,null],[13,"Middle","","",4,null],[13,"Other","","",4,null],[4,"MouseScrollDelta","","",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",5,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",5,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",6,null],[13,"Key2","","The '2' key over the letters.",6,null],[13,"Key3","","The '3' key over the letters.",6,null],[13,"Key4","","The '4' key over the letters.",6,null],[13,"Key5","","The '5' key over the letters.",6,null],[13,"Key6","","The '6' key over the letters.",6,null],[13,"Key7","","The '7' key over the letters.",6,null],[13,"Key8","","The '8' key over the letters.",6,null],[13,"Key9","","The '9' key over the letters.",6,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",6,null],[13,"A","","",6,null],[13,"B","","",6,null],[13,"C","","",6,null],[13,"D","","",6,null],[13,"E","","",6,null],[13,"F","","",6,null],[13,"G","","",6,null],[13,"H","","",6,null],[13,"I","","",6,null],[13,"J","","",6,null],[13,"K","","",6,null],[13,"L","","",6,null],[13,"M","","",6,null],[13,"N","","",6,null],[13,"O","","",6,null],[13,"P","","",6,null],[13,"Q","","",6,null],[13,"R","","",6,null],[13,"S","","",6,null],[13,"T","","",6,null],[13,"U","","",6,null],[13,"V","","",6,null],[13,"W","","",6,null],[13,"X","","",6,null],[13,"Y","","",6,null],[13,"Z","","",6,null],[13,"Escape","","The Escape key, next to F1.",6,null],[13,"F1","","",6,null],[13,"F2","","",6,null],[13,"F3","","",6,null],[13,"F4","","",6,null],[13,"F5","","",6,null],[13,"F6","","",6,null],[13,"F7","","",6,null],[13,"F8","","",6,null],[13,"F9","","",6,null],[13,"F10","","",6,null],[13,"F11","","",6,null],[13,"F12","","",6,null],[13,"F13","","",6,null],[13,"F14","","",6,null],[13,"F15","","",6,null],[13,"Snapshot","","Print Screen/SysRq.",6,null],[13,"Scroll","","Scroll Lock.",6,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",6,null],[13,"Insert","","`Insert`, next to Backspace.",6,null],[13,"Home","","",6,null],[13,"Delete","","",6,null],[13,"End","","",6,null],[13,"PageDown","","",6,null],[13,"PageUp","","",6,null],[13,"Left","","",6,null],[13,"Up","","",6,null],[13,"Right","","",6,null],[13,"Down","","",6,null],[13,"Back","","The Backspace key, right over Enter.",6,null],[13,"Return","","The Enter key.",6,null],[13,"Space","","The space bar.",6,null],[13,"Compose","","The \"Compose\" key on Linux.",6,null],[13,"Numlock","","",6,null],[13,"Numpad0","","",6,null],[13,"Numpad1","","",6,null],[13,"Numpad2","","",6,null],[13,"Numpad3","","",6,null],[13,"Numpad4","","",6,null],[13,"Numpad5","","",6,null],[13,"Numpad6","","",6,null],[13,"Numpad7","","",6,null],[13,"Numpad8","","",6,null],[13,"Numpad9","","",6,null],[13,"AbntC1","","",6,null],[13,"AbntC2","","",6,null],[13,"Add","","",6,null],[13,"Apostrophe","","",6,null],[13,"Apps","","",6,null],[13,"At","","",6,null],[13,"Ax","","",6,null],[13,"Backslash","","",6,null],[13,"Calculator","","",6,null],[13,"Capital","","",6,null],[13,"Colon","","",6,null],[13,"Comma","","",6,null],[13,"Convert","","",6,null],[13,"Decimal","","",6,null],[13,"Divide","","",6,null],[13,"Equals","","",6,null],[13,"Grave","","",6,null],[13,"Kana","","",6,null],[13,"Kanji","","",6,null],[13,"LAlt","","",6,null],[13,"LBracket","","",6,null],[13,"LControl","","",6,null],[13,"LMenu","","",6,null],[13,"LShift","","",6,null],[13,"LWin","","",6,null],[13,"Mail","","",6,null],[13,"MediaSelect","","",6,null],[13,"MediaStop","","",6,null],[13,"Minus","","",6,null],[13,"Multiply","","",6,null],[13,"Mute","","",6,null],[13,"MyComputer","","",6,null],[13,"NavigateForward","","",6,null],[13,"NavigateBackward","","",6,null],[13,"NextTrack","","",6,null],[13,"NoConvert","","",6,null],[13,"NumpadComma","","",6,null],[13,"NumpadEnter","","",6,null],[13,"NumpadEquals","","",6,null],[13,"OEM102","","",6,null],[13,"Period","","",6,null],[13,"PlayPause","","",6,null],[13,"Power","","",6,null],[13,"PrevTrack","","",6,null],[13,"RAlt","","",6,null],[13,"RBracket","","",6,null],[13,"RControl","","",6,null],[13,"RMenu","","",6,null],[13,"RShift","","",6,null],[13,"RWin","","",6,null],[13,"Semicolon","","",6,null],[13,"Slash","","",6,null],[13,"Sleep","","",6,null],[13,"Stop","","",6,null],[13,"Subtract","","",6,null],[13,"Sysrq","","",6,null],[13,"Tab","","",6,null],[13,"Underline","","",6,null],[13,"Unlabeled","","",6,null],[13,"VolumeDown","","",6,null],[13,"VolumeUp","","",6,null],[13,"Wake","","",6,null],[13,"WebBack","","",6,null],[13,"WebFavorites","","",6,null],[13,"WebForward","","",6,null],[13,"WebHome","","",6,null],[13,"WebRefresh","","",6,null],[13,"WebSearch","","",6,null],[13,"WebStop","","",6,null],[13,"Yen","","",6,null],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called on a window. This structure can be safely cloned and sent between threads.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[5,"get_available_monitors","","Returns the list of all available monitors.",null,{"inputs":[],"output":{"name":"availablemonitorsiter"}}],[5,"get_primary_monitor","","Returns the primary monitor of the system.",null,{"inputs":[],"output":{"name":"monitorid"}}],[4,"NativeMonitorId","","Native platform identifier for a monitor. Different platforms use fundamentally different types to represent a monitor ID.",null,null],[13,"Numeric","","Cocoa and X11 use a numeric identifier to represent a monitor.",7,null],[13,"Name","","Win32 uses a Unicode string to represent a monitor.",7,null],[13,"Unavailable","","Other platforms (Android) don't support monitor identification.",7,null],[4,"MouseCursor","","",null,null],[13,"Default","","The platform-dependent default cursor.",8,null],[13,"Crosshair","","A simple crosshair.",8,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",8,null],[13,"Arrow","","Self explanatory.",8,null],[13,"Move","","Indicates something is to be moved.",8,null],[13,"Text","","Indicates text that may be selected or edited.",8,null],[13,"Wait","","Program busy indicator.",8,null],[13,"Help","","Help indicator (often rendered as a \"?\")",8,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",8,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",8,null],[13,"ContextMenu","","",8,null],[13,"NoneCursor","","",8,null],[13,"Cell","","",8,null],[13,"VerticalText","","",8,null],[13,"Alias","","",8,null],[13,"Copy","","",8,null],[13,"NoDrop","","",8,null],[13,"Grab","","",8,null],[13,"Grabbing","","",8,null],[13,"AllScroll","","",8,null],[13,"ZoomIn","","",8,null],[13,"ZoomOut","","",8,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",8,null],[13,"NResize","","",8,null],[13,"NeResize","","",8,null],[13,"NwResize","","",8,null],[13,"SResize","","",8,null],[13,"SeResize","","",8,null],[13,"SwResize","","",8,null],[13,"WResize","","",8,null],[13,"EwResize","","",8,null],[13,"NsResize","","",8,null],[13,"NeswResize","","",8,null],[13,"NwseResize","","",8,null],[13,"ColResize","","",8,null],[13,"RowResize","","",8,null],[4,"CursorState","","Describes how glutin handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",9,null],[13,"Hide","","The cursor will be invisible when over the window.",9,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",9,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",10,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",10,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",10,null],[12,"monitor","","If `Some`, the window will be in fullscreen mode with the given monitor.",10,null],[12,"title","","The title of the window in the title bar.",10,null],[12,"visible","","Whether the window should be immediately visible upon creation.",10,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",10,null],[12,"decorations","","Whether the window should have borders and bars.",10,null],[12,"multitouch","","[iOS only] Enable multitouch, see UIView#multipleTouchEnabled",10,null],[12,"resize_callback","","A function called upon resizing, necessary to receive resize events on Mac and possibly other systems.",10,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",11,null],[12,"opengl","","The OpenGL attributes to build the context with.",11,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"PollEventsIterator","","An iterator for the `poll_events` function.",null,null],[3,"WaitEventsIterator","","An iterator for the `wait_events` function.",null,null],[3,"Window","","Represents an OpenGL context and the Window or environment around it.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"opengl","","The attributes to use to create the context.",12,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",13,null],[12,"color_bits","","",13,null],[12,"alpha_bits","","",13,null],[12,"depth_bits","","",13,null],[12,"stencil_bits","","",13,null],[12,"stereoscopy","","",13,null],[12,"double_buffer","","",13,null],[12,"multisampling","","",13,null],[12,"srgb","","",13,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be conisdered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",14,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",14,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",14,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",14,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",14,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",14,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",14,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",14,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",14,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",14,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",14,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",15,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",15,null],[12,"profile","","OpenGL profile to use.",15,null],[12,"debug","","Whether to enable the `debug` flag of the context.",15,null],[12,"robustness","","How the OpenGL context should detect errors.",15,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",15,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",16,null],[13,"NotSupported","","TODO: remove this error",16,null],[13,"NoBackendAvailable","","",16,null],[13,"RobustnessNotSupported","","",16,null],[13,"OpenGlVersionNotSupported","","",16,null],[13,"NoAvailablePixelFormat","","",16,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",17,null],[13,"ContextLost","","",17,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",18,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",18,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",18,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",19,null],[13,"Core","","Include all the future-compatible functions and definitions.",19,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",20,null],[13,"Specific","","Request a specific version of a specific API.",20,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",20,null],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",20,null],[12,"opengles_version","","The version to use for OpenGL ES.",20,null],[4,"Robustness","glutin","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",21,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",21,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",21,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",21,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",21,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",21,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",22,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",22,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"headlessrendererbuilder"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",11,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",11,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",11,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",11,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",23,null],[11,"get_api","","Returns the API that is currently provided by this window.",23,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"set_window_resize_callback","","",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"make_current","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_current","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",23,null],[11,"swap_buffers","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_api","","",23,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",23,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",12,{"inputs":[],"output":{"name":"windowbuilder"}}],[11,"from_winit_builder","","Initializes a new glutin `WindowBuilder` with the specified winit `WindowBuilder` and default values for the other parameters.",12,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",12,{"inputs":[{"name":"self"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",12,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"name":"windowbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",12,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",12,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",12,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"windowbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",12,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",12,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"windowbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",12,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",12,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window. `None` means \"I don't care\".",12,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch",12,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"window"}}],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",26,{"inputs":[],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"show","","Shows the window if it was hidden.",26,{"inputs":[{"name":"self"}],"output":null}],[11,"hide","","Hides the window if it was visible.",26,{"inputs":[{"name":"self"}],"output":null}],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",26,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_inner_size","","Returns the size in points of the client area of the window.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",26,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue. Returns `None` if there is no event in the queue.",26,{"inputs":[{"name":"self"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is available.",26,{"inputs":[{"name":"self"}],"output":{"name":"waiteventsiterator"}}],[11,"make_current","","Sets the context as the current context.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",26,null],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",26,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",26,null],[11,"as_winit_window","","Borrows the winit::Window inside this window. This is typically only required when integrating with other libraries that need this information.",26,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"as_winit_window_mut","","Mutably borrows the winit::Window inside this window. This is typically only required when integrating with other libraries that need this information.",26,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"get_api","","Returns the API that is currently provided by this window.",26,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","Returns the pixel format of this window.",26,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely passed to different threads.",26,{"inputs":[{"name":"self"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other operating systems) during resize operations. This can be used to repaint during window resizing.",26,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",26,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":null}],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",26,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",26,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",26,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"make_current","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_current","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",26,null],[11,"swap_buffers","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_api","","",26,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",26,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[7,"GL_CORE","","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",null,null],[8,"GlContext","","Trait that describes objects that have access to an OpenGL context.",null,null],[10,"make_current","","Sets the context as the current context.",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",27,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",27,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",27,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"glrequest"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"robustness"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatrequirements"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"glattributes"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"glattributes"}}],[11,"hash","","",1,null],[11,"hash","","",3,null],[11,"hash","","",4,null],[11,"hash","","",6,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"windowattributes"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"windowproxy"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cursorstate"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"windowattributes"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nativemonitorid"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is typically called when another thread wants to wake up the blocked rendering thread to cause a refresh.",29,null],[11,"get_name","","Returns a human-readable name of the monitor.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",30,{"inputs":[{"name":"self"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",30,null]],"paths":[[4,"Event"],[4,"TouchPhase"],[3,"Touch"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"NativeMonitorId"],[4,"MouseCursor"],[4,"CursorState"],[3,"WindowAttributes"],[3,"HeadlessRendererBuilder"],[3,"WindowBuilder"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"HeadlessContext"],[3,"WaitEventsIterator"],[3,"PollEventsIterator"],[3,"Window"],[8,"GlContext"],[3,"AvailableMonitorsIter"],[3,"WindowProxy"],[3,"MonitorId"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"DecodingResult","","Result of a decoding process",null,null],[13,"U8","","A vector of unsigned bytes",6,null],[13,"U16","","A vector of unsigned words",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",8,null],[13,"JPEG","","An Image in JPEG Format",8,null],[13,"GIF","","An Image in GIF Format",8,null],[13,"WEBP","","An Image in WEBP Format",8,null],[13,"PPM","","An Image in PPM Format",8,null],[13,"TIFF","","An Image in TIFF Format",8,null],[13,"TGA","","An Image in TGA Format",8,null],[13,"BMP","","An Image in BMP Format",8,null],[13,"ICO","","An Image in ICO Format",8,null],[13,"HDR","","An Image in Radiance HDR Format",8,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",9,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",9,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",9,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",9,null],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"guess_format","","Guess image format from memory block",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",10,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",10,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",10,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",10,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. ```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions. ```nwidth``` and ```nheight``` are the new dimensions. ```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image. ```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. ```sigma``` is the amount to blur the image by. ```threshold``` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug: https://github.com/rust-lang/rust/issues/18241 Functions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image. ```contrast``` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image. ```value``` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",11,null],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",11,null],[10,"map_color","","Maps `color` to the closest color in the color map.",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bilevel"}}],[11,"index_of","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"clone","image","",7,{"inputs":[{"name":"self"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```. This function takes ownership of the Reader.",13,{"inputs":[{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",13,null],[11,"read_image","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",14,null],[12,"height","","The height of the luma plane",14,null],[12,"ybuf","","The luma plane of the frame",14,null],[12,"keyframe","","Indicates whether this frame is a keyframe",14,null],[12,"for_display","","Indicates whether this frame is intended for display",14,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",14,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"frame"}}],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",15,{"inputs":[{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```. This function takes ownership of the Writer.",16,{"inputs":[{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image. ```width``` and ```height``` are the dimensions of the buffer. ```color``` is the buffers ColorType.",16,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream ```r```",17,{"inputs":[{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",17,null],[11,"read_image","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```",18,{"inputs":[{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image``` that has dimensions ```width``` and ```height``` and ```ColorType``` ```c```",18,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding and Encoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[3,"ICOEncoder","","ICO encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",19,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",19,null],[11,"read_image","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```.",20,{"inputs":[{"name":"w"}],"output":{"name":"icoencoder"}}],[11,"encode","","Encodes the image ```image``` that has dimensions ```width``` and ```height``` and ```ColorType``` ```c```.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",20,null],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to ```w```",21,{"inputs":[{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"new_with_quality","","Create a new encoder that writes its output to ```w```, and has the quality parameter ```quality``` with a value in the range 1-100 where 1 is the worst and 100 is the best.",21,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image``` that has dimensions ```width``` and ```height``` and ```ColorType``` ```c```",21,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",22,{"inputs":[{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",22,null],[11,"read_image","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"from","image","",4,{"inputs":[{"name":"pixelformat"}],"output":{"name":"colortype"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",23,null],[12,"dispose","","Disposal method.",23,null],[12,"transparent","","Transparent index (if available).",23,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",23,null],[12,"top","","Offset from the top border of the canvas.",23,null],[12,"left","","Offset from the left border of the canvas.",23,null],[12,"width","","Width of the frame.",23,null],[12,"height","","Height of the frame.",23,null],[12,"interlaced","","True if the image is interlaced.",23,null],[12,"palette","","Frame local color palette if available.",23,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",23,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam ```r```",24,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",24,null],[11,"read_image","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",25,{"inputs":[{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",25,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",26,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",26,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",26,null],[11,"read_image","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",27,{"inputs":[{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",27,null],[11,"read_image","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"bmp","image","Decoding of BMP Images",null,null],[3,"BMPDecoder","image::bmp","A bmp decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",28,{"inputs":[{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",28,null],[11,"read_image","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"hdr","image","Decoding of Radiance HDR Images",null,null],[3,"HDRAdapter","image::hdr","Adapter to conform to ```ImageDecoder``` trait",null,null],[3,"HDRDecoder","","An Radiance HDR decoder",null,null],[3,"RGBE8Pixel","","Refer to wikipedia",null,null],[12,"c","","Color components",29,null],[12,"e","","Exponent",29,null],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",null,null],[3,"HDRMetadata","","Metadata for Radiance HDR image",null,null],[12,"width","","Width of decoded image. It could be either scanline length, or scanline count, depending on image orientation. ",30,null],[12,"height","","Height of decoded image. It depends on orientation too.",30,null],[12,"orientation","","Orientation matrix. For standart orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",30,null],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m^2 Image may not contain physical data, even if this field is set. ",30,null],[12,"color_correction","","Divide color values by corresponing tuple member (r, g, b) to get to get physical radiance in watts/steradian/m^2 Image may not contain physical data, even if this field is set. ",30,null],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",30,null],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",30,null],[3,"HDREncoder","","Radiance HDR encoder",null,null],[5,"rgbe8","","Creates ```RGBE8Pixel``` from components",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgbe8pixel"}}],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"to_rgbe8","","Converts ```Rgb<f32>``` into ```RGBE8Pixel```",null,{"inputs":[{"name":"rgb"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates adapter",31,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"new_nonstrict","","Allows reading old Radiance HDR images",31,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",31,null],[11,"read_image","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"rgbe8pixel"}}],[11,"to_hdr","","Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly",29,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_ldr","","Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2",29,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb<T> using provided scale and gamma",29,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rgb"}}],[11,"new","","Reads Radiance HDR image header from stream ```r``` if the header is valid, creates HDRDecoder  strict mode is enabled",32,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"with_strictness","","Reads Radiance HDR image header from stream ```reader```, if the header is valid, creates ```HDRDecoder```.",32,{"inputs":[{"name":"r"},{"name":"bool"}],"output":{"name":"imageresult"}}],[11,"metadata","","Returns file metadata. Refer to ```HDRMetadata``` for details.",32,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_image_transform","","Consumes decoder and returns a vector of tranformed pixels",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"imageresult"}}],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb<u8> pixels. scale = 1, gamma = 2.2",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb<f32> pixels.",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"into_iter","","",32,null],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates encoder",34,{"inputs":[{"name":"w"}],"output":{"name":"hdrencoder"}}],[11,"encode","","Encodes the image ```data``` that has dimensions ```width``` and ```height```",34,null],[17,"SIGNATURE","","Radiance HDR file signature",null,null],[11,"fmt","image","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",37,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",37,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",37,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",37,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",37,null],[11,"bounds","","",37,null],[11,"get_pixel","","",37,null],[11,"put_pixel","","",37,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",37,null],[11,"get_pixel_mut","","",37,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"color","","Return this image's color type.",9,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image. This method operates inplace.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by ```nwidth``` and ```nheight```.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. ```nwidth``` and ```nheight``` are the new image's dimensions",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image. ```sigma``` is a measure of how much to blur by.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image. ```sigma``` is the amount to blur the image by. ```threshold``` is a control of how much to sharpen.",9,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",9,null],[11,"adjust_contrast","","Adjust the contrast of this image. ```contrast``` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image. ```value``` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",9,{"inputs":[{"name":"self"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",9,null],[11,"bounds","","",9,null],[11,"get_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",2,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"self"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"self"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",3,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",38,{"inputs":[{"name":"self"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",38,null],[11,"width","","The width of this image.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",38,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",38,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",38,{"inputs":[{"name":"self"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",38,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",38,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",38,null],[11,"deref_mut","","",38,null],[11,"index","","",38,null],[11,"index_mut","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",38,null],[11,"bounds","","",38,null],[11,"get_pixel","","",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",38,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"convert","","",38,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",39,{"inputs":[{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",40,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",40,{"inputs":[{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",40,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",40,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",40,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into ```buf``` and returns the row index",41,null],[10,"read_image","","Decodes the entire image and return it as a Vector",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from ```x``` and ```y``` and having ```length``` and ```width```",41,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",42,null],[10,"dimensions","","The width and height of this image.",42,null],[11,"width","","The width of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",42,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",42,null],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",42,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",42,null],[10,"put_pixel","","Put a pixel at location (x, y)",42,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",42,null],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",42,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",42,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",42,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",42,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",43,null],[10,"channel_count","","Returns the number of channels of this pixel type.",43,{"inputs":[],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",43,null],[10,"channels_mut","","Returns the components as a mutable slice",43,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel See gimp babl.",43,{"inputs":[],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",43,{"inputs":[],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",43,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",43,null],[10,"from_slice","","Returns a view into a slice.",43,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",43,null],[10,"to_rgb","","Convert this pixel to RGB",43,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",43,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",43,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",43,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function ```f``` to each channel of this pixel.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function ```f``` to each channel except the alpha channel. Apply the function ```g``` to the alpha channel.",43,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function ```f``` to each channel except the alpha channel. Apply the function ```g``` to the alpha channel. Works in-place.",43,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function ```f``` to each channel of this pixel and ```other``` pairwise.",43,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and ```other``` pairwise. Works in-place.",43,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",43,{"inputs":[{"name":"self"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",43,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",44,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",23,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"is_animated","image","Returns true if the image is animated",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from ```x``` and ```y``` and having ```length``` and ```width```",41,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[11,"width","","The width of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",42,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",42,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",42,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",42,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",42,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",45,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["inflate"] = {"doc":"","items":[[3,"InflateStream","inflate","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"update","","",0,null]],"paths":[[3,"InflateStream"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions to be used in window frameworks and widgets libraries.","items":[[3,"AfterRenderArgs","input","After render arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",0,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",1,null],[12,"width","","The width of rendered area in points.",1,null],[12,"height","","The height of rendered area in points.",1,null],[12,"draw_width","","The width of rendered area in pixels.",1,null],[12,"draw_height","","The height of rendered area in pixels.",1,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",2,null],[12,"id","","A unique identifier for touch event.",2,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",2,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",2,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",2,null],[12,"px","","The x coordinate of the touch pressure direction.",2,null],[12,"py","","The y coordinate of the touch pressure direction.",2,null],[12,"pz","","The z coordinate of the touch pressure direction.",2,null],[12,"is_3d","","Whether the touch is in 3D.",2,null],[12,"touch","","The touch state.",2,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",3,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",4,null],[4,"Event","","Adds render and update events to input events",null,null],[13,"Render","","Render graphics.",5,null],[13,"AfterRender","","After rendering and swapping buffers.",5,null],[13,"Update","","Update the state of the application.",5,null],[13,"Idle","","Do background tasks that can be done incrementally.",5,null],[13,"Input","","Input event.",5,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",6,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",6,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",6,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",6,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",7,null],[13,"Mouse","","A mouse button.",7,null],[13,"Controller","","A controller button.",7,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",8,null],[13,"MouseRelative","","x and y in relative coordinates.",8,null],[13,"MouseScroll","","x and y in scroll ticks.",8,null],[13,"ControllerAxis","","controller axis move event.",8,null],[13,"Touch","","touch event.",8,null],[4,"Input","","Models input events.",null,null],[13,"Press","","Pressed a button.",9,null],[13,"Release","","Released a button.",9,null],[13,"Move","","Moved mouse cursor.",9,null],[13,"Text","","Text (usually from keyboard).",9,null],[13,"Resize","","Window got resized.",9,null],[13,"Focus","","Window gained or lost focus.",9,null],[13,"Cursor","","Window gained or lost cursor.",9,null],[13,"Close","","Window closed.",9,null],[0,"controller","","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",10,null],[12,"button","","Which button was pressed.",10,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",11,null],[12,"axis","","The axis that moved.",11,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",11,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",12,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"controllerbutton"}}],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",10,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"controlleraxisargs"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",11,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"self"}}],[11,"from_controller_axis_args","input","",9,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"controller_axis","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_controller_axis_args","","",5,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"controller_axis","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",13,null],[13,"Backspace","","",13,null],[13,"Tab","","",13,null],[13,"Return","","",13,null],[13,"Escape","","",13,null],[13,"Space","","",13,null],[13,"Exclaim","","",13,null],[13,"Quotedbl","","",13,null],[13,"Hash","","",13,null],[13,"Dollar","","",13,null],[13,"Percent","","",13,null],[13,"Ampersand","","",13,null],[13,"Quote","","",13,null],[13,"LeftParen","","",13,null],[13,"RightParen","","",13,null],[13,"Asterisk","","",13,null],[13,"Plus","","",13,null],[13,"Comma","","",13,null],[13,"Minus","","",13,null],[13,"Period","","",13,null],[13,"Slash","","",13,null],[13,"D0","","",13,null],[13,"D1","","",13,null],[13,"D2","","",13,null],[13,"D3","","",13,null],[13,"D4","","",13,null],[13,"D5","","",13,null],[13,"D6","","",13,null],[13,"D7","","",13,null],[13,"D8","","",13,null],[13,"D9","","",13,null],[13,"Colon","","",13,null],[13,"Semicolon","","",13,null],[13,"Less","","",13,null],[13,"Equals","","",13,null],[13,"Greater","","",13,null],[13,"Question","","",13,null],[13,"At","","",13,null],[13,"LeftBracket","","",13,null],[13,"Backslash","","",13,null],[13,"RightBracket","","",13,null],[13,"Caret","","",13,null],[13,"Underscore","","",13,null],[13,"Backquote","","",13,null],[13,"A","","",13,null],[13,"B","","",13,null],[13,"C","","",13,null],[13,"D","","",13,null],[13,"E","","",13,null],[13,"F","","",13,null],[13,"G","","",13,null],[13,"H","","",13,null],[13,"I","","",13,null],[13,"J","","",13,null],[13,"K","","",13,null],[13,"L","","",13,null],[13,"M","","",13,null],[13,"N","","",13,null],[13,"O","","",13,null],[13,"P","","",13,null],[13,"Q","","",13,null],[13,"R","","",13,null],[13,"S","","",13,null],[13,"T","","",13,null],[13,"U","","",13,null],[13,"V","","",13,null],[13,"W","","",13,null],[13,"X","","",13,null],[13,"Y","","",13,null],[13,"Z","","",13,null],[13,"Delete","","",13,null],[13,"CapsLock","","",13,null],[13,"F1","","",13,null],[13,"F2","","",13,null],[13,"F3","","",13,null],[13,"F4","","",13,null],[13,"F5","","",13,null],[13,"F6","","",13,null],[13,"F7","","",13,null],[13,"F8","","",13,null],[13,"F9","","",13,null],[13,"F10","","",13,null],[13,"F11","","",13,null],[13,"F12","","",13,null],[13,"PrintScreen","","",13,null],[13,"ScrollLock","","",13,null],[13,"Pause","","",13,null],[13,"Insert","","",13,null],[13,"Home","","",13,null],[13,"PageUp","","",13,null],[13,"End","","",13,null],[13,"PageDown","","",13,null],[13,"Right","","",13,null],[13,"Left","","",13,null],[13,"Down","","",13,null],[13,"Up","","",13,null],[13,"NumLockClear","","",13,null],[13,"NumPadDivide","","",13,null],[13,"NumPadMultiply","","",13,null],[13,"NumPadMinus","","",13,null],[13,"NumPadPlus","","",13,null],[13,"NumPadEnter","","",13,null],[13,"NumPad1","","",13,null],[13,"NumPad2","","",13,null],[13,"NumPad3","","",13,null],[13,"NumPad4","","",13,null],[13,"NumPad5","","",13,null],[13,"NumPad6","","",13,null],[13,"NumPad7","","",13,null],[13,"NumPad8","","",13,null],[13,"NumPad9","","",13,null],[13,"NumPad0","","",13,null],[13,"NumPadPeriod","","",13,null],[13,"Application","","",13,null],[13,"Power","","",13,null],[13,"NumPadEquals","","",13,null],[13,"F13","","",13,null],[13,"F14","","",13,null],[13,"F15","","",13,null],[13,"F16","","",13,null],[13,"F17","","",13,null],[13,"F18","","",13,null],[13,"F19","","",13,null],[13,"F20","","",13,null],[13,"F21","","",13,null],[13,"F22","","",13,null],[13,"F23","","",13,null],[13,"F24","","",13,null],[13,"Execute","","",13,null],[13,"Help","","",13,null],[13,"Menu","","",13,null],[13,"Select","","",13,null],[13,"Stop","","",13,null],[13,"Again","","",13,null],[13,"Undo","","",13,null],[13,"Cut","","",13,null],[13,"Copy","","",13,null],[13,"Paste","","",13,null],[13,"Find","","",13,null],[13,"Mute","","",13,null],[13,"VolumeUp","","",13,null],[13,"VolumeDown","","",13,null],[13,"NumPadComma","","",13,null],[13,"NumPadEqualsAS400","","",13,null],[13,"AltErase","","",13,null],[13,"Sysreq","","",13,null],[13,"Cancel","","",13,null],[13,"Clear","","",13,null],[13,"Prior","","",13,null],[13,"Return2","","",13,null],[13,"Separator","","",13,null],[13,"Out","","",13,null],[13,"Oper","","",13,null],[13,"ClearAgain","","",13,null],[13,"CrSel","","",13,null],[13,"ExSel","","",13,null],[13,"NumPad00","","",13,null],[13,"NumPad000","","",13,null],[13,"ThousandsSeparator","","",13,null],[13,"DecimalSeparator","","",13,null],[13,"CurrencyUnit","","",13,null],[13,"CurrencySubUnit","","",13,null],[13,"NumPadLeftParen","","",13,null],[13,"NumPadRightParen","","",13,null],[13,"NumPadLeftBrace","","",13,null],[13,"NumPadRightBrace","","",13,null],[13,"NumPadTab","","",13,null],[13,"NumPadBackspace","","",13,null],[13,"NumPadA","","",13,null],[13,"NumPadB","","",13,null],[13,"NumPadC","","",13,null],[13,"NumPadD","","",13,null],[13,"NumPadE","","",13,null],[13,"NumPadF","","",13,null],[13,"NumPadXor","","",13,null],[13,"NumPadPower","","",13,null],[13,"NumPadPercent","","",13,null],[13,"NumPadLess","","",13,null],[13,"NumPadGreater","","",13,null],[13,"NumPadAmpersand","","",13,null],[13,"NumPadDblAmpersand","","",13,null],[13,"NumPadVerticalBar","","",13,null],[13,"NumPadDblVerticalBar","","",13,null],[13,"NumPadColon","","",13,null],[13,"NumPadHash","","",13,null],[13,"NumPadSpace","","",13,null],[13,"NumPadAt","","",13,null],[13,"NumPadExclam","","",13,null],[13,"NumPadMemStore","","",13,null],[13,"NumPadMemRecall","","",13,null],[13,"NumPadMemClear","","",13,null],[13,"NumPadMemAdd","","",13,null],[13,"NumPadMemSubtract","","",13,null],[13,"NumPadMemMultiply","","",13,null],[13,"NumPadMemDivide","","",13,null],[13,"NumPadPlusMinus","","",13,null],[13,"NumPadClear","","",13,null],[13,"NumPadClearEntry","","",13,null],[13,"NumPadBinary","","",13,null],[13,"NumPadOctal","","",13,null],[13,"NumPadDecimal","","",13,null],[13,"NumPadHexadecimal","","",13,null],[13,"LCtrl","","",13,null],[13,"LShift","","",13,null],[13,"LAlt","","",13,null],[13,"LGui","","",13,null],[13,"RCtrl","","",13,null],[13,"RShift","","",13,null],[13,"RAlt","","",13,null],[13,"RGui","","",13,null],[13,"Mode","","",13,null],[13,"AudioNext","","",13,null],[13,"AudioPrev","","",13,null],[13,"AudioStop","","",13,null],[13,"AudioPlay","","",13,null],[13,"AudioMute","","",13,null],[13,"MediaSelect","","",13,null],[13,"Www","","",13,null],[13,"Mail","","",13,null],[13,"Calculator","","",13,null],[13,"Computer","","",13,null],[13,"AcSearch","","",13,null],[13,"AcHome","","",13,null],[13,"AcBack","","",13,null],[13,"AcForward","","",13,null],[13,"AcStop","","",13,null],[13,"AcRefresh","","",13,null],[13,"AcBookmarks","","",13,null],[13,"BrightnessDown","","",13,null],[13,"BrightnessUp","","",13,null],[13,"DisplaySwitch","","",13,null],[13,"KbdIllumToggle","","",13,null],[13,"KbdIllumDown","","",13,null],[13,"KbdIllumUp","","",13,null],[13,"Eject","","",13,null],[13,"Sleep","","",13,null],[17,"NO_MODIFIER","","No modifier.",null,null],[17,"CTRL","","Ctrl.",null,null],[17,"SHIFT","","Shift.",null,null],[17,"ALT","","Alt.",null,null],[17,"GUI","","Gui.",null,null],[17,"CTRL_SHIFT","","Ctrl + Shift.",null,null],[17,"CTRL_ALT","","Ctrl + Alt.",null,null],[17,"CTRL_GUI","","Ctrl + Gui.",null,null],[17,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",null,null],[17,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",null,null],[17,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",null,null],[17,"SHIFT_ALT","","Shift + Alt.",null,null],[17,"SHIFT_GUI","","Shift + Gui.",null,null],[17,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",null,null],[17,"ALT_GUI","","Alt + Gui.",null,null],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",14,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",14,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",14,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",14,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"extend","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",14,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",14,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"default","","",14,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"from","","",13,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",15,null],[13,"Left","","Left mouse button.",15,null],[13,"Right","","Right mouse button.",15,null],[13,"Middle","","Middle mouse button.",15,null],[13,"X1","","Extra mouse button number 1.",15,null],[13,"X2","","Extra mouse button number 2.",15,null],[13,"Button6","","Mouse button number 6.",15,null],[13,"Button7","","Mouse button number 7.",15,null],[13,"Button8","","Mouse button number 8.",15,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",16,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",17,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",18,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"from","","",15,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[11,"from_xy","input","",9,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_cursor","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",5,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_cursor","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",9,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_relative","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",5,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_relative","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",9,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_scroll","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",5,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_scroll","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"generic_event","","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",19,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with arguments",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[10,"from_args","","Converts from arguments to `Self`.",19,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","input","",9,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"with_args","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",9,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","","",5,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"with_args","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",5,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"afterrenderargs"}}],[11,"from_after_render_args","","",9,{"inputs":[{"name":"afterrenderargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"after_render","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_after_render_args","","",5,{"inputs":[{"name":"afterrenderargs"},{"name":"event"}],"output":{"name":"option"}}],[11,"after_render","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_cursor","","",9,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"cursor","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_cursor","","",5,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"cursor","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"from","","",5,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"input"}],"output":{"name":"self"}}],[11,"from_focused","","",9,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"focus","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_focused","","",5,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"focus","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"idleargs"}}],[11,"from_idle_args","","",9,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_idle_args","","",5,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_button","","",9,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[11,"press","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_button","","",5,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[11,"press","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_button","","",9,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[11,"release","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_button","","",5,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[11,"release","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"renderargs"}}],[11,"viewport","","Returns viewport information filling entire render area.",1,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"from_render_args","","",9,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"render","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_render_args","","",5,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"render","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_width_height","","",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[11,"resize","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_width_height","","",5,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[11,"resize","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_text","","",9,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[11,"text","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_text","","",5,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[11,"text","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"touchargs"}}],[11,"new","","Creates arguments for 2D touch.",2,null],[11,"new_3d","","Creates arguments for 3D touch.",2,null],[11,"position","","The position of the touch in 2D.",2,null],[11,"position_3d","","The position of the touch in 3D.",2,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",2,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",2,null],[11,"from_touch_args","","",9,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"touch","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_touch_args","","",5,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"touch","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"updateargs"}}],[11,"from_update_args","","",9,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"update","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_update_args","","",5,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"update","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",21,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",22,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",23,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",24,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",24,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",25,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",26,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",27,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",28,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",29,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"TouchEvent","","When a touch is started, moved, ended or cancelled.",null,null],[10,"from_touch_args","","Creates a touch event.",30,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"touch","","Calls closure if this is a touch event.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"touch_args","","Returns touch arguments.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",31,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",31,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"from","","",7,{"inputs":[{"name":"key"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",24,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"touch_args","","Returns touch arguments.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",31,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"IdleArgs"],[3,"RenderArgs"],[3,"TouchArgs"],[3,"UpdateArgs"],[3,"EventId"],[4,"Event"],[4,"Touch"],[4,"Button"],[4,"Motion"],[4,"Input"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[8,"AfterRenderEvent"],[8,"CursorEvent"],[8,"FocusEvent"],[8,"IdleEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"ResizeEvent"],[8,"RenderEvent"],[8,"TextEvent"],[8,"TouchEvent"],[8,"UpdateEvent"]]};
searchIndex["jpeg_decoder"] = {"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",null,null],[3,"ImageInfo","","Represents metadata of an image.",null,null],[12,"width","","The width of the image, in pixels.",0,null],[12,"height","","The height of the image, in pixels.",0,null],[12,"pixel_format","","The pixel format of the image.",0,null],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",null,null],[13,"L8","","Luminance (grayscale), 8 bits",1,null],[13,"RGB24","","RGB, 8 bits per channel",1,null],[13,"CMYK32","","CMYK, 8 bits per channel",1,null],[4,"Error","","Errors that can occur while decoding a JPEG image.",null,null],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,null],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,null],[13,"Io","","An I/O error occurred while decoding the image.",2,null],[13,"Internal","","An internal error occurred while decoding the image.",2,null],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",null,null],[13,"Hierarchical","","Hierarchical JPEG.",3,null],[13,"Lossless","","Lossless JPEG.",3,null],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,null],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,null],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,null],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,null],[13,"SubsamplingRatio","","Subsampling ratio.",3,null],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"imageinfo"}}],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"info","","Returns metadata about the image.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"recverror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[14,"__lazy_static_create","lazy_static","",null,null],[14,"lazy_static","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["lazybox"] = {"doc":"","items":[[0,"ecs","lazybox","",null,null],[0,"policy","lazybox::ecs","Defines some compile-time configuration",null,null],[5,"max_entity_count","lazybox::ecs::policy","Returns the maxmimum of entities that can exists at the same time",null,{"inputs":[],"output":{"name":"usize"}}],[5,"id_from_usize","","Converts a usize to an Id.",null,{"inputs":[{"name":"usize"}],"output":{"name":"id"}}],[6,"Id","","The id type for an entity",null,null],[6,"Version","","The version type for an entity",null,null],[6,"IdSet","","",null,null],[0,"entity","lazybox::ecs","",null,null],[3,"Entity","lazybox::ecs::entity","Represents an unique entity in the world. There is no data associated to it.",null,null],[3,"EntityRef","","A reference that keeps track of a particular entity",null,null],[3,"Accessor","","An entity accessor. It is the key to access and modify entity components",null,null],[3,"Entities","","",null,null],[3,"Iter","","An Iterator other entities.",null,null],[0,"iter","","",null,null],[3,"SliceIter","lazybox::ecs::entity::iter","",null,null],[3,"SetIter","","An `Id` Set iterator",null,null],[5,"accessors_from_slice","","Creates an accessor iterator from a slice of `Id`.",null,null],[5,"accessors_from_set","","Creates an accessor iterator from a HashSet of `Id`.",null,{"inputs":[{"name":"idset"}],"output":{"name":"setiter"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","lazybox::ecs::entity","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"entity"}}],[11,"index","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"version","","",2,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"accessor","","",2,{"inputs":[{"name":"self"}],"output":{"name":"accessor"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"entityref"}}],[11,"from_entity","","",3,{"inputs":[{"name":"entity"}],"output":{"name":"self"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"accessor"}}],[11,"new_unchecked","","",4,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"index","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"id","","",4,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"create","","Creates an entity",5,{"inputs":[{"name":"self"}],"output":{"name":"entity"}}],[11,"spawn_later","","Spawns an entity when the state will be commited.",5,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"entityref"}}],[11,"spawn","","Spawns an entity making it alive",5,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"entityref"}}],[11,"remove_later","","Schedule the removal of an entity.",5,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":null}],[11,"iter","","Creates a new entity iterator",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"entity_ref","","Creates an entity reference",5,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"entityref"}}],[11,"upgrade","","Uprades an `EntityRef` to an `Accessor`",5,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"option"}}],[11,"push_removes","","Removes all killed entities and returns them.",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"commit","","Commit the entities changes.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"state","lazybox::ecs","",null,null],[3,"StateBuilder","lazybox::ecs::state","",null,null],[3,"State","","",null,null],[3,"Update","","",null,null],[3,"Commit","","",null,null],[3,"CommitArgs","","",null,null],[12,"entities","","",7,null],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"register_component","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"register_module","","",8,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"build","","",8,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[0,"update_queue","","",null,null],[3,"Monitor","lazybox::ecs::state::update_queue","",null,null],[3,"UpdateQueue","","",null,null],[3,"UpdateQueueReader","","",null,null],[3,"UpdateQueues","","",null,null],[3,"Monitors","","",null,null],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"entities","","",9,{"inputs":[{"name":"self"}],"output":{"name":"idset"}}],[11,"mark","","",9,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"unmark","","",9,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"forget","","",9,null],[11,"modified","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"attach","","",10,null],[11,"detach","","",10,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":null}],[11,"process","","",10,null],[11,"next_attach_query","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_detach_query","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"register","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear_flags","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"monitors","","",12,{"inputs":[{"name":"self"}],"output":{"name":"monitors"}}],[11,"monitor","","",13,{"inputs":[{"name":"self"},{"name":"componenttype"}],"output":{"name":"rwlockreadguard"}}],[11,"new","lazybox::ecs::state","",14,{"inputs":[{"name":"modules"},{"name":"groups"},{"name":"updatequeues"}],"output":{"name":"self"}}],[11,"entity_ref","","",14,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"entityref"}}],[11,"accessor","","",14,{"inputs":[{"name":"self"},{"name":"entityref"}],"output":{"name":"option"}}],[11,"read","","",14,{"inputs":[{"name":"self"}],"output":{"name":"storagereadguard"}}],[11,"write","","",14,{"inputs":[{"name":"self"}],"output":{"name":"storagewriteguard"}}],[11,"module","","",14,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"update","","",14,{"inputs":[{"name":"self"}],"output":{"name":"update"}}],[11,"commit","","",15,{"inputs":[{"name":"self"},{"name":"cx"},{"name":"f"}],"output":null}],[11,"spawn_later","","",16,{"inputs":[{"name":"self"}],"output":{"name":"spawnrequest"}}],[11,"spawn_later_with","","",16,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"update_queue","","",16,{"inputs":[{"name":"self"}],"output":{"name":"updatequeue"}}],[11,"remove_later","","",16,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":null}],[11,"attach_later","","",16,null],[11,"detach_later","","",16,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"update_reader_for","","",7,{"inputs":[{"name":"self"}],"output":{"name":"updatequeuereader"}}],[11,"world_removes","","",7,null],[0,"spawn","lazybox::ecs","",null,null],[3,"SpawnRequest","lazybox::ecs::spawn","An entity to be spawn",null,null],[8,"Prototype","","",null,null],[10,"spawn_later_with","","",17,{"inputs":[{"name":"self"},{"name":"spawnrequest"}],"output":null}],[11,"set","","Sets a component to associate with the spawned entity.",18,null],[11,"entity_ref","","Returns an `EntityRef` to the entity that will be spawned.",18,{"inputs":[{"name":"self"}],"output":{"name":"entityref"}}],[11,"entity","","Returns the entity of this request.",18,{"inputs":[{"name":"self"}],"output":{"name":"entity"}}],[0,"group","lazybox::ecs","",null,null],[3,"Group","lazybox::ecs::group","",null,null],[3,"GroupType","","",null,null],[3,"Groups","","",null,null],[0,"filter","","The filter module",null,null],[3,"Filter","lazybox::ecs::group::filter","Represents a filter of entities",null,null],[12,"require","","Components that are required",19,null],[12,"reject","","Components that are rejected",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"new","","Creates a new empty `Filter`",19,{"inputs":[],"output":{"name":"self"}}],[11,"require","","Adds the component `C` as a *must have* constraint",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reject","","Adds the component `C` as a *must not have* constraint",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"GroupToken","lazybox::ecs::group","",null,null],[10,"name","","",20,{"inputs":[],"output":{"name":"str"}}],[10,"filter","","",20,{"inputs":[],"output":{"name":"filter"}}],[11,"new","","",21,{"inputs":[{"name":"filter"}],"output":{"name":"self"}}],[11,"entities","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setiter"}}],[11,"commit","","",21,{"inputs":[{"name":"self"},{"name":"updatemonitors"}],"output":null}],[11,"update_with","","",21,{"inputs":[{"name":"self"},{"name":"updatemonitors"}],"output":null}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"grouptype"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"grouptype"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"grouptype"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"of","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",23,{"inputs":[{"name":"self"},{"name":"grouptype"},{"name":"group"}],"output":null}],[11,"get","","",23,{"inputs":[{"name":"self"},{"name":"grouptype"}],"output":{"name":"option"}}],[11,"commit","","",23,{"inputs":[{"name":"self"},{"name":"updatemonitors"}],"output":null}],[0,"processor","lazybox::ecs","",null,null],[3,"ActionGraph","lazybox::ecs::processor","",null,null],[3,"SchedulerBuilder","","",null,null],[3,"Scheduler","","",null,null],[4,"UpdateType","","",null,null],[13,"Frame","","",24,null],[13,"Fixed","","",24,null],[13,"Both","","",24,null],[6,"ComponentTypes","","",null,null],[8,"StateAccess","","",null,null],[10,"from_state","","",25,{"inputs":[{"name":"state"}],"output":{"name":"self"}}],[10,"writes","","",25,{"inputs":[],"output":{"name":"vec"}}],[10,"reads","","",25,{"inputs":[],"output":{"name":"vec"}}],[8,"Processor","","",null,null],[10,"writes","","",26,{"inputs":[{"name":"self"}],"output":{"name":"componenttypes"}}],[10,"reads","","",26,{"inputs":[{"name":"self"}],"output":{"name":"componenttypes"}}],[11,"update","","",26,{"inputs":[{"name":"self"},{"name":"state"},{"name":"commit"},{"name":"cx"},{"name":"f32"}],"output":null}],[11,"fixed_update","","",26,{"inputs":[{"name":"self"},{"name":"state"},{"name":"commit"},{"name":"cx"}],"output":null}],[11,"new","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"register","","",27,{"inputs":[{"name":"self"},{"name":"p"},{"name":"updatetype"}],"output":{"name":"self"}}],[11,"build","","",27,{"inputs":[{"name":"self"}],"output":{"name":"scheduler"}}],[11,"update","","",28,{"inputs":[{"name":"self"},{"name":"state"},{"name":"cx"},{"name":"f32"}],"output":null}],[11,"fixed_update","","",28,{"inputs":[{"name":"self"},{"name":"state"},{"name":"cx"}],"output":null}],[0,"module","lazybox::ecs","",null,null],[3,"ModuleType","lazybox::ecs::module","",null,null],[3,"Modules","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[0,"component","","",null,null],[3,"ComponentType","lazybox::ecs::module::component","",null,null],[0,"storage","","",null,null],[3,"StorageLock","lazybox::ecs::module::component::storage","",null,null],[3,"StorageReadGuard","","",null,null],[3,"StorageWriteGuard","","",null,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"read","","",29,{"inputs":[{"name":"self"}],"output":{"name":"storagereadguard"}}],[11,"write","","",29,{"inputs":[{"name":"self"}],"output":{"name":"storagewriteguard"}}],[11,"deref","","",30,null],[11,"deref","","",31,null],[11,"deref_mut","","",31,null],[8,"Component","lazybox::ecs::module::component","",null,null],[16,"Module","","",32,null],[16,"Template","","",32,null],[8,"Template","","",null,null],[11,"hash","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"componenttype"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"componenttype"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"componenttype"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"of","","",33,{"inputs":[],"output":{"name":"self"}}],[8,"Module","lazybox::ecs::module","",null,null],[11,"get_type","","",34,{"inputs":[{"name":"self"}],"output":{"name":"moduletype"}}],[10,"commit","","",34,{"inputs":[{"name":"self"},{"name":"commitargs"},{"name":"cx"}],"output":null}],[8,"HasComponent","","",null,null],[16,"Storage","","",35,null],[10,"read","","",35,{"inputs":[{"name":"self"}],"output":{"name":"storagereadguard"}}],[10,"write","","",35,{"inputs":[{"name":"self"}],"output":{"name":"storagewriteguard"}}],[11,"is","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_ref_unchecked","","",34,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"downcast_mut_unchecked","","",34,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"moduletype"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"moduletype"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"moduletype"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"of","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",37,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"get","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"commit","","",37,{"inputs":[{"name":"self"},{"name":"commitargs"},{"name":"cx"}],"output":null}],[11,"iter","","",37,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Context","lazybox::ecs","",null,null],[0,"modules","lazybox","",null,null],[0,"data","lazybox::modules","",null,null],[3,"DataModule","lazybox::modules::data","",null,null],[0,"storages","","",null,null],[3,"StorageHandler","lazybox::modules::data::storages","",null,null],[12,"storage","","",40,null],[8,"Storage","","Defines any `DataComponent` storage that can be used.",null,null],[16,"Component","","The component that the storage is holding.",41,null],[10,"insert","","",41,null],[10,"remove","","",41,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":null}],[8,"Handler","","Represents a storage Handler.",null,null],[10,"commit","","",42,{"inputs":[{"name":"self"},{"name":"commitargs"}],"output":null}],[11,"is","","Returns true if the boxed type is the same as `T`",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",42,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",42,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",42,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",42,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",40,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"commit","","",40,{"inputs":[{"name":"self"},{"name":"commitargs"}],"output":null}],[8,"DataComponent","lazybox::modules::data","",null,null],[16,"Storage","","",43,null],[11,"new","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"register","","",44,null],[11,"read","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"commit","","",44,{"inputs":[{"name":"self"},{"name":"commitargs"},{"name":"cx"}],"output":null}],[11,"read","","",44,{"inputs":[{"name":"self"}],"output":{"name":"storagereadguard"}}],[11,"write","","",44,{"inputs":[{"name":"self"}],"output":{"name":"storagewriteguard"}}],[0,"storages","lazybox::modules","",null,null],[0,"packed","lazybox::modules::storages","The `Packed` storage module",null,null],[3,"Packed","lazybox::modules::storages::packed","A `Storage` that hold its values in a contiguous vector.",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"packed"}}],[11,"new","","Constructs a new empty Packed<V>` storage.",45,{"inputs":[],"output":{"name":"packed"}}],[11,"insert","","Associate a new Component V to the entity",45,{"inputs":[{"name":"self"},{"name":"accessor"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","Detach a Component V from the entity",45,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":null}],[11,"with_capacity","","Constructs a new empty `Packed<V>` with the given `capacity`",45,{"inputs":[{"name":"usize"}],"output":{"name":"packed"}}],[11,"contains","","Returns true if a component is associated to the entity",45,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"bool"}}],[11,"get","","Returns a immutable access to the associated component",45,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable access to the associated component",45,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"option"}}],[11,"iter","","An iterator visiting all component-entity pairs in arbitrary order.",45,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all component-entity pairs in arbitrary order.",45,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"insert","","",45,{"inputs":[{"name":"self"},{"name":"accessor"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","",45,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":null}],[11,"default","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",45,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"v"}}],[11,"index_mut","","",45,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"v"}}],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"transform","lazybox::modules","",null,null],[3,"Transform","lazybox::modules::transform","",null,null],[12,"position","","",48,null],[12,"rotation","","",48,null],[12,"scale","","",48,null],[3,"TransformTemplate","","",null,null],[12,"parent","","",49,null],[12,"transform","","",49,null],[3,"StaticTransform","","",null,null],[3,"StaticTransformStorage","","",null,null],[3,"TransformModule","","",null,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"transform"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"transform"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"one","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"basis","","",48,{"inputs":[{"name":"self"}],"output":{"name":"basis2"}}],[11,"scale_vector","","",48,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"default_epsilon","","",48,null],[11,"default_max_relative","","",48,null],[11,"default_max_ulps","","",48,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",48,null],[11,"ulps_eq","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"transformtemplate"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"statictransform"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"statictransform"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"statictransform"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"world","","",51,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"option"}}],[11,"iter","","",51,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"index","","",51,{"inputs":[{"name":"self"},{"name":"accessor"}],"output":{"name":"transform"}}],[11,"new","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"commit","","",52,{"inputs":[{"name":"self"},{"name":"commitargs"},{"name":"cx"}],"output":null}],[11,"read","","",52,{"inputs":[{"name":"self"}],"output":{"name":"storagereadguard"}}],[11,"write","","",52,{"inputs":[{"name":"self"}],"output":{"name":"storagewriteguard"}}],[11,"read","","",52,{"inputs":[{"name":"self"}],"output":{"name":"storagereadguard"}}],[11,"write","","",52,{"inputs":[{"name":"self"}],"output":{"name":"storagewriteguard"}}],[0,"maths","lazybox","",null,null],[14,"relative_ne","lazybox::maths","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_ulps_eq","","",null,null],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_ne","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"impl_has_component","lazybox","",null,null],[14,"derive_component","","",null,null]],"paths":[[3,"SliceIter"],[3,"SetIter"],[3,"Entity"],[3,"EntityRef"],[3,"Accessor"],[3,"Entities"],[3,"Iter"],[3,"CommitArgs"],[3,"StateBuilder"],[3,"Monitor"],[3,"UpdateQueue"],[3,"UpdateQueueReader"],[3,"UpdateQueues"],[3,"Monitors"],[3,"State"],[3,"Update"],[3,"Commit"],[8,"Prototype"],[3,"SpawnRequest"],[3,"Filter"],[8,"GroupToken"],[3,"Group"],[3,"GroupType"],[3,"Groups"],[4,"UpdateType"],[8,"StateAccess"],[8,"Processor"],[3,"SchedulerBuilder"],[3,"Scheduler"],[3,"StorageLock"],[3,"StorageReadGuard"],[3,"StorageWriteGuard"],[8,"Component"],[3,"ComponentType"],[8,"Module"],[8,"HasComponent"],[3,"ModuleType"],[3,"Modules"],[3,"Iter"],[3,"IterMut"],[3,"StorageHandler"],[8,"Storage"],[8,"Handler"],[8,"DataComponent"],[3,"DataModule"],[3,"Packed"],[3,"Iter"],[3,"IterMut"],[3,"Transform"],[3,"TransformTemplate"],[3,"StaticTransform"],[3,"StaticTransformStorage"],[3,"TransformModule"]]};
searchIndex["lazybox_assets"] = {"doc":"","items":[[3,"AssetRef","lazybox_assets","",null,null],[3,"AsyncLoader","","",null,null],[3,"ReadyAssetIter","","",null,null],[3,"WaitAssetIter","","",null,null],[3,"Initializer","","",null,null],[4,"Status","","",null,null],[13,"Loading","","",0,null],[13,"Available","","",0,null],[5,"init","","",null,{"inputs":[],"output":{"name":"initializer"}}],[6,"LoaderResult","","",null,null],[8,"Loader","","",null,null],[16,"Output","","",1,null],[10,"load","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"loaderresult"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"assetref"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"assetref"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"assetref"}}],[11,"new","","",2,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"path","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"load","","",3,{"inputs":[{"name":"self"},{"name":"assetref"}],"output":null}],[11,"status","","",3,{"inputs":[{"name":"self"},{"name":"assetref"}],"output":{"name":"option"}}],[11,"ready_assets","","",3,{"inputs":[{"name":"self"}],"output":{"name":"readyassetiter"}}],[11,"wait_for_ready","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"waitassetiter"}}],[11,"wait_all","","",3,{"inputs":[{"name":"self"}],"output":{"name":"waitassetiter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"create_async_loader","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"asyncloader"}}],[11,"done","","",6,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"Status"],[8,"Loader"],[3,"AssetRef"],[3,"AsyncLoader"],[3,"ReadyAssetIter"],[3,"WaitAssetIter"],[3,"Initializer"]]};
searchIndex["lazybox_events"] = {"doc":"","items":[[3,"MessageBox","lazybox_events","",null,null],[3,"MessageSender","","",null,null],[3,"DrainIter","","",null,null],[8,"Message","","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"sender","","",0,{"inputs":[{"name":"self"}],"output":{"name":"messagesender"}}],[11,"drain","","",0,{"inputs":[{"name":"self"}],"output":{"name":"drainiter"}}],[11,"send","","",0,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"MessageBox"],[3,"DrainIter"]]};
searchIndex["lazybox_frameclock"] = {"doc":"","items":[[3,"FrameClock","lazybox_frameclock","",null,null],[3,"UpdatesDrain","","",null,null],[3,"FpsCounter","","",null,null],[11,"start","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"reset","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"drain_updates","","",0,{"inputs":[{"name":"self"}],"output":{"name":"updatesdrain"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"update","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"option"}}]],"paths":[[3,"FrameClock"],[3,"UpdatesDrain"],[3,"FpsCounter"]]};
searchIndex["lazybox_graphics"] = {"doc":"","items":[[3,"Graphics","lazybox_graphics","",null,null],[3,"Frame","","",null,null],[0,"combined","","Combined renderers",null,null],[0,"conrod","lazybox_graphics::combined","",null,null],[3,"Renderer","lazybox_graphics::combined::conrod","",null,null],[6,"ImageMap","","",null,null],[11,"new","","",0,{"inputs":[{"name":"f32"},{"name":"graphics"}],"output":{"name":"self"}}],[11,"resize","","",0,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"graphics"}],"output":null}],[11,"changed","","",0,{"inputs":[{"name":"self"},{"name":"pw"},{"name":"imagemap"},{"name":"frame"}],"output":null}],[11,"render","","",0,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[0,"sprites","lazybox_graphics::combined","",null,null],[3,"Renderer","lazybox_graphics::combined::sprites","",null,null],[3,"Access","","",null,null],[11,"new","","",1,{"inputs":[{"name":"graphics"}],"output":{"name":"self"}}],[11,"resize","","",1,{"inputs":[{"name":"self"},{"name":"graphics"}],"output":null}],[11,"push_layer","","",1,{"inputs":[{"name":"self"},{"name":"layerocclusion"}],"output":{"name":"layerid"}}],[11,"access","","",1,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"submit","","",1,{"inputs":[{"name":"self"},{"name":"camera"},{"name":"ambientlight"},{"name":"frame"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"queue","","",2,{"inputs":[{"name":"self"},{"name":"layerid"}],"output":{"name":"queue"}}],[11,"light_queue","","",2,{"inputs":[{"name":"self"}],"output":{"name":"queue"}}],[0,"specialized","lazybox_graphics","Specialized renderers",null,null],[0,"polygons","lazybox_graphics::specialized","",null,null],[3,"Renderer","lazybox_graphics::specialized::polygons","",null,null],[3,"Render","","",null,null],[0,"triangulation","","Methods for converting shapes into triangles, inspired from piston graphics.",null,null],[5,"stream_polygon","lazybox_graphics::specialized::polygons::triangulation","",null,{"inputs":[{"name":"i"},{"name":"s"}],"output":null}],[5,"stream_ellipse","","",null,{"inputs":[{"name":"point2"},{"name":"vector2"},{"name":"u32"},{"name":"s"}],"output":null}],[5,"stream_round_borders_line","","",null,{"inputs":[{"name":"point2"},{"name":"point2"},{"name":"u32"},{"name":"f32"},{"name":"s"}],"output":null}],[6,"Triangle","lazybox_graphics::specialized::polygons","",null,null],[17,"VERTEX_BUFFER_TRIANGLES","","",null,null],[17,"VERTEX_BUFFER_SIZE","","",null,null],[11,"new","","",3,{"inputs":[{"name":"rendertargetview"},{"name":"gpubuffer"},{"name":"rect"},{"name":"graphics"}],"output":{"name":"self"}}],[11,"resize","","",3,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":null}],[11,"color_target","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"camera","","",3,{"inputs":[{"name":"self"}],"output":{"name":"gpubuffer"}}],[11,"scissor_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"render","","",3,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"render"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"color"},{"name":"triangle"},{"name":"f"},{"name":"frame"}],"output":null}],[11,"add_slice","","",4,null],[11,"before_flush","","",4,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[11,"ensure_drawed","","",4,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[11,"scissor_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[0,"glyphs","lazybox_graphics::specialized","",null,null],[3,"Renderer","lazybox_graphics::specialized::glyphs","",null,null],[0,"cache","","",null,null],[4,"CacheWriteErr","lazybox_graphics::specialized::glyphs::cache","Returned from `Cache::cache_queued`.",null,null],[13,"GlyphTooLarge","","At least one of the queued glyphs is too big to fit into the cache, even if all other glyphs are removed.",5,null],[13,"NoRoomForWholeQueue","","Not all of the requested glyphs can fit into the cache, even if the cache is completely cleared before the attempt.",5,null],[4,"CacheReadErr","","Returned from `Cache::rect_for`.",null,null],[13,"GlyphNotCached","","Indicates that the requested glyph is not present in the cache",6,null],[3,"GlyphCache","","",null,null],[6,"GlyphSurface","","",null,null],[6,"GlyphChannel","","",null,null],[6,"GlyphFormat","","",null,null],[17,"SCALE_TOLERANCE","","",null,null],[17,"POSITION_TOLERANCE","","",null,null],[11,"new","","",7,null],[11,"queue_glyph","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":null}],[11,"cache_queued","","",7,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":{"name":"result"}}],[11,"rect_for","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"name":"result"}}],[11,"new","lazybox_graphics::specialized::glyphs","",8,{"inputs":[{"name":"rendertargetview"},{"name":"gpubuffer"},{"name":"rect"},{"name":"graphics"}],"output":{"name":"self"}}],[11,"resize","","",8,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":null}],[11,"camera","","",8,{"inputs":[{"name":"self"}],"output":{"name":"gpubuffer"}}],[11,"scissor_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"render","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"color"},{"name":"positionedglyph"},{"name":"f"},{"name":"frame"}],"output":null}],[11,"before_flush","","",8,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[0,"images","lazybox_graphics::specialized","",null,null],[3,"Renderer","lazybox_graphics::specialized::images","",null,null],[3,"Render","","",null,null],[11,"new","","",9,{"inputs":[{"name":"rendertargetview"},{"name":"gpubuffer"},{"name":"rect"},{"name":"graphics"}],"output":{"name":"self"}}],[11,"resize","","",9,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":null}],[11,"scissor_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"render","","",9,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"render"}}],[11,"add","","",10,null],[11,"before_flush","","",10,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[11,"ensure_drawed","","",10,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[11,"scissor_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[0,"dynamic_lights","lazybox_graphics::specialized","",null,null],[3,"Renderer","lazybox_graphics::specialized::dynamic_lights","",null,null],[3,"Render","","",null,null],[3,"Queue","","",null,null],[6,"OcclusionFormat","","",null,null],[6,"LightFormat","","",null,null],[17,"CATEGORY_COUNT","","",null,null],[17,"SHADOW_MAP_SIZES","","",null,null],[17,"SHADOW_MAP_COUNTS","","",null,null],[11,"new","","",11,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"},{"name":"rendertargetview"},{"name":"gpubuffer"},{"name":"graphics"}],"output":{"name":"self"}}],[11,"resize","","",11,{"inputs":[{"name":"self"},{"name":"shaderresourceview"},{"name":"shaderresourceview"},{"name":"rendertargetview"}],"output":null}],[11,"light_target","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"render","","",11,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"frame"}],"output":{"name":"render"}}],[11,"add_small","","",12,{"inputs":[{"name":"self"},{"name":"light"},{"name":"frame"}],"output":null}],[11,"add_big","","",12,{"inputs":[{"name":"self"},{"name":"light"},{"name":"frame"}],"output":null}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"light"},{"name":"frame"}],"output":null}],[11,"before_flush","","",12,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[11,"submit","","",13,{"inputs":[{"name":"self"},{"name":"light"}],"output":null}],[0,"sprites","lazybox_graphics::specialized","",null,null],[3,"Renderer","lazybox_graphics::specialized::sprites","",null,null],[3,"Access","","",null,null],[3,"Queue","","",null,null],[17,"SPRITE_BUFFER_SIZE","","",null,null],[11,"new","","",14,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"},{"name":"rendertargetview"},{"name":"gpubuffer"},{"name":"graphics"}],"output":{"name":"self"}}],[11,"resize","","",14,{"inputs":[{"name":"self"},{"name":"rendertargetview"},{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":null}],[11,"color_target","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"normal_target","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"occlusion_target","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"camera","","",14,{"inputs":[{"name":"self"}],"output":{"name":"gpubuffer"}}],[11,"push_layer","","",14,{"inputs":[{"name":"self"},{"name":"layerocclusion"}],"output":{"name":"layerid"}}],[11,"layer_count","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"access","","",14,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"submit","","",14,{"inputs":[{"name":"self"},{"name":"frame"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"queue","","",15,{"inputs":[{"name":"self"},{"name":"layerid"}],"output":{"name":"queue"}}],[11,"submit","","",16,{"inputs":[{"name":"self"},{"name":"sprite"},{"name":"layerorder"}],"output":null}],[0,"camera","lazybox_graphics","",null,null],[3,"Camera","lazybox_graphics::camera","",null,null],[12,"position","","",17,null],[12,"size","","",17,null],[12,"translate","","",17,null],[12,"scale","","",17,null],[3,"Locals","","",null,null],[12,"translate","","",18,null],[12,"scale","","",18,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"point2"},{"name":"vector2"},{"name":"window"}],"output":{"name":"self"}}],[11,"update_transform","","",17,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[11,"window_point_to_gl","","",17,{"inputs":[{"name":"point2"},{"name":"window"}],"output":{"name":"point2"}}],[11,"window_vector_to_gl","","",17,{"inputs":[{"name":"vector2"},{"name":"window"}],"output":{"name":"vector2"}}],[11,"window_point_to_world","","",17,{"inputs":[{"name":"self"},{"name":"point2"},{"name":"window"}],"output":{"name":"point2"}}],[11,"window_vector_to_world","","",17,{"inputs":[{"name":"self"},{"name":"vector2"},{"name":"window"}],"output":{"name":"vector2"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"locals"}}],[11,"query","","",18,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"layer","lazybox_graphics","",null,null],[3,"LayerId","lazybox_graphics::layer","",null,null],[12,"0","","",19,null],[3,"LayerOrder","","",null,null],[12,"0","","",20,null],[4,"LayerOcclusion","","",null,null],[13,"Ignore","","",21,null],[13,"Stack","","",21,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"layerid"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"layerorder"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"layerocclusion"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"layerocclusion"}}],[0,"color","lazybox_graphics","All colors are linear RGBA",null,null],[3,"Color","lazybox_graphics::color","",null,null],[12,"r","","",22,null],[12,"g","","",22,null],[12,"b","","",22,null],[12,"a","","",22,null],[3,"PackedColor","","",null,null],[12,"0","","",23,null],[3,"NormalizedColor","","",null,null],[12,"r","","",24,null],[12,"g","","",24,null],[12,"b","","",24,null],[12,"a","","",24,null],[5,"component_from_float","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u8"}}],[5,"component_to_float","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[5,"component_srgb_to_linear","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"packedcolor"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"normalizedcolor"}}],[11,"from_srgb","","",22,null],[11,"from_array","","",22,null],[11,"to_array","","",22,null],[11,"white","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"from_srgb","","",24,null],[11,"from_array","","",24,null],[11,"to_array","","",24,null],[11,"from","","",23,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"packedcolor"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"normalizedcolor"}],"output":{"name":"self"}}],[11,"from","","",23,{"inputs":[{"name":"normalizedcolor"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"packedcolor"}],"output":{"name":"self"}}],[0,"texture","lazybox_graphics","",null,null],[3,"TextureBind","lazybox_graphics::texture","",null,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"texturebind"}}],[0,"sprites","lazybox_graphics","",null,null],[3,"Sprite","lazybox_graphics::sprites","",null,null],[12,"position","","",26,null],[12,"size","","",26,null],[12,"rotation","","",26,null],[12,"texture","","",26,null],[12,"color","","",26,null],[3,"SpriteTexture","","",null,null],[12,"bind","","",27,null],[12,"coord_inf","","",27,null],[12,"coord_sup","","",27,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sprite"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"spritetexture"}}],[0,"lights","lazybox_graphics","",null,null],[3,"AmbientLight","lazybox_graphics::lights","",null,null],[12,"color","","",28,null],[12,"intensity","","",28,null],[3,"Light","","",null,null],[12,"center","","",29,null],[12,"radius","","",29,null],[12,"source_radius","","",29,null],[12,"source_layer","","",29,null],[12,"color","","",29,null],[12,"intensity","","",29,null],[3,"LightColor","","",null,null],[12,"r","","",30,null],[12,"g","","",30,null],[12,"b","","",30,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ambientlight"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"light"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"lightcolor"}}],[11,"from_srgb","","",30,null],[11,"from_array","","",30,null],[11,"to_array","","",30,null],[0,"types","lazybox_graphics","type aliases",null,null],[8,"TextureFormat","lazybox_graphics::types","Ability to be used for textures.",null,null],[6,"Resources","","",null,null],[6,"CommandBuffer","","",null,null],[6,"Encoder","","",null,null],[6,"Device","","",null,null],[6,"Factory","","",null,null],[6,"ColorFormat","","",null,null],[6,"NormalFormat","","",null,null],[6,"DepthFormat","","",null,null],[6,"OutputColor","","",null,null],[6,"OutputDepth","","",null,null],[6,"PipelineState","","",null,null],[6,"GpuBuffer","","",null,null],[6,"Texture","","",null,null],[6,"Sampler","","",null,null],[6,"ShaderResourceView","","",null,null],[6,"TextureView","","",null,null],[6,"RenderTargetView","","",null,null],[6,"Slice","","",null,null],[6,"Bundle","","",null,null],[6,"GfxRect","","",null,null],[11,"new","lazybox_graphics","",31,null],[11,"resize","","",31,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[11,"draw","","",31,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"bind_textures","","",31,{"inputs":[{"name":"self"},{"name":"textureview"},{"name":"textureview"}],"output":{"name":"texturebind"}}],[11,"update_bound_color","","",31,{"inputs":[{"name":"self"},{"name":"texturebind"},{"name":"textureview"}],"output":null}],[11,"update_bound_normal","","",31,{"inputs":[{"name":"self"},{"name":"texturebind"},{"name":"textureview"}],"output":null}],[11,"unbind_textures","","",31,{"inputs":[{"name":"self"},{"name":"texturebind"}],"output":null}],[11,"load_texture","","",31,null],[11,"load_texture_from_image","","",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"textureview"}}],[11,"load_white_color","","",31,{"inputs":[{"name":"self"}],"output":{"name":"textureview"}}],[11,"load_flat_normal","","",31,{"inputs":[{"name":"self"}],"output":{"name":"textureview"}}],[11,"clear","","",32,{"inputs":[{"name":"self"},{"name":"normalizedcolor"}],"output":null}],[11,"should_flush","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"flush","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"ensure_flushed","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"present","","",32,{"inputs":[{"name":"self"},{"name":"window"}],"output":null}],[11,"partial_cmp","lazybox_graphics::specialized::glyphs::cache","",6,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"ordering"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cachereaderr"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cachewriteerr"}}]],"paths":[[3,"Renderer"],[3,"Renderer"],[3,"Access"],[3,"Renderer"],[3,"Render"],[4,"CacheWriteErr"],[4,"CacheReadErr"],[3,"GlyphCache"],[3,"Renderer"],[3,"Renderer"],[3,"Render"],[3,"Renderer"],[3,"Render"],[3,"Queue"],[3,"Renderer"],[3,"Access"],[3,"Queue"],[3,"Camera"],[3,"Locals"],[3,"LayerId"],[3,"LayerOrder"],[4,"LayerOcclusion"],[3,"Color"],[3,"PackedColor"],[3,"NormalizedColor"],[3,"TextureBind"],[3,"Sprite"],[3,"SpriteTexture"],[3,"AmbientLight"],[3,"Light"],[3,"LightColor"],[3,"Graphics"],[3,"Frame"]]};
searchIndex["lazybox_inputs"] = {"doc":"","items":[[3,"Inputs","lazybox_inputs","",null,null],[0,"error","","",null,null],[3,"Error","lazybox_inputs::error","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",1,null],[13,"Io","","",1,null],[13,"Yaml","","",1,null],[13,"RulesFormat","","",1,null],[13,"InterfaceFormat","","",1,null],[13,"ConditionFormat","","",1,null],[13,"UnknownInterface","","",1,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns *some type that can be converted to `ErrorKind`*, boxes the original error to store as the cause, then returns a new error containing the original error.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",0,null],[11,"kind","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"scanerror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"state","lazybox_inputs","",null,null],[3,"InputState","lazybox_inputs::state","",null,null],[11,"mouse_position","","",3,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"is_mouse_button_held","","",3,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"is_key_held","","",3,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"is_window_focused","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"interaction","lazybox_inputs","",null,null],[3,"InteractionBuilder","lazybox_inputs::interaction","",null,null],[3,"InterfaceBuilder","","",null,null],[3,"Interaction","","",null,null],[6,"Action","","",null,null],[11,"new","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"interface","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"interfacebuilder"}],"output":{"name":"self"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"action","","",5,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"self"}}],[11,"load_profile","","",6,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"new","lazybox_inputs","",7,{"inputs":[{"name":"interactionbuilder"}],"output":{"name":"self"}}],[11,"state","","",7,{"inputs":[{"name":"self"}],"output":{"name":"inputstate"}}],[11,"interaction_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"interaction"}}],[11,"triggered_actions","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"load_interaction_profile","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"handle_event","","",7,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"trigger_state_actions","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_actions","","",7,{"inputs":[{"name":"self"}],"output":null}],[14,"input_interfaces","","",null,null]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"InputState"],[3,"InteractionBuilder"],[3,"InterfaceBuilder"],[3,"Interaction"],[3,"Inputs"]]};
searchIndex["lazybox_settings"] = {"doc":"","items":[[3,"ValueArray","lazybox_settings","",null,null],[3,"ValueMap","","",null,null],[3,"Settings","","",null,null],[4,"Value","","",null,null],[13,"Real","","",0,null],[13,"Integer","","",0,null],[13,"String","","",0,null],[13,"Boolean","","",0,null],[13,"Array","","",0,null],[13,"Map","","",0,null],[13,"None","","",0,null],[13,"NotFound","","",0,null],[4,"Error","","",null,null],[13,"InvalidRoot","","The root must be an hash or null",1,null],[13,"InvalidKey","","Keys must be strings",1,null],[13,"InvalidOverride","","Trying to override a non-existent value",1,null],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_map","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_valid","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"value"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"value"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"value"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"value"}}],[7,"NOT_FOUND","","",null,null],[11,"new","","",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"override_with","","",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_yaml","","",4,{"inputs":[{"name":"yaml"}],"output":{"name":"result"}}],[11,"override_yaml","","",4,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"valuemap"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}]],"paths":[[4,"Value"],[4,"Error"],[3,"ValueArray"],[3,"ValueMap"],[3,"Settings"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["libloading"] = {"doc":"A memory-safer wrapper around system dynamic library loading primitives.","items":[[3,"Library","libloading","A loaded dynamic library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[0,"os","","Unsafe, platform specific bindings to dynamic library loading facilities.",null,null],[0,"unix","libloading::os","UNIX implementation of dynamic library loading.",null,null],[3,"Library","libloading::os::unix","A platform-specific equivalent of the cross-platform `Library`.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[11,"new","","Find and load a shared library (module).",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"this","","Load the dynamic libraries linked into main program.",0,{"inputs":[],"output":{"name":"library"}}],[11,"open","","Find and load a shared library (module).",0,{"inputs":[{"name":"option"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",0,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"windows","libloading::os","Windows implementation of dynamic library loading.",null,null],[0,"changelog","libloading","Project changelog",null,null],[0,"r0_3_2","libloading::changelog","Release 0.3.2 (2017-02-10)",null,null],[0,"r0_3_1","","Release 0.3.1 (2016-10-01)",null,null],[0,"r0_3_0","","Release 0.3.0 (2016-07-27)",null,null],[6,"Result","libloading","",null,null],[11,"new","","Find and load a dynamic library.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"from","libloading::os::unix","",0,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"into_raw","libloading","Extract the wrapped `os::platform::Symbol`.",3,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",3,{"inputs":[{"name":"symbol"},{"name":"l"}],"output":{"name":"symbol"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Library"],[3,"Symbol"],[3,"Library"],[3,"Symbol"]]};
searchIndex["linked_hash_map"] = {"doc":"A HashMap wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[11,"new","","Creates a linked hash map.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hash_state","","Creates an empty linked hash map with the given initial hash state.",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hash_state","","Creates an empty linked hash map with the given initial capacity and hash state.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map of all key-value pairs.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"LinkedHashMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory maps.","items":[[3,"MmapOptions","memmap","",null,null],[12,"stack","","Indicates that the memory map should be suitable for a stack.",0,null],[3,"Mmap","","A memory-mapped buffer.",null,null],[3,"MmapView","","A view of a memory map.",null,null],[3,"MmapViewSync","","A thread-safe view of a memory map.",null,null],[4,"Protection","","Memory map protection.",null,null],[13,"Read","","A read-only memory map. Writes to the memory map will result in a panic.",1,null],[13,"ReadWrite","","A read-write memory map. Writes to the memory map will be reflected in the file after a call to `Mmap::flush` or after the `Mmap` is dropped.",1,null],[13,"ReadCopy","","A read, copy-on-write memory map. Writes to the memory map will not be carried through to the underlying file. It is unspecified whether changes made to the file after the memory map is created will be visible.",1,null],[13,"ReadExecute","","A readable and executable mapping.",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"protection"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protection"}}],[11,"write","","Returns `true` if the `Protection` is writable.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mmapoptions"}}],[11,"open","","Opens a file-backed memory map.",2,{"inputs":[{"name":"file"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_path","","Opens a file-backed memory map.",2,{"inputs":[{"name":"p"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_with_offset","","Opens a file-backed memory map with the specified offset and length.",2,{"inputs":[{"name":"file"},{"name":"protection"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"anonymous","","Opens an anonymous memory map.",2,{"inputs":[{"name":"usize"},{"name":"protection"}],"output":{"name":"result"}}],[11,"anonymous_with_options","","Opens an anonymous memory map with the provided options.",2,{"inputs":[{"name":"usize"},{"name":"protection"},{"name":"mmapoptions"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"set_protection","","Change the `Protection` this mapping was created with.",2,{"inputs":[{"name":"self"},{"name":"protection"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a pointer to the mapped memory.",2,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",2,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",2,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",2,null],[11,"into_view","","Creates a splittable mmap view from the mmap.",2,{"inputs":[{"name":"self"}],"output":{"name":"mmapview"}}],[11,"into_view_sync","","Creates a thread-safe splittable mmap view from the mmap.",2,{"inputs":[{"name":"self"}],"output":{"name":"mmapviewsync"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of the view to the provided offset and length.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",3,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",3,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",3,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",3,null],[11,"clone","","Clones the view of the memory map.",3,{"inputs":[{"name":"self"}],"output":{"name":"mmapview"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of this view to the provided offset and length.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",4,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",4,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",4,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",4,null],[11,"clone","","Clones the view of the memory map.",4,{"inputs":[{"name":"self"}],"output":{"name":"mmapviewsync"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"MmapOptions"],[4,"Protection"],[3,"Mmap"],[3,"MmapView"],[3,"MmapViewSync"]]};
searchIndex["mopa"] = {"doc":"**MOPA: My Own Personal Any.** A macro to implement all the `Any` methods on your own trait.","items":[[8,"Any","mopa","A type to emulate dynamic typing.",null,null],[14,"mopafy","","The macro for implementing all the `Any` methods on your own trait.",null,null]],"paths":[]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current machine. If not possible on the particular architecture returns same as get() which is the logical CPUs.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",11,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["odds"] = {"doc":"Odds and ends — collection miscellania.","items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[12,"0","","",0,null],[5,"fix","","Fixpoint combinator for rust closures, generalized over the return type.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[5,"ref_eq","","Compare if **a** and **b** are equal *as pointers*.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if **a** and **b** are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,null],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"call","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"char","","Extra functions for `char`",null,null],[3,"EncodeUtf8Error","odds::char","Placeholder",null,null],[5,"encode_utf8","","Encode a char into buf using UTF-8.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf8error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"string","odds","Extensions to `&str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[3,"CharChunks","","An iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",null,null],[3,"CharWindows","","An iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",null,null],[3,"CharStr","","A single-char string.",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","Requires `feature=\"std\"`",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",2,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",2,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",2,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StrSlice","","Extension trait for `str` for string slicing without panicking",null,null],[10,"get_slice","","Return a slice of the string, if it is in bounds /and on character boundaries/, otherwise return `None`",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","**Panics** if `index` is out of bounds.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[8,"StrChunksWindows","","Extension traits for the `char_chunks` and `char_windows` methods",null,null],[10,"char_chunks","","Return an iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charchunks"}}],[10,"char_windows","","Return an iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charwindows"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"charchunks"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"charwindows"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"charstr"}}],[11,"new","","Create a new string from `c`.",11,{"inputs":[{"name":"char"}],"output":{"name":"charstr"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"vec","odds","Extensions to `Vec`",null,null],[5,"vec","odds::vec","Create a new vec from the iterable",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[8,"VecExt","","Extra methods for `Vec<T>`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",12,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"VecFindRemove","","",null,null],[16,"Item","","",13,null],[10,"find_remove","","Linear search for the first element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind_remove","","Linear search for the last element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[0,"slice","odds","Extra functions for slices",null,null],[3,"MendSlices","odds::slice","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"RevSlice","","A reversed view of a slice.",null,null],[5,"shared_prefix","","Return the end index of the longest shared (equal) prefix of `a` and `b`.",null,null],[5,"rotate_left","","Rotate `steps` towards lower indices.",null,null],[5,"split_aligned_for","","Split the input slice into three chunks, so that the middle chunk is a slice of a larger \"block size\" (for example T could be u64) that is correctly aligned for `T`.",null,null],[0,"unalign","","",null,null],[3,"UnalignedIter","odds::slice::unalign","An iterator of `T` (by value) where each value read using an unaligned load.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Create an `UnalignedIter` from `ptr` and `end`, which must be spaced an whole number of `T` offsets apart.",14,null],[11,"from_slice","","Create an `UnalignedIter` out of the slice of data, which iterates first in blocks of `T` (unaligned loads), and then leaves a tail of the remaining bytes.",14,null],[11,"tail","","Return a byte iterator of the remaining tail of the iterator; this can be called at any time, but in particular when the iterator has returned None.",14,{"inputs":[{"name":"self"}],"output":{"name":"slicecopyiter"}}],[11,"has_tail","","Return `true` if the tail is not empty.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek_next","","Return the next iterator element, without stepping the iterator.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"iter","odds::slice","",null,null],[3,"SliceCopyIter","odds::slice::iter","Slice (contiguous data) iterator.",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",15,null],[11,"into_raw","","Return the start, end pointer of the iterator",15,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",15,null],[11,"default","","Create an empty `SliceCopyIter`.",15,{"inputs":[],"output":{"name":"self"}}],[8,"SliceFind","odds::slice","Element-finding methods for slices",null,null],[16,"Item","","",16,null],[10,"find","","Linear search for the first occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind","","Linear search for the last occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[8,"SliceFindSplit","","Element-finding methods for slices",null,null],[16,"Item","","",17,null],[10,"find_split","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split","","Linear search for the last occurrence  `elt` in the slice.",17,null],[10,"find_split_mut","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split_mut","","Linear search for the last occurrence  `elt` in the slice.",17,null],[8,"SliceIterExt","","Extra iterator adaptors for iterators of slice elements.",null,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",18,{"inputs":[{"name":"self"}],"output":{"name":"mendslices"}}],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Pod","","\"plain old data\": Types that we can stick arbitrary bit patterns into, and thus use them as blocks in `split_aligned_for` or in `UnalignedIter`.",null,null],[11,"find","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"rfind","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the length of the slice.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inner_ref","","",19,null],[11,"inner_mut","","",19,null],[11,"into_boxed_slice","","",19,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"iter","","Return a by-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"iter_mut","","Return a by-mutable-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"split_at","","",19,null],[11,"split_at_mut","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"revslice"}],"output":{"name":"bool"}}],[11,"eq","","",19,null],[11,"hash","","",19,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[0,"stride","odds","Slice iterator with custom step size",null,null],[3,"Stride","odds::stride","(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[11,"from_ptr_len","","Create a Stride iterator from a raw pointer.",21,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",22,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",21,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",21,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",22,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",22,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[0,"prelude","odds","prelude of often used traits and functions",null,null],[8,"IndexRange","","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Fix"],[3,"EncodeUtf8Error"],[8,"StrExt"],[8,"StrSlice"],[8,"StringExt"],[8,"StrChunksWindows"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"CharChunks"],[3,"CharWindows"],[3,"CharStr"],[8,"VecExt"],[8,"VecFindRemove"],[3,"UnalignedIter"],[3,"SliceCopyIter"],[8,"SliceFind"],[8,"SliceFindSplit"],[8,"SliceIterExt"],[3,"RevSlice"],[3,"MendSlices"],[3,"Stride"],[3,"StrideMut"],[8,"IndexRange"]]};
searchIndex["osmesa_sys"] = {"doc":"","items":[[3,"OsMesa","osmesa_sys","Symbols loaded from a shared library.",null,null],[12,"OSMesaColorClamp","","",0,null],[12,"OSMesaCreateContext","","",0,null],[12,"OSMesaCreateContextExt","","",0,null],[12,"OSMesaCreateContextAttribs","","",0,null],[12,"OSMesaDestroyContext","","",0,null],[12,"OSMesaGetColorBuffer","","",0,null],[12,"OSMesaGetCurrentContext","","",0,null],[12,"OSMesaGetDepthBuffer","","",0,null],[12,"OSMesaGetIntegerv","","",0,null],[12,"OSMesaGetProcAddress","","",0,null],[12,"OSMesaMakeCurrent","","",0,null],[12,"OSMesaPixelStore","","",0,null],[3,"osmesa_context","","",null,null],[5,"OSMesaColorClamp","","",null,null],[5,"OSMesaCreateContext","","",null,{"inputs":[{"name":"c_uint"},{"name":"osmesacontext"}],"output":{"name":"osmesacontext"}}],[5,"OSMesaCreateContextExt","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_int"},{"name":"c_int"},{"name":"c_int"},{"name":"osmesacontext"}],"output":{"name":"osmesacontext"}}],[5,"OSMesaCreateContextAttribs","","",null,null],[5,"OSMesaDestroyContext","","",null,null],[5,"OSMesaGetColorBuffer","","",null,null],[5,"OSMesaGetCurrentContext","","",null,{"inputs":[],"output":{"name":"osmesacontext"}}],[5,"OSMesaGetDepthBuffer","","",null,null],[5,"OSMesaGetIntegerv","","",null,null],[5,"OSMesaGetProcAddress","","",null,null],[5,"OSMesaMakeCurrent","","",null,null],[5,"OSMesaPixelStore","","",null,null],[6,"OSMesaContext","","",null,null],[6,"OSMESAproc","","",null,null],[17,"OSMESA_BGRA","","",null,null],[17,"OSMESA_ARGB","","",null,null],[17,"OSMESA_BGR","","",null,null],[17,"OSMESA_RGB_565","","",null,null],[17,"OSMESA_COLOR_INDEX","","",null,null],[17,"OSMESA_RGB","","",null,null],[17,"OSMESA_RGBA","","",null,null],[17,"OSMESA_WIDTH","","",null,null],[17,"OSMESA_HEIGHT","","",null,null],[17,"OSMESA_FORMAT","","",null,null],[17,"OSMESA_TYPE","","",null,null],[17,"OSMESA_MAX_WIDTH","","",null,null],[17,"OSMESA_MAX_HEIGHT","","",null,null],[17,"OSMESA_ROW_LENGTH","","",null,null],[17,"OSMESA_Y_UP","","",null,null],[17,"OSMESA_DEPTH_BITS","","",null,null],[17,"OSMESA_STENCIL_BITS","","",null,null],[17,"OSMESA_ACCUM_BITS","","",null,null],[17,"OSMESA_PROFILE","","",null,null],[17,"OSMESA_CORE_PROFILE","","",null,null],[17,"OSMESA_COMPAT_PROFILE","","",null,null],[17,"OSMESA_CONTEXT_MAJOR_VERSION","","",null,null],[17,"OSMESA_CONTEXT_MINOR_VERSION","","",null,null],[11,"open","","Tries to open the dynamic library.",0,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"try_loading","","Try loading the static symbols linked to this library.",0,{"inputs":[],"output":{"name":"result"}}]],"paths":[[3,"OsMesa"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[3,"OwningRef","owning_ref","An owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent _object_.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[8,"StableAddress","","Marker trait for expressing that the memory address of the value reachable via a dereference remains identical even if `self` gets moved.",null,null],[8,"CloneStableAddress","","Marker trait for expressing that the memory address of the value reachable via a dereference remains identical even if `self` is a clone.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but dosen’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Variant of `map()` that may fail.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the onwer is wrapped in an additional `Box<O>`.",1,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",1,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[3,"OwningRef"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"OnceState","","State yielded to the `call_once_force` method which can be used to query whether the `Once` was previously poisoned or not.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",1,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",1,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",1,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",1,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"condvar"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",2,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",2,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",2,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",2,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",4,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",4,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",4,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",6,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",6,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",10,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will *not* be invoked.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"once"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"OnceState"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"UnparkResult","parking_lot_core","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",0,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",0,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",0,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",1,null],[3,"ParkToken","","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",3,null],[13,"Invalid","","The validation callback returned false.",3,null],[13,"TimedOut","","The timeout expired.",3,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",4,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",4,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",4,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null],[17,"DEFAULT_PARK_TOKEN","","A default park token to use.",null,null]],"paths":[[3,"UnparkResult"],[3,"UnparkToken"],[3,"ParkToken"],[4,"ParkResult"],[4,"RequeueOp"],[4,"FilterOp"],[3,"SpinWait"]]};
searchIndex["petgraph"] = {"doc":"**petgraph** is a graph data structure library.","items":[[4,"EdgeDirection","petgraph","Edge direction",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge *from* the current node.",0,null],[13,"Incoming","","An `Incoming` edge is an inbound edge *to* the current node.",0,null],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[0,"algo","","Graph algorithms.",null,null],[5,"is_isomorphic","petgraph::algo","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_isomorphic_matching","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"bool"}}],[5,"dijkstra","","Dijkstra's shortest path algorithm.",null,null],[5,"is_cyclic_undirected","","Return `true` if the input graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic","","**Deprecated: Renamed to `is_cyclic_undirected`.**",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic_directed","","Return `true` if the input directed graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"toposort","","Perform a topological sort of a directed graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"scc","","Compute the *strongly connected components* using Kosaraju's algorithm.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"condensation","","Condense every strongly connected component into a single node and return the result.",null,{"inputs":[{"name":"graph"},{"name":"bool"}],"output":{"name":"graph"}}],[5,"connected_components","","Return the number of connected components of the graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[5,"min_spanning_tree","","Compute a *minimum spanning tree* of a graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[0,"graphmap","petgraph","`GraphMap<N, E>` is an undirected graph where node values are mapping keys.",null,null],[3,"GraphMap","petgraph::graphmap","`GraphMap<N, E>` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",1,null],[8,"NodeTrait","","A trait group for `GraphMap`'s node identifier.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphmap"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `GraphMap`.",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",2,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",2,null],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes in the graph.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all nodes and edges",2,{"inputs":[{"name":"self"}],"output":null}],[11,"add_node","","Add node `n` to the graph.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"n"}}],[11,"remove_node","","Return `true` if node `n` was removed.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"contains_node","","Return `true` if the node is contained in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated data `weight`.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"},{"name":"e"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"bool"}}],[11,"nodes","","Return an iterator over the nodes of the graph.",2,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"neighbors","","Return an iterator over the nodes that are connected with `from` by edges.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the nodes that are connected with `from` by edges, paired with the edge weight.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"edges"}}],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",2,{"inputs":[{"name":"self"}],"output":{"name":"alledges"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",1,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"option"}}],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",1,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"ordering"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"graph","petgraph","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"NodeIndex","petgraph::graph","Node identifier.",null,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"Node","","The graph's node type.",null,null],[12,"weight","","Associated node data.",7,null],[3,"Edge","","The graph's edge type.",null,null],[12,"weight","","Associated edge data.",8,null],[3,"Graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Edges","","Iterator over the edges of a node.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[3,"WalkEdges","","**Deprecated.**",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[5,"node_index","","Short version of `NodeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[6,"DefIndex","","The default integer type for node and edge indices in `Graph`. `u32` is the default to reduce the size of the graph's data and improve performance in the common case.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"max","","",9,{"inputs":[],"output":{"name":"self"}}],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"new","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"hash","","",11,null],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"new","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",11,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",7,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",8,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"source","","Return the source node index.",8,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"target","","Return the target node index.",8,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Graph` with directed edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",12,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes (vertices) in the graph.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"node_weight","","Access the weight for node `a`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"edge_weight","","Access the weight for edge `e`.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the neighbors of node `a`, paired with their respective edge weights.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"edges"}}],[11,"edges_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction, paired with the respective edge weights.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"edges"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"externals","","Return an iterator over either the nodes without edges to them (`Incoming`) or from them (`Outgoing`).",12,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",12,{"inputs":[{"name":"self"}],"output":{"name":"nodeindices"}}],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",12,{"inputs":[{"name":"self"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_indices","","Return an iterator over the edge indices of the graph",12,{"inputs":[{"name":"self"}],"output":{"name":"edgeindices"}}],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",12,{"inputs":[{"name":"self"}],"output":{"name":"edgeweightsmut"}}],[11,"raw_nodes","","Access the internal node array.",12,null],[11,"raw_edges","","Access the internal edge array.",12,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",12,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"walk_edges_directed","","**Deprecated:** Use [`.neighbors_directed(a, dir).detach()`][1] instead.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"walkedges"}}],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",12,null],[11,"reverse","","Reverse the direction of all edges",12,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all nodes and edges",12,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_edges","","Remove all edges",12,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Return the current node and edge capacity of the graph.",12,null],[11,"reserve_nodes","","Reserves capacity for at least `additional` more nodes to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_edges","","Reserves capacity for at least `additional` more edges to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact_nodes","","Reserves the minimum capacity for exactly `additional` more nodes to be inserted in the graph. Does nothing if the capacity is already sufficient.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact_edges","","Reserves the minimum capacity for exactly `additional` more edges to be inserted in the graph. Does nothing if the capacity is already sufficient.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit_nodes","","Shrinks the capacity of the underlying nodes collection as much as possible.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit_edges","","Shrinks the capacity of the underlying edges collection as much as possible.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the graph as much as possible.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",12,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",12,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"map","","Create a new `Graph` by mapping node and edge weights to new values.",12,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",12,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments are done, so you may want to go over the result to remove or add edges.",12,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",14,{"inputs":[{"name":"self"}],"output":{"name":"walkneighbors"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",10,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",11,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",18,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_node","","",18,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_edge","","",18,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"walkedges"}}],[11,"next","","Fetch the next edge index in the walk for graph `g`.",19,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_neighbor","","Fetch the next edge index and the next node index in the walk for graph `g`.",19,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nodeindices"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"edgeindices"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[4,"Config","","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",22,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",22,null],[13,"EdgeNoLabel","","Use no edge labels.",22,null],[11,"new","","Create a `Dot` formatting wrapper with default configuration.",23,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",23,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"visit","petgraph","Graph visitor algorithms.",null,null],[3,"AsUndirected","petgraph::visit","Wrapper type for walking the graph as if it is undirected",null,null],[12,"0","","",24,null],[3,"Reversed","","Wrapper type for walking the graph as if all edges are reversed.",null,null],[12,"0","","",25,null],[3,"Dfs","","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",26,null],[12,"discovered","","The map of discovered nodes",26,null],[3,"DfsIter","","An iterator for a depth first traversal of a graph.",null,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",27,null],[12,"discovered","","The map of discovered nodes",27,null],[3,"BfsIter","","An iterator for a breadth first traversal of a graph.",null,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[3,"SubTopo","","A topological order traversal for a subgraph.",null,null],[8,"Graphlike","","Base trait for graphs that defines the node identifier.",null,null],[16,"NodeId","","",28,null],[8,"NeighborIter","","`NeighborIter` gives access to the neighbors iterator.",null,null],[16,"Iter","","",29,null],[10,"neighbors","","Return an iterator that visits all neighbors of the node **n**.",29,null],[8,"NeighborsDirected","","`NeighborsDirected` gives access to neighbors of both `Incoming` and `Outgoing` edges of a node.",null,null],[16,"NeighborsDirected","","",30,null],[10,"neighbors_directed","","Return an iterator that visits all neighbors of the node **n**.",30,null],[8,"Externals","","Externals returns an iterator of all nodes that either have either no incoming or no outgoing edges.",null,null],[16,"Externals","","",31,null],[10,"externals","","Return an iterator of all nodes with no edges in the given direction",31,null],[8,"VisitMap","","A mapping for storing the visited status for `NodeId` `N`.",null,null],[10,"visit","","Return **true** if the value is not already present.",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[10,"is_visited","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[8,"Visitable","","A graph that can create a visitor map.",null,null],[16,"Map","","",33,null],[10,"visit_map","","",33,null],[8,"Revisitable","","A graph that can reset and resize its visitor map.",null,null],[10,"reset_map","","",34,null],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph",null,null],[16,"AdjMatrix","","",35,null],[10,"adjacency_matrix","","",35,null],[10,"is_adjacent","","",35,null],[11,"neighbors","petgraph::graph","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors","petgraph::graphmap","",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"neighbors","petgraph::visit","",24,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","petgraph::graph","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","petgraph::visit","",25,null],[11,"externals","petgraph::graph","",12,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"externals","petgraph::visit","",25,null],[11,"visit_map","petgraph::graph","",12,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"reset_map","","",12,null],[11,"reset_map","petgraph::visit","",25,null],[11,"visit_map","petgraph::graphmap","",2,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"reset_map","","",2,null],[11,"visit_map","petgraph::visit","",24,null],[11,"visit_map","","",25,null],[11,"adjacency_matrix","petgraph::graphmap","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"is_adjacent","","",2,null],[11,"fmt","petgraph::visit","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dfs"}}],[11,"new","","Create a new **Dfs**, using the graph's visitor map, and put **start** in the stack of nodes to visit.",26,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"empty","","Create a new **Dfs** using the graph's visitor map, and no stack.",26,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart the dfs from a particular node.",26,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"new","","",36,null],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart the DFS traversal from a particular node.",36,null],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bfs"}}],[11,"new","","Create a new **Bfs**, using the graph's visitor map, and put **start** in the stack of nodes to visit.",27,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",27,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"new","","",37,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"topo"}}],[11,"new","","Create a new `Topo`, using the graph's visitor map, and put all initial nodes in the to-visit list.",38,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"reset","","Clear visited state, and put all initial nodes into the visit list.",38,{"inputs":[{"name":"self"},{"name":"g"}],"output":null}],[11,"next","","Return the next node in the current topological order traversal, or `None` if the traversal is at the end.",38,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"subtopo"}}],[11,"from_node","","Create a new `SubTopo`, using the graph's visitor map, and put single node in the to-visit list.",39,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"reset_with_node","","Clear visited state, and put a single node into the visit list.",39,{"inputs":[{"name":"self"},{"name":"g"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the current topological order traversal, or `None` if the traversal is at the end.",39,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[0,"unionfind","petgraph","`UnionFind<K>` is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","`UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.",null,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"unionfind"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"find","","Return the representative for `x`.",40,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_mut","","Return the representative for `x`.",40,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"union","","Unify the two sets containing `x` and `y`.",40,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"bool"}}],[11,"into_labeling","","Return a vector mapping each element to its representative.",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"adjacency_matrix","petgraph::graph","",12,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"is_adjacent","","",12,{"inputs":[{"name":"self"},{"name":"fixedbitset"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[8,"EdgeType","petgraph","A graph's edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",41,{"inputs":[],"output":{"name":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into a triple of source, target, edge weight.",null,null],[16,"NodeId","","",42,null],[10,"into_weighted_edge","","",42,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"edgedirection"}}],[11,"opposite","","Return the opposite `EdgeDirection`.",0,{"inputs":[{"name":"self"}],"output":{"name":"edgedirection"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"directed"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"undirected"}}],[11,"is_directed","","",43,{"inputs":[],"output":{"name":"bool"}}],[11,"is_directed","","",44,{"inputs":[],"output":{"name":"bool"}}]],"paths":[[4,"EdgeDirection"],[3,"Ptr"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"Edges"],[3,"AllEdges"],[3,"Node"],[3,"Edge"],[8,"IndexType"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"WalkEdges"],[3,"NodeIndices"],[3,"EdgeIndices"],[4,"Config"],[3,"Dot"],[3,"AsUndirected"],[3,"Reversed"],[3,"Dfs"],[3,"Bfs"],[8,"Graphlike"],[8,"NeighborIter"],[8,"NeighborsDirected"],[8,"Externals"],[8,"VisitMap"],[8,"Visitable"],[8,"Revisitable"],[8,"GetAdjacencyMatrix"],[3,"DfsIter"],[3,"BfsIter"],[3,"Topo"],[3,"SubTopo"],[3,"UnionFind"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[4,"Directed"],[4,"Undirected"]]};
searchIndex["png"] = {"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",null,null],[12,"xppu","","Pixels per unit, X axis",0,null],[12,"yppu","","Pixels per unit, Y axis",0,null],[12,"unit","","Either *Meter* or *Unspecified*",0,null],[3,"FrameControl","","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,null],[12,"width","","Width of the following frame",1,null],[12,"height","","Height of the following frame",1,null],[12,"x_offset","","X position at which to render the following frame",1,null],[12,"y_offset","","Y position at which to render the following frame",1,null],[12,"delay_num","","Frame delay fraction numerator",1,null],[12,"delay_den","","Frame delay fraction denominator",1,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,null],[12,"blend_op","","Type of frame area rendering for this frame",1,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",2,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"bit_depth","","",3,null],[12,"color_type","","",3,null],[12,"interlaced","","",3,null],[12,"trns","","",3,null],[12,"pixel_dims","","",3,null],[12,"palette","","",3,null],[12,"frame_control","","",3,null],[12,"animation_control","","",3,null],[3,"Transformations","","Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"color_type","","",4,null],[12,"bit_depth","","",4,null],[12,"line_size","","",4,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","PNG Encoder",null,null],[3,"Writer","","PNG writer",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",5,null],[13,"RGB","","",5,null],[13,"Indexed","","",5,null],[13,"GrayscaleAlpha","","",5,null],[13,"RGBA","","",5,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",6,null],[13,"Two","","",6,null],[13,"Four","","",6,null],[13,"Eight","","",6,null],[13,"Sixteen","","",6,null],[4,"Unit","","Physical unit of the pixel dimensions",null,null],[13,"Unspecified","","",7,null],[13,"Meter","","",7,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",8,null],[13,"Header","","",8,null],[13,"ChunkBegin","","",8,null],[13,"ChunkComplete","","",8,null],[13,"PixelDimensions","","",8,null],[13,"AnimationControl","","",8,null],[13,"FrameControl","","",8,null],[13,"ImageData","","Decoded raw image data.",8,null],[13,"PartialChunk","","",8,null],[13,"ImageEnd","","",8,null],[4,"DecodingError","","",null,null],[13,"IoError","","",9,null],[13,"Format","","",9,null],[13,"InvalidSignature","","",9,null],[13,"CrcMismatch","","",9,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,null],[12,"crc_val","","Stored CRC32 value",9,null],[12,"crc_sum","","Calculated CRC32 sum",9,null],[12,"chunk","","",9,null],[13,"Other","png","",9,null],[13,"CorruptFlateStream","","",9,null],[4,"EncodingError","","",null,null],[13,"IoError","","",10,null],[13,"Format","","",10,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"save_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"pHYs","","Physical pixel dimensions",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"new","","Creates a new StreamingDecoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",11,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",11,null],[11,"set_param","","",12,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",13,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"info","","",14,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",14,null],[11,"next_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"new","","",15,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_param","","",5,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"set_param","","",6,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",16,null],[11,"write_image_data","","Writes the image data.",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bitdepth"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pixeldimensions"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"info"}}],[11,"size","","Size of the image",3,null],[11,"is_animated","","Returns true if the image is an APNG image.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"hash","","",12,null],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"transformations"}}],[17,"TRANSFORM_IDENTITY","","No transformation",null,null],[17,"TRANSFORM_STRIP_16","","Strip 16-bit samples to 8 bits",null,null],[17,"TRANSFORM_STRIP_ALPHA","","Discard the alpha channel",null,null],[17,"TRANSFORM_PACKING","","Expand 1, 2 and 4-bit samples to bytes",null,null],[17,"TRANSFORM_PACKSWAP","","Change order of packed pixels to LSB first",null,null],[17,"TRANSFORM_EXPAND","","Expand paletted images to RGB, expand grayscale images of less than 8-bit depth to 8-bit depth, and expand tRNS chunks to alpha channels.",null,null],[17,"TRANSFORM_INVERT_MONO","","Invert monochrome images",null,null],[17,"TRANSFORM_SHIFT","","Normalize pixels to the sBIT depth",null,null],[17,"TRANSFORM_BGR","","Flip RGB to BGR, RGBA to BGRA",null,null],[17,"TRANSFORM_SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",null,null],[17,"TRANSFORM_SWAP_ENDIAN","","Byte-swap 16-bit samples",null,null],[17,"TRANSFORM_INVERT_ALPHA","","Change alpha from opacity to transparency",null,null],[17,"TRANSFORM_STRIP_FILLER","","",null,null],[17,"TRANSFORM_STRIP_FILLER_BEFORE","","",null,null],[17,"TRANSFORM_STRIP_FILLER_AFTER","","",null,null],[17,"TRANSFORM_GRAY_TO_RGB","","",null,null],[17,"TRANSFORM_EXPAND_16","","",null,null],[17,"TRANSFORM_SCALE_16","","",null,null],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",17,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["quickersort"] = {"doc":"","items":[[5,"sort","quickersort","Sort using the default comparison function.",null,null],[5,"sort_by","","Sort using a comparison function.",null,null],[5,"sort_by_key","","Sort using a conversion function.",null,null],[5,"insertion_sort","","",null,null],[5,"heapsort","","",null,null],[5,"sort_floats","","Sorts floating point number. The ordering used is | -inf | < 0 | -0 | +0 | > 0 | +inf | NaN |",null,null]],"paths":[]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rayon"] = {"doc":"","items":[[3,"Configuration","rayon","Contains the rayon thread pool configuration.",null,null],[3,"ThreadPool","","",null,null],[3,"Scope","","",null,null],[4,"InitError","","Custom error type for the rayon thread pool configuration.",null,null],[13,"NumberOfThreadsZero","","Error if number of threads is set to zero.",0,null],[13,"GlobalPoolAlreadyInitialized","","Error if the gloal thread pool is initialized multiple times and the configuration is not equal for all configurations.",0,null],[5,"dump_stats","","This is a debugging API not really intended for end users. It will dump some performance statistics out using `println`.",null,{"inputs":[],"output":null}],[5,"initialize","","Initializes the global thread pool. This initialization is **optional**.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[5,"join","","The `join` function takes two closures and potentially runs them in parallel but is not guaranteed to. However, the call to `join` incurs low overhead and is much different compared to spawning two separate threads.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"configuration"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",1,{"inputs":[],"output":{"name":"configuration"}}],[11,"num_threads","","Get the number of threads that will be used for the thread pool. See `set_num_threads` for more information.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_num_threads","","Set the number of threads to be used in the rayon threadpool. The argument `num_threads` must not be zero. If you do not call this function, rayon will select a suitable default (currently, the default is one thread per CPU core).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"new","","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",2,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to `join` which occur there will then operate within that threadpool.",2,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"num_threads","","Returns the number of threads in the thread pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[0,"par_iter","","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[0,"find","rayon::par_iter","",null,null],[5,"find","rayon::par_iter::find","",null,{"inputs":[{"name":"par_iter"},{"name":"find_op"}],"output":{"name":"option"}}],[0,"chain","rayon::par_iter","",null,null],[3,"ChainIter","rayon::par_iter::chain","",null,null],[3,"ChainProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",3,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"chainiter"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",3,null],[11,"weighted","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",4,null],[11,"into_iter","","",4,null],[0,"collect","rayon::par_iter","",null,null],[5,"collect_into","rayon::par_iter::collect","Collects the results of the exact iterator into the specified vector.",null,{"inputs":[{"name":"par_iter"},{"name":"vec"}],"output":null}],[0,"enumerate","rayon::par_iter","",null,null],[3,"Enumerate","rayon::par_iter::enumerate","",null,null],[3,"EnumerateProducer","","//////////////////////////////////////////////////////////////////////// Producer implementation",null,null],[11,"new","","",5,{"inputs":[{"name":"m"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",5,null],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",5,null],[11,"weighted","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",6,null],[11,"into_iter","","",6,null],[0,"filter","rayon::par_iter","",null,null],[3,"Filter","rayon::par_iter::filter","",null,null],[11,"new","","",7,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"drive_unindexed","","",7,null],[11,"upper_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",7,null],[0,"filter_map","rayon::par_iter","",null,null],[3,"FilterMap","rayon::par_iter::filter_map","",null,null],[11,"new","","",8,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"drive_unindexed","","",8,null],[11,"upper_bound","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",8,null],[0,"flat_map","rayon::par_iter","",null,null],[3,"FlatMap","rayon::par_iter::flat_map","",null,null],[11,"new","","",9,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"drive_unindexed","","",9,null],[0,"from_par_iter","rayon::par_iter","",null,null],[8,"FromParallelIterator","rayon::par_iter::from_par_iter","",null,null],[10,"from_par_iter","","",10,{"inputs":[{"name":"par_iter"}],"output":{"name":"self"}}],[0,"internal","rayon::par_iter","Internal traits and functions used to implement parallel iteration. These should be considered highly unstable: users of parallel iterators should not need to interact with them directly. See `README.md` for a high-level overview.",null,null],[5,"bridge","rayon::par_iter::internal","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",11,null],[10,"callback","","",11,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[11,"weighted","","Reports whether the producer has explicit weights.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cost","","Cost to produce `len` items, where `len` must be `N`.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than `N`.",12,null],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",13,null],[16,"Reducer","","",13,null],[16,"Result","","",13,null],[11,"weighted","","Reports whether the consumer has explicit weights.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cost","","If it costs `producer_cost` to produce the items we will consume, returns cost adjusted to account for consuming them.",13,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",13,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",13,null],[11,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",14,null],[10,"consume","","Consume next item and return new sequential state.",14,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",14,null],[11,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",15,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","",16,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[10,"can_split","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"split","","",17,null],[0,"len","rayon::par_iter","",null,null],[3,"ParallelLen","rayon::par_iter::len","",null,null],[12,"maximal_len","","Maximal number of elements that we will write",18,null],[12,"cost","","An estimate of the \"cost\" of this operation. This is a kind of abstract concept you can use to influence how fine-grained the threads are.",18,null],[12,"sparse","","If true, all elements will be written. If false, some may not. For example, `sparse` will be false if there is a filter. When doing a collect, sparse iterators require a compression step.",18,null],[17,"THRESHOLD","","",null,null],[17,"FUNC_ADJUSTMENT","","",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"parallellen"}}],[11,"left_cost","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parallellen"}}],[11,"right_cost","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parallellen"}}],[0,"for_each","rayon::par_iter","",null,null],[5,"for_each","rayon::par_iter::for_each","",null,{"inputs":[{"name":"par_iter"},{"name":"op"}],"output":null}],[0,"fold","rayon::par_iter","",null,null],[3,"Fold","rayon::par_iter::fold","",null,null],[3,"FoldConsumer","","",null,null],[3,"FoldFolder","","",null,null],[5,"fold","","",null,{"inputs":[{"name":"base"},{"name":"identity"},{"name":"fold_op"}],"output":{"name":"fold"}}],[11,"drive_unindexed","","",19,null],[11,"upper_bound","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",19,null],[11,"cost","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"split_at","","",20,null],[11,"into_folder","","",20,null],[11,"split_off","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",20,null],[11,"consume","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",21,null],[0,"reduce","rayon::par_iter","",null,null],[3,"ReduceFolder","rayon::par_iter::reduce","",null,null],[3,"SumOp","","//////////////////////////////////////////////////////////////////////// Specific operations",null,null],[3,"ProductOp","","",null,null],[3,"ReduceWithIdentityOp","","",null,null],[5,"reduce","","",null,{"inputs":[{"name":"par_iter"},{"name":"reduce_op"}],"output":{"name":"t"}}],[17,"SUM","","",null,null],[17,"PRODUCT","","",null,null],[8,"ReduceOp","","Specifies a \"reduce operator\". This is the combination of a start value and a reduce function. The reduce function takes two items and computes a reduced version. The start value `S` is a kind of \"zero\" or \"identity\" value that may be intermingled as needed; ideally, `reduce(S, X)` for any item `X` yields `X`.",null,null],[10,"start_value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"reduce","","",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"consume","","",23,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",23,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"new","","",26,{"inputs":[{"name":"identity"},{"name":"op"}],"output":{"name":"reducewithidentityop"}}],[11,"start_value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"reduce","","",26,{"inputs":[{"name":"self"},{"name":"item"},{"name":"item"}],"output":{"name":"item"}}],[0,"skip","rayon::par_iter","",null,null],[3,"Skip","rayon::par_iter::skip","",null,null],[11,"new","","",27,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"drive_unindexed","","",27,null],[11,"opt_len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"upper_bound","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",27,null],[11,"with_producer","","",27,null],[0,"take","rayon::par_iter","",null,null],[3,"Take","rayon::par_iter::take","",null,null],[11,"new","","",28,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"take"}}],[11,"drive_unindexed","","",28,null],[11,"opt_len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"upper_bound","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",28,null],[11,"with_producer","","",28,null],[0,"slice","rayon::par_iter","",null,null],[3,"SliceIter","rayon::par_iter::slice","",null,null],[3,"ChunksIter","","",null,null],[3,"SliceProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceChunksProducer","","",null,null],[11,"drive_unindexed","","",29,null],[11,"opt_len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",29,null],[11,"len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",29,null],[11,"drive_unindexed","","",30,null],[11,"opt_len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",30,null],[11,"len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",30,null],[11,"cost","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",31,null],[11,"into_iter","","",31,null],[11,"cost","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",32,null],[11,"into_iter","","",32,null],[0,"slice_mut","rayon::par_iter","",null,null],[3,"SliceIterMut","rayon::par_iter::slice_mut","",null,null],[3,"ChunksMutIter","","",null,null],[3,"SliceMutProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceChunksMutProducer","","",null,null],[11,"drive_unindexed","","",33,null],[11,"opt_len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",33,null],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",33,null],[11,"drive_unindexed","","",34,null],[11,"opt_len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",34,null],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",34,null],[11,"cost","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,null],[11,"cost","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",36,null],[11,"into_iter","","",36,null],[0,"string","rayon::par_iter","",null,null],[3,"ParChars","rayon::par_iter::string","",null,null],[11,"drive_unindexed","","",37,null],[11,"can_split","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",37,null],[11,"into_iter","","",37,null],[0,"map","rayon::par_iter","",null,null],[3,"MapFn","rayon::par_iter::map","",null,null],[12,"0","","",38,null],[3,"MapCloned","","",null,null],[3,"MapInspect","","",null,null],[12,"0","","",39,null],[3,"Map","","////////////////////////////////////////////////////////////////////////",null,null],[3,"MapProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"MapIter","","",null,null],[8,"MapOp","","",null,null],[16,"Output","","",40,null],[10,"map","","",40,null],[11,"map","","",38,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"out"}}],[11,"map","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"map","","",39,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"in"}}],[11,"new","","",42,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"weighted","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",43,null],[11,"into_iter","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"weight","rayon::par_iter","",null,null],[3,"Weight","rayon::par_iter::weight","",null,null],[3,"WeightProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",45,{"inputs":[{"name":"m"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",45,null],[11,"weighted","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",46,null],[11,"into_iter","","",46,null],[0,"zip","rayon::par_iter","",null,null],[3,"ZipIter","rayon::par_iter::zip","",null,null],[3,"ZipProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",47,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zipiter"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",47,null],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",47,null],[11,"weighted","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",48,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",48,null],[11,"into_iter","","",48,null],[0,"range","rayon::par_iter","",null,null],[3,"RangeIter","rayon::par_iter::range","",null,null],[11,"into_iter","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"can_split","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",49,null],[11,"drive_unindexed","","",49,null],[11,"can_split","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",49,null],[0,"vec","rayon::par_iter","",null,null],[3,"VecIter","rayon::par_iter::vec","",null,null],[3,"VecProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceDrain","","////////////////////////////////////////////////////////////////////////",null,null],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",50,null],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",50,null],[11,"cost","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",51,null],[11,"into_iter","","",51,null],[11,"drop","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[0,"option","rayon::par_iter","",null,null],[3,"OptionIter","rayon::par_iter::option","",null,null],[3,"OptionProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",53,null],[11,"cost","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",54,null],[11,"into_iter","","",54,null],[0,"collections","rayon::par_iter","",null,null],[0,"noop","","",null,null],[3,"NoopConsumer","rayon::par_iter::noop","",null,null],[3,"NoopReducer","","",null,null],[11,"new","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"cost","","",55,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"split_at","","",55,null],[11,"into_folder","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"consume","","",55,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"split_off","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",55,{"inputs":[{"name":"self"}],"output":{"name":"noopreducer"}}],[11,"reduce","","",56,null],[8,"IntoParallelIterator","rayon::par_iter","",null,null],[16,"Iter","","",57,null],[16,"Item","","",57,null],[10,"into_par_iter","","",57,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",58,null],[16,"Item","","",58,null],[10,"par_iter","","",58,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",59,null],[16,"Item","","",59,null],[10,"par_iter_mut","","",59,null],[8,"ToParallelChunks","","",null,null],[16,"Iter","","",60,null],[16,"Item","","",60,null],[10,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",60,null],[8,"ToParallelChunksMut","","",null,null],[16,"Iter","","",61,null],[16,"Item","","",61,null],[10,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",61,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[16,"Chars","","",62,null],[10,"par_chars","","Returns a parallel iterator over the characters of a string.",62,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",63,null],[11,"weight","","Indicates the relative \"weight\" of producing each item in this parallel iterator. A higher weight will cause finer-grained parallel subtasks. 1.0 indicates something very cheap and uniform, like copying a value out of an array, or computing `x + 1`. If your tasks are either very expensive, or very unpredictable, you are better off with higher values. See also `weight_max`, which is a convenient shorthand to force the finest grained parallel execution posible. Tuning this value should not affect correctness but can improve (or hurt) performance.",63,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"weight_max","","Shorthand for `self.weight(f64::INFINITY)`. This forces the smallest granularity of parallel execution, which makes sense when your parallel tasks are (potentially) very expensive to execute.",63,{"inputs":[{"name":"self"}],"output":{"name":"weight"}}],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,{"inputs":[{"name":"self"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,{"inputs":[{"name":"self"},{"name":"inspect_op"}],"output":{"name":"map"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,{"inputs":[{"name":"self"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,{"inputs":[{"name":"self"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,{"inputs":[{"name":"self"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"reduce_with_identity","","Deprecated. Use `reduce()` instead.",63,null],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The **parallel fold** works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,{"inputs":[{"name":"self"},{"name":"identity"},{"name":"fold_op"}],"output":{"name":"fold"}}],[11,"sum","","Sums up the items in the iterator.",63,null],[11,"product","","Multiplies all the items in the iterator.",63,null],[11,"mul","","DEPRECATED",63,null],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,{"inputs":[{"name":"self"},{"name":"chain"}],"output":{"name":"chainiter"}}],[11,"find_any","","Searches for **some** item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the **first** one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,{"inputs":[{"name":"self"},{"name":"find_op"}],"output":{"name":"option"}}],[11,"any","","Searches for **some** item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,{"inputs":[{"name":"self"},{"name":"any_op"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,{"inputs":[{"name":"self"},{"name":"all_op"}],"output":{"name":"bool"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[8,"BoundedParallelIterator","","A trait for parallel iterators items where the precise number of items is not known, but we can at least give an upper-bound. These sorts of iterators result from filtering.",null,null],[10,"upper_bound","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"ExactParallelIterator","","A trait for parallel iterators items where the precise number of items is known. This occurs when e.g. iterating over a vector. Knowing precisely how many items will be produced is very useful.",null,null],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",65,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",66,{"inputs":[{"name":"self"},{"name":"zip_op"}],"output":{"name":"zipiter"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",66,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for **some** item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the **first** match, and once a match is found we'll attempt to stop processing any more.",66,{"inputs":[{"name":"self"},{"name":"position_op"}],"output":{"name":"option"}}],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to `self` as argument. This can be used to inject new jobs into `self`.",67,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}]],"paths":[[4,"InitError"],[3,"Configuration"],[3,"ThreadPool"],[3,"ChainIter"],[3,"ChainProducer"],[3,"Enumerate"],[3,"EnumerateProducer"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"FromParallelIterator"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"ParallelLen"],[3,"Fold"],[3,"FoldConsumer"],[3,"FoldFolder"],[8,"ReduceOp"],[3,"ReduceFolder"],[3,"SumOp"],[3,"ProductOp"],[3,"ReduceWithIdentityOp"],[3,"Skip"],[3,"Take"],[3,"SliceIter"],[3,"ChunksIter"],[3,"SliceProducer"],[3,"SliceChunksProducer"],[3,"SliceIterMut"],[3,"ChunksMutIter"],[3,"SliceMutProducer"],[3,"SliceChunksMutProducer"],[3,"ParChars"],[3,"MapFn"],[3,"MapInspect"],[8,"MapOp"],[3,"MapCloned"],[3,"Map"],[3,"MapProducer"],[3,"MapIter"],[3,"Weight"],[3,"WeightProducer"],[3,"ZipIter"],[3,"ZipProducer"],[3,"RangeIter"],[3,"VecIter"],[3,"VecProducer"],[3,"SliceDrain"],[3,"OptionIter"],[3,"OptionProducer"],[3,"NoopConsumer"],[3,"NoopReducer"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ToParallelChunks"],[8,"ToParallelChunksMut"],[8,"ParallelString"],[8,"ParallelIterator"],[8,"BoundedParallelIterator"],[8,"ExactParallelIterator"],[8,"IndexedParallelIterator"],[3,"Scope"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[11,"as_str","","Returns the underlying string that's being demangled.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Demangle"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rusttype"] = {"doc":"RustType is a pure Rust alternative to libraries like FreeType.","items":[[3,"Rect","rusttype","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",0,null],[12,"max","","",0,null],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"Line","","A straight line between two points, `p[0]` and `p[1]`",null,null],[12,"p","","",3,null],[3,"Curve","","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`.",null,null],[12,"p","","",4,null],[3,"FontCollection","","A collection of fonts read straight from a font file's data. The data in the collection is not validated. This structure may or may not own the font data.",null,null],[3,"Font","","A single font. This may or may not own the font data.",null,null],[3,"Codepoint","","Represents a Unicode code point.",null,null],[12,"0","","",5,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",6,null],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"HMetrics","","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally.",null,null],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",7,null],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",7,null],[3,"VMetrics","","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines.",null,null],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",8,null],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",8,null],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of course only a guideline given by the font's designers.",8,null],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph.",null,null],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph.",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor *f* in the horizontal direction is achieved by setting `x` equal to *f* times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",9,null],[12,"y","","Vertical scale, in pixels.",9,null],[3,"IntoFontsIter","","",null,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Contour","","A closed loop consisting of a sequence of `Segment`s.",null,null],[12,"segments","","",10,null],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared reference to externally owned data, or managed by reference counting. `SharedBytes` can be conveniently used with `From` and `Into`, and dereferences to the contained bytes.",null,null],[13,"ByRef","","",11,null],[13,"ByArc","","",11,null],[4,"CodepointOrGlyphId","","Represents either a Unicode code point, or a glyph identifier for a font.",null,null],[13,"Codepoint","","",12,null],[13,"GlyphId","","",12,null],[4,"Segment","","Part of a `Contour`, either a `Line` or a `Curve`.",null,null],[13,"Line","","",13,null],[13,"Curve","","",13,null],[5,"point","","A convenience function for generating `Point`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"vector"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"curve"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"width","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"height","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[0,"gpu_cache","","This module provides capabilities for managing a cache of rendered glyphs in GPU memory, with the goal of minimisng the size and frequency of glyph uploads to GPU memory from the CPU.",null,null],[3,"Cache","rusttype::gpu_cache","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[4,"CacheReadErr","","Returned from `Cache::rect_for`.",null,null],[13,"GlyphNotCached","","Indicates that the requested glyph is not present in the cache",14,null],[4,"CacheWriteErr","","Returned from `Cache::cache_queued`.",null,null],[13,"GlyphTooLarge","","At least one of the queued glyphs is too big to fit into the cache, even if all other glyphs are removed.",15,null],[13,"NoRoomForWholeQueue","","Not all of the requested glyphs can fit into the cache, even if the cache is completely cleared before the attempt.",15,null],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"option"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"cachereaderr"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"option"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cachewriteerr"}}],[11,"new","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `Cache::new` for more information.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `Cache::new` for more information.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",16,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":null}],[11,"clear","","Clears the cache. Does not affect the glyph queue.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_queue","","Clears the glyph queue.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"name":"result"}}],[11,"clone","rusttype","",17,{"inputs":[{"name":"self"}],"output":{"name":"fontcollection"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sharedbytes"}}],[11,"deref","","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"arc"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"name":"box"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"sharedbytes"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"codepoint"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"codepointorglyphid"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"positionedglyph"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",9,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[11,"from","","",5,{"inputs":[{"name":"char"}],"output":{"name":"codepoint"}}],[11,"from","","",12,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"glyphid"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"char"}],"output":{"name":"codepointorglyphid"}}],[11,"from_bytes","","Constructs a font collection from an array of bytes, typically loaded from a font file. This array may be owned (e.g. `Vec<u8>`), or borrowed (`&[u8]`). As long as `From<T>` is implemented for `Bytes` for some type `T`, `T` can be used as input.",17,{"inputs":[{"name":"b"}],"output":{"name":"fontcollection"}}],[11,"into_font","","In the common case that a font collection consists of only one font, this function consumes this font collection and turns it into a font. If this is not the case, or the font is not valid (read: not supported by this library), `None` is returned.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"font_at","","Gets the font at index `i` in the font collection, if it exists and is valid. The produced font borrows the font data that is either borrowed or owned by this font collection.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"into_fonts","","Converts `self` into an `Iterator` yielding each `Font` that exists within the collection.",17,{"inputs":[{"name":"self"}],"output":{"name":"intofontsiter"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"v_metrics","","The \"vertical metrics\" for this font at a given scale. These metrics are shared by all of the glyphs in the font. See `VMetrics` for more detail.",18,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"vmetrics"}}],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range `0..self.glyph_count()`",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font. If id corresponds to a glyph identifier, the identifier must be valid (smaller than `self.glyph_count()`), otherwise `None` is returned.",18,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"glyphs_for","","A convenience function.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"glyphiter"}}],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control characters like line breaks into account, as treatment of these is likely to depend on the application.",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"scale"},{"name":"point"}],"output":{"name":"layoutiter"}}],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",18,{"inputs":[{"name":"self"},{"name":"scale"},{"name":"a"},{"name":"b"}],"output":{"name":"f32"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"glyphiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"layoutiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","The glyph identifier for this glyph.",19,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",19,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",19,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"contour"}}],[11,"id","","The glyph identifier for this glyph.",20,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_unscaled","","A reference to this glyph without the scaling",20,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"unscaled","","Removes the scaling from this glyph",20,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the glyph available.",20,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"positionedglyph"}}],[11,"scale","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"h_metrics","","Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for more detail.",20,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of a sequence of segments. Each segment is either a straight `Line` or a `Curve`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the conservative pixel-boundary bounding box. The coordinates are relative to the glyph's origin.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",20,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"id","","The glyph identifier for this glyph.",21,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unpositioned","","A reference to this glyph without positioning",21,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"into_unpositioned","","Removes the positioning from this glyph",21,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle aligned to pixel boundaries that encloses the shape of this glyph at this position.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scale","","",21,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",21,{"inputs":[{"name":"self"},{"name":"o"}],"output":null}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",21,{"inputs":[{"name":"self"}],"output":{"name":"positionedglyph"}}]],"paths":[[3,"Rect"],[3,"Point"],[3,"Vector"],[3,"Line"],[3,"Curve"],[3,"Codepoint"],[3,"GlyphId"],[3,"HMetrics"],[3,"VMetrics"],[3,"Scale"],[3,"Contour"],[4,"SharedBytes"],[4,"CodepointOrGlyphId"],[4,"Segment"],[4,"CacheReadErr"],[4,"CacheWriteErr"],[3,"Cache"],[3,"FontCollection"],[3,"Font"],[3,"Glyph"],[3,"ScaledGlyph"],[3,"PositionedGlyph"],[3,"IntoFontsIter"],[3,"GlyphIter"],[3,"LayoutIter"]]};
searchIndex["scoped_threadpool"] = {"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",null,null],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"pool"}}],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"thread_count","","Returns the number of threads inside this pool.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"execute","","Execute a job on the threadpool.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",1,null],[11,"visit_byte_buf","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"visit_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"new","","Wrap an existing `&[u8]`.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"deref","","",2,null],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by `Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option<T>` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements Deserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_unit","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",7,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",8,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",9,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",11,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",29,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",30,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",32,null],[13,"InvalidType","","The value had an incorrect type.",32,null],[13,"InvalidLength","","The value had an invalid length.",32,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",32,null],[13,"EndOfStream","","EOF while deserializing a value.",32,null],[13,"UnknownVariant","","Unknown variant in enum.",32,null],[13,"UnknownField","","Unknown field in struct.",32,null],[13,"MissingField","","Struct is missing a field.",32,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",33,null],[10,"into_deserializer","","Convert this value into a deserializer.",33,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"custom","","",32,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",32,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_struct_field","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",34,null],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_struct_field","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",35,null],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_struct_field","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",36,null],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",37,null],[11,"deserialize_struct_field","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",37,null],[11,"deserialize_ignored_any","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",38,null],[11,"deserialize_struct_field","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",38,null],[11,"deserialize_ignored_any","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",39,null],[11,"deserialize_struct_field","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",39,null],[11,"deserialize_ignored_any","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",40,null],[11,"deserialize_struct_field","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",40,null],[11,"deserialize_ignored_any","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",41,null],[11,"deserialize_struct_field","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",41,null],[11,"deserialize_ignored_any","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",42,null],[11,"deserialize_struct_field","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",42,null],[11,"deserialize_ignored_any","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",43,null],[11,"deserialize_struct_field","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",43,null],[11,"deserialize_ignored_any","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",43,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",44,null],[11,"deserialize_struct_field","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",44,null],[11,"deserialize_ignored_any","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",45,null],[11,"deserialize_struct_field","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",45,null],[11,"deserialize_ignored_any","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",46,null],[11,"deserialize_struct_field","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",46,null],[11,"deserialize_ignored_any","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",47,null],[11,"deserialize_struct_field","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",47,null],[11,"deserialize_ignored_any","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",47,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",48,null],[11,"deserialize_struct_field","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",48,null],[11,"deserialize_ignored_any","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",49,null],[11,"deserialize_bool","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",49,null],[11,"deserialize_struct_field","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",49,null],[11,"deserialize","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",50,null],[11,"deserialize_bool","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",50,null],[11,"deserialize_struct_field","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",50,null],[11,"deserialize","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",51,null],[11,"deserialize_bool","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",51,null],[11,"deserialize_struct_field","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",51,null],[11,"new","","Construct a new `SeqDeserializer<I>`.",52,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",52,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",52,null],[11,"deserialize_struct_field","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",52,null],[11,"deserialize_ignored_any","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",52,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",53,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",53,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",53,null],[11,"deserialize_struct_field","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",53,null],[11,"deserialize_ignored_any","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>` with a specific length.",54,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"unbounded","","Construct a new `MapDeserializer<I, K, V, E>` that is not bounded by a specific length and that delegates to `iter` for its size hint.",54,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",54,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",54,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",54,null],[11,"deserialize_struct_field","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",54,null],[11,"deserialize_ignored_any","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_key","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",54,null],[11,"visit","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",54,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",55,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",55,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",55,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",55,null],[11,"deserialize_struct_field","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",55,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",55,null],[11,"deserialize_ignored_any","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",56,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",56,null],[11,"deserialize_struct_field","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",56,null],[11,"deserialize_ignored_any","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",57,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",57,null],[11,"deserialize_struct_field","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",57,null],[11,"deserialize_ignored_any","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a `Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",58,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",58,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",58,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a value. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",60,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value. A reasonable default is to forward to `deserialize_f64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows deserializers that encode an optional value as a nullable value to convert the null value into a `None`, and a regular value as `Some(value)`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows deserializers to parse sequences that aren't tagged as sequences.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows deserializers to parse arrays that aren't tagged as arrays.",60,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows deserializers that provide a custom byte vector serialization to properly deserialize the type.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows deserializers to parse sequences that aren't tagged as maps.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows deserializers to a unit struct that aren't tagged as a unit struct.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows deserializers to a newtype struct that aren't tagged as a newtype struct. A reasonable default is to simply deserialize the expected value directly.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows deserializers to parse sequences that aren't tagged as sequences.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows deserializers to parse sequences that aren't tagged as maps.",60,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field name.  This allows deserializers to choose between &str, usize, or &[u8] to properly deserialize a struct field.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows deserializers that provide a custom tuple serialization to properly deserialize the type.",60,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows deserializers that provide a custom enumeration serialization to properly deserialize the type.",60,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",61,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid a copy if it is deserializing a string from a `String` type.  By default it passes a `&str` to the `visit_str` method.",61,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",61,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",62,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",62,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",63,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",63,null],[11,"missing_field","","Report that the struct has a field that wasn't deserialized",63,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the `Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",64,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",64,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",65,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. A good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant. If no tuple variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",65,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant. If no struct variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",65,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",null,null],[11,"new","","Construct a new `LineColIterator<Iter>`.",66,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework. # For Developers who want to serialize objects Implement the `Serialize` trait for the type of objects you want to serialize. Call methods of the `serializer` object. For which methods to call and how to do so, look at the documentation of the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust's builtin types. Tuples implement the `Serialize` trait if they have at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less. You can always forward array serialization to slice serialization, which works for any length. Long tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In that case the number of fields is irrelevant.",null,null],[8,"Error","","`Error` is a trait that allows a `Serialize` to generically create a `Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",67,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",67,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",69,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to `serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no state is required.",69,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to `serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()` if no state is required.",69,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed to `serialize_tuple_struct_elt`, and consumed by `serialize_tuple_struct_end`. Use `()` if no state is required.",69,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed to `serialize_tuple_variant_elt`, and consumed by `serialize_tuple_variant_end`. Use `()` if no state is required.",69,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to `serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no state is required.",69,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to `serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()` if no state is required.",69,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed to `serialize_struct_variant_elt`, and consumed by `serialize_struct_variant_end`. Use `()` if no state is required.",69,null],[10,"serialize_bool","","Serializes a `bool` value.",69,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate between `isize` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between `i8` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between `i16` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between `i32` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes an `i64` value.",69,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between `usize` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between `u8` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between `u16` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between `u32` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a `u64` value.",69,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between `f32` and `f64`, a reasonable implementation would be to cast the value to `f64` and forward to `serialize_f64`.",69,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes an `f64` value.",69,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serializes a character. If the format does not support characters, it is reasonable to serialize it as a single element `str` or a `u32`.",69,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&str`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more efficiently than other types of slices. If no efficient implementation is available, a reasonable implementation would be to forward to `serialize_seq`. If forwarded, the implementation looks usually just like this: ```rust let mut state = try!(self.serialize_seq(value)); for b in value {     try!(self.serialize_seq_elt(&mut state, b)); } self.serialize_seq_end(state) ```",69,null],[10,"serialize_unit","","Serializes a `()` value. It's reasonable to just not serialize anything.",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to forward to `serialize_unit`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments. A reasonable implementation would be to forward to `serialize_unit`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype struct, to be more efficiently serialized than a tuple struct with multiple items. A reasonable implementation would be to forward to `serialize_tuple_struct` or to just serialize the inner value without wrapping.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized than a variant with multiple items. A reasonable implementation would be to forward to `serialize_tuple_variant`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called `serialize_seq`.",69,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",69,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at deserialization time. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable implementation would be to forward to `serialize_seq`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more calls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A reasonable implementation would be to forward to `serialize_seq`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called `serialize_tuple`.",69,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",69,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero or more calls to `serialize_tuple_struct_elt`, then a call to `serialize_tuple_struct_end`. A reasonable implementation would be to forward to `serialize_tuple`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called `serialize_tuple_struct`.",69,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",69,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero or more calls to `serialize_tuple_variant_elt`, then a call to `serialize_tuple_variant_end`. A reasonable implementation would be to forward to `serialize_tuple_struct`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called `serialize_tuple_variant`.",69,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",69,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more calls to `serialize_map_key` and `serialize_map_value`, then a call to `serialize_map_end`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_end","","Finishes serializing a map.",69,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more calls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called `serialize_struct`.",69,null],[10,"serialize_struct_end","","Finishes serializing a struct.",69,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero or more calls to `serialize_struct_variant_elt`, then a call to `serialize_struct_variant_end`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called `serialize_struct_variant`.",69,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",69,null],[14,"forward_to_deserialize","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`. Every given method ignores all arguments and forwards to `deserialize`. Note that `deserialize_enum` simply returns an `Error::invalid_type`; a better approach is tracked in [serde-rs/serde#521][1].",null,null]],"paths":[[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["serde_codegen"] = {"doc":"","items":[],"paths":[]};
searchIndex["serde_codegen_internals"] = {"doc":"","items":[[3,"Ctxt","serde_codegen_internals","",null,null],[0,"ast","","",null,null],[3,"Item","serde_codegen_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"item"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"attr","serde_codegen_internals","",null,null],[3,"Name","serde_codegen_internals::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"FieldDefault","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",5,null],[13,"Default","","The default is given by `std::default::Default::default()`.",5,null],[13,"Path","","The default is given by this function.",5,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",7,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"deny_unknown_fields","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ser_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",8,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"skip_deserializing","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fielddefault"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"fielddefault"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",9,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"skip_serializing","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fielddefault"}}],[11,"serialize_with","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_codegen_internals","",10,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"FieldDefault"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_derive"] = {"doc":"","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["shared_library"] = {"doc":"","items":[[4,"LoadingError","shared_library","Error that can happen while loading the shared library.",null,null],[13,"LibraryNotFound","","",0,null],[12,"descr","shared_library::LoadingError","",0,null],[13,"SymbolNotFound","shared_library","One of the symbols could not be found in the library.",0,null],[12,"symbol","shared_library::LoadingError","The symbol.",0,null],[0,"dynamic_library","shared_library","Dynamic library facilities.",null,null],[3,"DynamicLibrary","shared_library::dynamic_library","",null,null],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a handle to the calling process",1,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",1,{"inputs":[{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an environment variable for this platforms dylib search path.",1,null],[11,"envvar","","Returns the environment variable for this process's dynamic library search path",1,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this process",1,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Access the value at the symbol of the dynamic library",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","shared_library","",0,{"inputs":[{"name":"self"}],"output":{"name":"loadingerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"shared_library","","",null,null]],"paths":[[4,"LoadingError"],[3,"DynamicLibrary"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline and fall back to the heap for larger allocations.","items":[[3,"SmallVecMoveIterator","smallvec","",null,null],[3,"SmallVec","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","",null,null],[10,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Array","","",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","NB: For efficiency reasons (avoiding making a second copy of the inline elements), this actually clears out the original array instead of moving it. FIXME: Rename this to `drain`? It’s more like `Vec::drain` than `Vec::into_iter`.",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvecmoveiterator"}}],[11,"push","","",3,null],[11,"push_all_move","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","",3,null],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","",3,null],[11,"insert","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}]],"paths":[[8,"VecLike"],[8,"Array"],[3,"SmallVecMoveIterator"],[3,"SmallVec"]]};
searchIndex["stb_truetype"] = {"doc":"","items":[[3,"FontInfo","stb_truetype","",null,null],[3,"Vertex","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[12,"cx","","",0,null],[12,"cy","","",0,null],[3,"Rect","","",null,null],[12,"x0","","",1,null],[12,"y0","","",1,null],[12,"x1","","",1,null],[12,"y1","","",1,null],[3,"HMetrics","","",null,null],[12,"advance_width","","",2,null],[12,"left_side_bearing","","",2,null],[3,"VMetrics","","",null,null],[12,"ascent","","",3,null],[12,"descent","","",3,null],[12,"line_gap","","",3,null],[4,"VertexType","","",null,null],[13,"MoveTo","","",4,null],[13,"LineTo","","",4,null],[13,"CurveTo","","",4,null],[5,"is_font","","",null,null],[5,"get_font_offset_for_index","","Each .ttf/.ttc file may have more than one font. Each font has a sequential index number starting from 0. Call this function to get the font offset for a given index; it returns None if the index is out of range. A regular .ttf file will only define one font and it always be at offset 0, so it will return Some(0) for index 0, and None for all other indices. You can just skip this step if you know it's that kind of font.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fontinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vertex"}}],[11,"vertex_type","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vertextype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vertextype"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"new","","Given an offset into the file that defines a font, this function builds the necessary cached info for the rest of the system.",5,{"inputs":[{"name":"data"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_num_glyphs","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"find_glyph_index","","If you're going to perform multiple operations on the same character and you want a speed-up, call this function with the character you're going to process, then use glyph-based functions instead of the codepoint-based functions.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"get_codepoint_shape","","Returns the series of vertices encoding the shape of the glyph for this codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_glyph_box","","Like `get_codepoint_box`, but takes a glyph index. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_codepoint_box","","Gets the bounding box of the visible part of the glyph, in unscaled coordinates",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"is_glyph_empty","","returns true if nothing is drawn for this glyph",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"get_glyph_shape","","Like `get_codepoint_shape`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_glyph_h_metrics","","like `get_codepoint_h_metrics`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_glyph_kern_advance","","like `get_codepoint_kern_advance`, but takes glyph indices instead. Use this if you have cached the glyph indices for the codepoints.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_kern_advance","","an additional amount to add to the 'advance' value between cp1 and cp2",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_h_metrics","","`left_side_bearing` is the offset from the current horizontal position to the left edge of the character `advance_width` is the offset from the current horizontal position to the next horizontal position these are expressed in unscaled coordinates",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_v_metrics","","`ascent` is the coordinate above the baseline the font extends; descent is the coordinate below the baseline the font extends (i.e. it is typically negative) `line_gap` is the spacing between one row's descent and the next row's ascent... so you should advance the vertical position by `ascent - descent + line_gap` these are expressed in unscaled coordinates, so you must multiply by the scale factor for a given size",5,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"get_bounding_box","","the bounding box around all possible characters",5,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"scale_for_pixel_height","","computes a scale factor to produce a font whose \"height\" is 'pixels' tall. Height is measured as the distance from the highest ascender to the lowest descender; in other words, it's equivalent to calling GetFontVMetrics and computing:       scale = pixels / (ascent - descent) so if you prefer to measure height by the ascent only, use a similar calculation.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"scale_for_mapping_em_to_pixels","","computes a scale factor to produce a font whose EM size is mapped to `pixels` tall. This is probably what traditional APIs compute, but I'm not positive.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"get_glyph_bitmap_box_subpixel","","like `get_codepoint_bitmap_box_subpixel`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_glyph_bitmap_box","","like `get_codepoint_bitmap_box`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_codepoint_bitmap_box_subpixel","","same as get_codepoint_bitmap_box, but you can specify a subpixel shift for the character",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_codepoint_bitmap_box","","get the bounding box of the bitmap centered around the glyph origin; so the bitmap width is x1-x0, height is y1-y0, and location to place the bitmap top left is (left_side_bearing*scale, y0). (Note that the bitmap uses y-increases-down, but the shape uses y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}]],"paths":[[3,"Vertex"],[3,"Rect"],[3,"HMetrics"],[3,"VMetrics"],[4,"VertexType"],[3,"FontInfo"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","",null,null],[12,"ident","","",1,null],[12,"vis","","",1,null],[12,"attrs","","",1,null],[12,"ty","","",1,null],[3,"Variant","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"data","","",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",9,null],[12,"bounds","","",9,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"MacroInput","","",null,null],[12,"ident","","",10,null],[12,"vis","","",10,null],[12,"attrs","","",10,null],[12,"generics","","",10,null],[12,"body","","",10,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",11,null],[12,"types","","The type parameters for this path segment, if present.",11,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",11,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",12,null],[12,"ty","","",12,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",13,null],[12,"abi","","",13,null],[12,"lifetimes","","",13,null],[12,"inputs","","",13,null],[12,"output","","",13,null],[12,"variadic","","",13,null],[3,"MutTy","","",null,null],[12,"ty","","",14,null],[12,"mutability","","",14,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",15,null],[12,"output","","`C`",15,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","",16,null],[12,"segments","","",16,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","",17,null],[12,"parameters","","",17,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",18,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",18,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",19,null],[12,"position","","",19,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",20,null],[12,"ty","","",20,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",21,null],[13,"Inner","","",21,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",22,null],[13,"List","","List meta item.",22,null],[13,"NameValue","","Name value meta item.",22,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",23,null],[13,"Literal","","A literal.",23,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",24,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",24,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",24,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",24,null],[13,"Cast","","A cast (`foo as f64`)",24,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",24,null],[13,"Index","","An indexing operation (`foo[2]`)",24,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",24,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",24,null],[4,"VariantData","","",null,null],[13,"Struct","","",25,null],[13,"Tuple","","",25,null],[13,"Unit","","",25,null],[4,"Visibility","","",null,null],[13,"Public","","",26,null],[13,"Crate","","",26,null],[13,"Restricted","","",26,null],[13,"Inherited","","",26,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",27,null],[13,"Maybe","","",27,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",28,null],[13,"Region","","",28,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",29,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",29,null],[4,"FloatTy","","",null,null],[13,"F32","","",30,null],[13,"F64","","",30,null],[13,"Unsuffixed","","",30,null],[4,"IntTy","","",null,null],[13,"Isize","","",31,null],[13,"I8","","",31,null],[13,"I16","","",31,null],[13,"I32","","",31,null],[13,"I64","","",31,null],[13,"Usize","","",31,null],[13,"U8","","",31,null],[13,"U16","","",31,null],[13,"U32","","",31,null],[13,"U64","","",31,null],[13,"Unsuffixed","","",31,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",32,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",32,null],[13,"Byte","","A byte char (`b'f'`)",32,null],[13,"Char","","A character literal (`'a'`)",32,null],[13,"Int","","An integer literal (`1`)",32,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",32,null],[13,"Bool","","A boolean literal",32,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",33,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",33,null],[4,"Body","","",null,null],[13,"Enum","","",34,null],[13,"Struct","","",34,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",35,null],[13,"Sub","","The `-` operator (subtraction)",35,null],[13,"Mul","","The `*` operator (multiplication)",35,null],[13,"Div","","The `/` operator (division)",35,null],[13,"Rem","","The `%` operator (modulus)",35,null],[13,"And","","The `&&` operator (logical and)",35,null],[13,"Or","","The `||` operator (logical or)",35,null],[13,"BitXor","","The `^` operator (bitwise xor)",35,null],[13,"BitAnd","","The `&` operator (bitwise and)",35,null],[13,"BitOr","","The `|` operator (bitwise or)",35,null],[13,"Shl","","The `<<` operator (shift left)",35,null],[13,"Shr","","The `>>` operator (shift right)",35,null],[13,"Eq","","The `==` operator (equality)",35,null],[13,"Lt","","The `<` operator (less than)",35,null],[13,"Le","","The `<=` operator (less than or equal to)",35,null],[13,"Ne","","The `!=` operator (not equal to)",35,null],[13,"Ge","","The `>=` operator (greater than or equal to)",35,null],[13,"Gt","","The `>` operator (greater than)",35,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",36,null],[13,"Not","","The `!` operator for logical inversion",36,null],[13,"Neg","","The `-` operator for negation",36,null],[4,"Abi","","",null,null],[13,"Named","","",37,null],[13,"Rust","","",37,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",38,null],[13,"Ty","","Everything else",38,null],[4,"Mutability","","",null,null],[13,"Mutable","","",39,null],[13,"Immutable","","",39,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",40,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",40,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",41,null],[13,"Array","","A fixed length array (`[T; n]`)",41,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",41,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",41,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",41,null],[13,"Never","","The never type (`!`)",41,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",41,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",41,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",41,null],[13,"PolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",41,null],[13,"ImplTrait","","An `impl TraitA+TraitB` type.",41,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",41,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",41,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",42,null],[13,"Normal","","",42,null],[5,"parse_macro_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"aster","","",null,null],[5,"id","syn::aster","",null,{"inputs":[{"name":"i"}],"output":{"name":"ident"}}],[5,"from_generics","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[5,"where_predicate","","",null,{"inputs":[],"output":{"name":"wherepredicatebuilder"}}],[5,"ty","","",null,{"inputs":[],"output":{"name":"tybuilder"}}],[5,"path","","",null,{"inputs":[],"output":{"name":"pathbuilder"}}],[0,"generics","","",null,null],[3,"GenericsBuilder","syn::aster::generics","",null,null],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",43,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",43,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",43,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",43,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime_names","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",43,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"lifetime_name","","",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"lifetime","","",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_ty_params","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param_ids","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param","","",43,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"ty_param_id","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty_param","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"with_predicates","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_predicate","","",43,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[11,"predicate","","",43,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicatebuilder"}}],[11,"add_lifetime_bound","","",43,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"add_ty_param_bound","","",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"strip_bounds","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_lifetimes","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_ty_params","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_predicates","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","",43,null],[11,"invoke","","",43,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",43,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"invoke","","",43,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[0,"ident","syn::aster","",null,null],[8,"ToIdent","syn::aster::ident","",null,null],[10,"to_ident","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"to_ident","syn","",45,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[0,"invoke","syn::aster","",null,null],[3,"Identity","syn::aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",46,null],[10,"invoke","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"invoke","","",47,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"a"}}],[0,"lifetime","syn::aster","",null,null],[3,"LifetimeDefBuilder","syn::aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",48,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",49,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime","syn","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"into_lifetime_def","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"new","syn::aster::lifetime","",50,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",50,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",50,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build","","",50,null],[0,"path","syn::aster","",null,null],[3,"PathBuilder","syn::aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",51,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","syn","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","",45,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","syn::aster::path","",52,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",52,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",52,null],[11,"global","","",52,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ids","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentbuilder"}}],[11,"ids","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"build","","",53,null],[11,"invoke","","",53,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"self"}}],[11,"with_callback","","",54,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_generics","","",54,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",54,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",54,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",54,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"with_tys","","",54,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",54,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_binding","","",54,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"self"}}],[11,"binding","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"tybuilder"}}],[11,"no_return","","",54,null],[11,"return_","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build_return","","",54,null],[11,"build","","",54,null],[11,"invoke","","",54,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",55,null],[11,"invoke","","",56,null],[0,"qpath","syn::aster","",null,null],[3,"QPathBuilder","syn::aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf` and `Path`.",57,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",57,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"ty","","Build a qualified path first by starting with a type builder.",57,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","Build a qualified path with a concrete type and path.",57,null],[11,"invoke","","",57,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"as_","","Build a qualified path with a path builder.",58,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"id","","",58,null],[11,"segment","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"qpathqselfbuilder"}}],[11,"id","","",59,null],[11,"segment","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",59,null],[0,"ty","syn::aster","",null,null],[3,"TyBuilder","syn::aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyObjectSumBuilder","","",null,null],[3,"TyObjectSumTyBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",60,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",60,null],[11,"id","","",60,null],[11,"build_path","","",60,null],[11,"build_qpath","","",60,null],[11,"path","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",60,{"inputs":[{"name":"self"}],"output":{"name":"qpathbuilder"}}],[11,"isize","","",60,null],[11,"i8","","",60,null],[11,"i16","","",60,null],[11,"i32","","",60,null],[11,"i64","","",60,null],[11,"usize","","",60,null],[11,"u8","","",60,null],[11,"u16","","",60,null],[11,"u32","","",60,null],[11,"u64","","",60,null],[11,"f32","","",60,null],[11,"f64","","",60,null],[11,"bool","","",60,null],[11,"unit","","",60,null],[11,"tuple","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tytuplebuilder"}}],[11,"build_slice","","",60,null],[11,"slice","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"ref_","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tyrefbuilder"}}],[11,"never","","",60,null],[11,"infer","","",60,null],[11,"option","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"result","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"phantom_data","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"box_","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"iterator","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"object_sum","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"impl_trait","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tyimpltraittybuilder"}}],[11,"invoke","","",61,null],[11,"invoke","","",62,null],[11,"invoke","","",63,null],[11,"mut_","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"lifetime","","",64,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build_ty","","",64,null],[11,"ty","","",64,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",64,null],[11,"invoke","","",65,null],[11,"invoke","","",66,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",67,null],[11,"invoke","","",68,null],[11,"invoke","","",69,null],[11,"invoke","","",70,null],[11,"invoke","","",71,null],[11,"with_bounds","","",72,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",72,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",72,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",72,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",72,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",72,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",72,null],[11,"invoke","","",72,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_bounds","","",73,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",73,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",73,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",73,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",73,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",73,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",73,null],[11,"invoke","","",73,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_tys","","",74,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",74,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",74,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","",74,null],[11,"invoke","","",74,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[0,"ty_param","syn::aster","",null,null],[3,"TyParamBuilder","syn::aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",75,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",75,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",75,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",75,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_default","","",75,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"default","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_bound","","",75,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",75,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_trait_bound","","",75,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"trait_bound","","",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime_bound","","",75,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",75,null],[11,"invoke","","",75,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",75,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",75,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"new","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",76,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build_trait","","",76,null],[11,"trait_","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"maybe_trait","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"iterator","","",76,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",76,null],[11,"invoke","","",77,null],[11,"with_callback","","",78,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_lifetime","","",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",78,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"build","","",78,null],[11,"invoke","","",78,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[0,"where_predicate","syn::aster","",null,null],[3,"WherePredicateBuilder","syn::aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[11,"new","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",79,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",79,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"lifetime","","",79,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereregionpredicatebuilder"}}],[11,"invoke","","",79,null],[11,"invoke","","",80,null],[11,"with_for_lifetime","","",81,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",81,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",81,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"bound","","",81,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",81,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",81,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"invoke","","",81,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",81,null],[11,"with_for_lifetime","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",82,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",82,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",82,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",82,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",82,null],[11,"invoke","","",82,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",82,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",83,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",83,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",25,null],[11,"fields_mut","","",25,null],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",32,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",32,null],[11,"from","","",32,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"hash","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",32,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"macroinput"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"op","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"hash","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"hash","","",40,null],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"none","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_macro_input","","",null,{"inputs":[{"name":"v"},{"name":"macroinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",86,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_macro_input","","",86,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":null}],[11,"visit_ty","","",86,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",86,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",86,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",86,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",86,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",86,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",86,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",86,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",86,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",86,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",86,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",86,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",86,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",86,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",86,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",86,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",86,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[14,"walk_list","syn","",null,null]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereRegionPredicate"],[3,"MacroInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[8,"Invoke"],[3,"Identity"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyObjectSumBuilder"],[3,"TyObjectSumTyBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"ImplGenerics"],[3,"TyGenerics"],[8,"Visitor"]]};
searchIndex["tempfile"] = {"doc":"Securely create and manage temporary files. Temporary files created by this create are automatically deleted.","items":[[3,"NamedTempFile","tempfile","A named temporary file.",null,null],[3,"NamedTempFileOptions","","Create a new temporary file with custom parameters.",null,null],[3,"PersistError","","Error returned when persisting a temporary file fails",null,null],[12,"error","","The underlying IO error.",0,null],[12,"file","","The temporary file that couldn't be persisted.",0,null],[5,"tempfile","","Create an unnamed temporary file.",null,{"inputs":[],"output":{"name":"result"}}],[5,"tempfile_in","","Create an unnamed temporary file in the specified directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"as_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"persisterror"}],"output":{"name":"namedtempfile"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new temporary file.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_in","","Create a new temporary file in the specified directory.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"path","","Get the temporary file's path.",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary file.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"persist","","Persist the temporary file at the target path.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"reopen","","Reopen the temporary file.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",1,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"namedtempfileoptions"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"namedtempfileoptions"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"namedtempfileoptions"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new NamedTempFileOptions",2,{"inputs":[],"output":{"name":"self"}}],[11,"prefix","","Set a custom filename prefix.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"suffix","","Set a custom filename suffix.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"rand_bytes","","Set the number of random bytes.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"create","","Create the named temporary file.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create_in","","Create the named temporary file in the specified directory.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}]],"paths":[[3,"PersistError"],[3,"NamedTempFile"],[3,"NamedTempFileOptions"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. ```[x, y, width height]``` where ```(x, y)``` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["wayland_client"] = {"doc":"","items":[[3,"EventIterator","wayland_client","",null,null],[3,"ProxyId","","",null,null],[4,"Event","","",null,null],[13,"Wayland","","",0,null],[5,"is_available","","Checks if the wayland lib is available",null,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"eventiterator"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"egl","","",null,null],[3,"WlEglSurface","wayland_client::egl","",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","",2,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"}],"output":{"name":"wleglsurface"}}],[11,"destroy","","",2,{"inputs":[{"name":"self"}],"output":{"name":"wlsurface"}}],[11,"get_size","","",2,null],[11,"resize","","",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"egl_surface_ptr","","",2,null],[11,"egl_surfaceptr","","DEPRECATED",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"wlsurface"}}],[0,"cursor","wayland_client","",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"inputs":[{"name":"option"},{"name":"u32"},{"name":"wlshm"}],"output":{"name":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","Retrieve the name of this cursor.",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"image_count","","Retrieve the number of images contained in this animated cursor",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"frame","","Retrieve the image number of cursor animation.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"frame_and_duration","","Retrieve the image number and its duration.",4,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"wlbuffer"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[0,"wayland","wayland_client","",null,null],[3,"WlCallback","wayland_client::wayland","callback object",null,null],[3,"WlDisplay","","core global object",null,null],[3,"WlRegistry","","global registry object",null,null],[3,"ReadEventsGuard","","A guard over a read intention.",null,null],[4,"WlCallbackEvent","","",null,null],[13,"Done","","done event",6,null],[4,"WlDisplayEvent","","",null,null],[13,"Error","","fatal error event",7,null],[13,"DeleteId","","acknowledge object ID deletion",7,null],[4,"WlRegistryEvent","","",null,null],[13,"Global","","announce global object",8,null],[13,"GlobalRemove","","announce removal of global object",8,null],[4,"WaylandProtocolEvent","","An event generated by the protocol wayland.",null,null],[13,"WlDisplay","","",9,null],[13,"WlRegistry","","",9,null],[13,"WlCallback","","",9,null],[13,"WlShm","","",9,null],[13,"WlBuffer","","",9,null],[13,"WlDataOffer","","",9,null],[13,"WlDataSource","","",9,null],[13,"WlDataDevice","","",9,null],[13,"WlShellSurface","","",9,null],[13,"WlSurface","","",9,null],[13,"WlSeat","","",9,null],[13,"WlPointer","","",9,null],[13,"WlKeyboard","","",9,null],[13,"WlTouch","","",9,null],[13,"WlOutput","","",9,null],[5,"get_display","","",null,{"inputs":[],"output":{"name":"option"}}],[0,"compositor","","",null,null],[3,"WlCompositor","wayland_client::wayland::compositor","the compositor singleton",null,null],[3,"WlRegion","","region interface",null,null],[3,"WlSurface","","an onscreen surface",null,null],[4,"WlSurfaceEvent","","",null,null],[13,"Enter","","surface enters an output",10,null],[13,"Leave","","surface leaves an output",10,null],[0,"data_device","wayland_client::wayland","",null,null],[3,"WlDataDevice","wayland_client::wayland::data_device","data transfer device",null,null],[3,"WlDataDeviceManager","","data transfer interface",null,null],[3,"WlDataOffer","","offer to transfer data",null,null],[3,"WlDataSource","","offer to transfer data",null,null],[4,"WlDataDeviceEvent","","",null,null],[13,"DataOffer","","introduce a new wl_data_offer",11,null],[13,"Enter","","initiate drag-and-drop session",11,null],[13,"Leave","","end drag-and-drop session",11,null],[13,"Motion","","drag-and-drop session motion",11,null],[13,"Drop","","end drag-and-drag session successfully",11,null],[13,"Selection","","advertise new selection",11,null],[4,"WlDataOfferEvent","","",null,null],[13,"Offer","","advertise offered mime type",12,null],[4,"WlDataSourceEvent","","",null,null],[13,"Target","","a target accepts an offered mime type",13,null],[13,"Send","","send the data",13,null],[13,"Cancelled","","selection was cancelled",13,null],[0,"output","wayland_client::wayland","",null,null],[3,"WlOutput","wayland_client::wayland::output","compositor output region",null,null],[4,"WlOutputEvent","","",null,null],[13,"Geometry","","properties of the output",14,null],[13,"Mode","","advertise available modes for the output",14,null],[13,"Done","","sent all information about output",14,null],[13,"Scale","","output scaling properties",14,null],[4,"WlOutputSubpixel","","subpixel geometry information",null,null],[13,"Unknown","","",15,null],[13,"None","","",15,null],[13,"HorizontalRgb","","",15,null],[13,"HorizontalBgr","","",15,null],[13,"VerticalRgb","","",15,null],[13,"VerticalBgr","","",15,null],[4,"WlOutputTransform","","transform from framebuffer to output",null,null],[13,"Normal","","",16,null],[13,"T90","","",16,null],[13,"T180","","",16,null],[13,"T270","","",16,null],[13,"Flipped","","",16,null],[13,"Flipped90","","",16,null],[13,"Flipped180","","",16,null],[13,"Flipped270","","",16,null],[0,"WlOutputMode","","mode information",null,null],[3,"WlOutputMode","wayland_client::wayland::output::WlOutputMode","",null,null],[17,"Current","","indicates this is the current mode",null,null],[17,"Preferred","","indicates this is the preferred mode",null,null],[0,"seat","wayland_client::wayland","",null,null],[3,"WlKeyboard","wayland_client::wayland::seat","keyboard input device",null,null],[3,"WlPointer","","pointer input device",null,null],[3,"WlSeat","","group of input devices",null,null],[3,"WlTouch","","touchscreen input device",null,null],[4,"WlKeyboardEvent","","",null,null],[13,"Keymap","","keyboard mapping",17,null],[13,"Enter","","enter event",17,null],[13,"Leave","","leave event",17,null],[13,"Key","","key event",17,null],[13,"Modifiers","","modifier and group state",17,null],[13,"RepeatInfo","","repeat rate and delay",17,null],[4,"WlPointerEvent","","",null,null],[13,"Enter","","enter event",18,null],[13,"Leave","","leave event",18,null],[13,"Motion","","pointer motion event",18,null],[13,"Button","","pointer button event",18,null],[13,"Axis","","axis event",18,null],[4,"WlSeatEvent","","",null,null],[13,"Capabilities","","seat capabilities changed",19,null],[13,"Name","","unique identifier for this seat",19,null],[4,"WlTouchEvent","","",null,null],[13,"Down","","touch down event and beginning of a touch sequence",20,null],[13,"Up","","end of a touch event sequence",20,null],[13,"Motion","","update of touch point coordinates",20,null],[13,"Frame","","end of touch frame event",20,null],[13,"Cancel","","touch session cancelled",20,null],[4,"WlKeyboardKeyState","","physical key state",null,null],[13,"Released","","key is not pressed",21,null],[13,"Pressed","","key is pressed",21,null],[4,"WlKeyboardKeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",22,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",22,null],[4,"WlPointerAxis","","axis types",null,null],[13,"VerticalScroll","","",23,null],[13,"HorizontalScroll","","",23,null],[4,"WlPointerButtonState","","physical button state",null,null],[13,"Released","","The button is not pressed",24,null],[13,"Pressed","","The button is pressed",24,null],[0,"WlSeatCapability","","seat capability bitmask",null,null],[3,"WlSeatCapability","wayland_client::wayland::seat::WlSeatCapability","",null,null],[17,"Pointer","","The seat has pointer devices",null,null],[17,"Keyboard","","The seat has one or more keyboards",null,null],[17,"Touch","","The seat has touch devices",null,null],[0,"shell","wayland_client::wayland","",null,null],[3,"WlShell","wayland_client::wayland::shell","create desktop-style surfaces",null,null],[3,"WlShellSurface","","desktop-style metadata interface",null,null],[4,"WlShellSurfaceEvent","","",null,null],[13,"Ping","","ping client",25,null],[13,"Configure","","suggest resize",25,null],[13,"PopupDone","","popup interaction is done",25,null],[4,"WlShellSurfaceFullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",26,null],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",26,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",26,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",26,null],[0,"WlShellSurfaceResize","","edge values for resizing",null,null],[3,"WlShellSurfaceResize","wayland_client::wayland::shell::WlShellSurfaceResize","",null,null],[17,"None","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"TopLeft","","",null,null],[17,"BottomLeft","","",null,null],[17,"Right","","",null,null],[17,"TopRight","","",null,null],[17,"BottomRight","","",null,null],[0,"WlShellSurfaceTransient","wayland_client::wayland::shell","details of transient behaviour",null,null],[3,"WlShellSurfaceTransient","wayland_client::wayland::shell::WlShellSurfaceTransient","",null,null],[17,"Inactive","","do not set keyboard focus",null,null],[0,"shm","wayland_client::wayland","",null,null],[3,"WlBuffer","wayland_client::wayland::shm","content for a wl_surface",null,null],[3,"WlShm","","shared memory support",null,null],[3,"WlShmPool","","a shared memory pool",null,null],[4,"WlBufferEvent","","",null,null],[13,"Release","","compositor releases buffer",27,null],[4,"WlShmEvent","","",null,null],[13,"Format","","pixel format description",28,null],[4,"WlShmFormat","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format",29,null],[13,"Xrgb8888","","32-bit RGB format",29,null],[13,"C8","","",29,null],[13,"Rgb332","","",29,null],[13,"Bgr233","","",29,null],[13,"Xrgb4444","","",29,null],[13,"Xbgr4444","","",29,null],[13,"Rgbx4444","","",29,null],[13,"Bgrx4444","","",29,null],[13,"Argb4444","","",29,null],[13,"Abgr4444","","",29,null],[13,"Rgba4444","","",29,null],[13,"Bgra4444","","",29,null],[13,"Xrgb1555","","",29,null],[13,"Xbgr1555","","",29,null],[13,"Rgbx5551","","",29,null],[13,"Bgrx5551","","",29,null],[13,"Argb1555","","",29,null],[13,"Abgr1555","","",29,null],[13,"Rgba5551","","",29,null],[13,"Bgra5551","","",29,null],[13,"Rgb565","","",29,null],[13,"Bgr565","","",29,null],[13,"Rgb888","","",29,null],[13,"Bgr888","","",29,null],[13,"Xbgr8888","","",29,null],[13,"Rgbx8888","","",29,null],[13,"Bgrx8888","","",29,null],[13,"Abgr8888","","",29,null],[13,"Rgba8888","","",29,null],[13,"Bgra8888","","",29,null],[13,"Xrgb2101010","","",29,null],[13,"Xbgr2101010","","",29,null],[13,"Rgbx1010102","","",29,null],[13,"Bgrx1010102","","",29,null],[13,"Argb2101010","","",29,null],[13,"Abgr2101010","","",29,null],[13,"Rgba1010102","","",29,null],[13,"Bgra1010102","","",29,null],[13,"Yuyv","","",29,null],[13,"Yvyu","","",29,null],[13,"Uyvy","","",29,null],[13,"Vyuy","","",29,null],[13,"Ayuv","","",29,null],[13,"Nv12","","",29,null],[13,"Nv21","","",29,null],[13,"Nv16","","",29,null],[13,"Nv61","","",29,null],[13,"Yuv410","","",29,null],[13,"Yvu410","","",29,null],[13,"Yuv411","","",29,null],[13,"Yvu411","","",29,null],[13,"Yuv420","","",29,null],[13,"Yvu420","","",29,null],[13,"Yuv422","","",29,null],[13,"Yvu422","","",29,null],[13,"Yuv444","","",29,null],[13,"Yvu444","","",29,null],[0,"subcompositor","wayland_client::wayland","",null,null],[3,"WlSubcompositor","wayland_client::wayland::subcompositor","sub-surface compositing",null,null],[3,"WlSubsurface","","sub-surface interface to a wl_surface",null,null],[11,"sync_roundtrip","wayland_client::wayland","Synchronous roundtrip",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispatch","","Blocking dispatch",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispatch_pending","","Non-blocking dispatch",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_read","","Prepare an conccurent read",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"flush","","Non-blocking write to the server",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"read_events","","Read events",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cancel","","Cancel the read",31,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[8,"Proxy","wayland_client","",null,null],[10,"ptr","","",32,null],[10,"interface","","",32,null],[10,"interface_name","","The internal name of this interface, as advertized by the registry if it is a global.",32,{"inputs":[],"output":{"name":"str"}}],[10,"version","","The maximum version of this interface handled by the library.",32,{"inputs":[],"output":{"name":"u32"}}],[10,"id","","Get the id of this proxy",32,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[10,"from_ptr","","Creates a proxy from a fresh ptr",32,null],[10,"from_ptr_no_own","","Creates a proxy from a ptr that is managed elsewhere",32,null],[10,"set_evt_iterator","","Set the event iterator associated to this proxy",32,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"proxyid"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"proxyid"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[14,"wayland_env","","This macro allows you to create a simple wayland environment handler.",null,null],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceResize","",34,null],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",34,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitor_assign","","Adds the set of flags.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitxor_assign","","Toggles the set of flags.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"sub_assign","","Disables all flags enabled in the set.",34,{"inputs":[{"name":"self"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"self"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"extend","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",34,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceTransient","",35,null],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",35,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",35,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",35,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitor_assign","","Adds the set of flags.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitxor_assign","","Toggles the set of flags.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"sub_assign","","Disables all flags enabled in the set.",35,{"inputs":[{"name":"self"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",35,{"inputs":[{"name":"self"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"extend","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",35,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"hash","wayland_client::wayland::seat::WlSeatCapability","",36,null],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wlseatcapability"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",36,{"inputs":[{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitor_assign","","Adds the set of flags.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitxor_assign","","Toggles the set of flags.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"sub_assign","","Disables all flags enabled in the set.",36,{"inputs":[{"name":"self"},{"name":"wlseatcapability"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",36,{"inputs":[{"name":"self"}],"output":{"name":"wlseatcapability"}}],[11,"extend","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",36,{"inputs":[{"name":"t"}],"output":{"name":"wlseatcapability"}}],[11,"hash","wayland_client::wayland::output::WlOutputMode","",37,null],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"wloutputmode"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",37,{"inputs":[{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitor_assign","","Adds the set of flags.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitxor_assign","","Toggles the set of flags.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",37,{"inputs":[{"name":"self"},{"name":"wloutputmode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",37,{"inputs":[{"name":"self"}],"output":{"name":"wloutputmode"}}],[11,"extend","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"wloutputmode"}}],[11,"fmt","wayland_client::wayland","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ptr","","",30,null],[11,"interface","","",30,null],[11,"interface_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",30,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",30,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",30,null],[11,"from_ptr_no_own","","",30,null],[11,"set_evt_iterator","","",30,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sync","","asynchronous roundtrip",30,{"inputs":[{"name":"self"}],"output":{"name":"wlcallback"}}],[11,"get_registry","","get global registry object",30,{"inputs":[{"name":"self"}],"output":{"name":"wlregistry"}}],[11,"ptr","","",38,null],[11,"interface","","",38,null],[11,"interface_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",38,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",38,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",38,null],[11,"from_ptr_no_own","","",38,null],[11,"set_evt_iterator","","",38,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","bind an object to the display",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"t"}}],[11,"drop","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",39,null],[11,"interface","","",39,null],[11,"interface_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",39,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",39,null],[11,"from_ptr_no_own","","",39,null],[11,"set_evt_iterator","","",39,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",40,null],[11,"interface","","",40,null],[11,"interface_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",40,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",40,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",40,null],[11,"from_ptr_no_own","","",40,null],[11,"set_evt_iterator","","",40,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_surface","","create new surface",40,{"inputs":[{"name":"self"}],"output":{"name":"wlsurface"}}],[11,"create_region","","create new region",40,{"inputs":[{"name":"self"}],"output":{"name":"wlregion"}}],[11,"drop","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::shm","",41,null],[11,"interface","","",41,null],[11,"interface_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",41,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",41,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",41,null],[11,"from_ptr_no_own","","",41,null],[11,"set_evt_iterator","","",41,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_buffer","","create a buffer from the pool",41,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":{"name":"wlbuffer"}}],[11,"destroy","","destroy the pool",41,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","change the size of the pool mapping",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"drop","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",42,null],[11,"interface","","",42,null],[11,"interface_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",42,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",42,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",42,null],[11,"from_ptr_no_own","","",42,null],[11,"set_evt_iterator","","",42,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_pool","","create a shm pool",42,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"i32"}],"output":{"name":"wlshmpool"}}],[11,"drop","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",43,null],[11,"interface","","",43,null],[11,"interface_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",43,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",43,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",43,null],[11,"from_ptr_no_own","","",43,null],[11,"set_evt_iterator","","",43,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","destroy a buffer",43,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::data_device","",44,null],[11,"interface","","",44,null],[11,"interface_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",44,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",44,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",44,null],[11,"from_ptr_no_own","","",44,null],[11,"set_evt_iterator","","",44,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"accept","","accept one of the offered mime types",44,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"option"}],"output":null}],[11,"receive","","request that the data is transferred",44,{"inputs":[{"name":"self"},{"name":"string"},{"name":"rawfd"}],"output":null}],[11,"destroy","","destroy data offer",44,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",45,null],[11,"interface","","",45,null],[11,"interface_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",45,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",45,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",45,null],[11,"from_ptr_no_own","","",45,null],[11,"set_evt_iterator","","",45,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"offer","","add an offered mime type",45,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"destroy","","destroy the data source",45,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",46,null],[11,"interface","","",46,null],[11,"interface_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",46,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",46,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",46,null],[11,"from_ptr_no_own","","",46,null],[11,"set_evt_iterator","","",46,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_drag","","start drag-and-drop operation",46,{"inputs":[{"name":"self"},{"name":"option"},{"name":"wlsurface"},{"name":"option"},{"name":"u32"}],"output":null}],[11,"set_selection","","copy data to the selection",46,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"}],"output":null}],[11,"release","","destroy data device",46,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",47,null],[11,"interface","","",47,null],[11,"interface_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",47,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",47,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",47,null],[11,"from_ptr_no_own","","",47,null],[11,"set_evt_iterator","","",47,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_data_source","","create a new data source",47,{"inputs":[{"name":"self"}],"output":{"name":"wldatasource"}}],[11,"get_data_device","","create a new data device",47,{"inputs":[{"name":"self"},{"name":"wlseat"}],"output":{"name":"wldatadevice"}}],[11,"drop","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::shell","",48,null],[11,"interface","","",48,null],[11,"interface_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",48,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",48,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",48,null],[11,"from_ptr_no_own","","",48,null],[11,"set_evt_iterator","","",48,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_shell_surface","","create a shell surface from a surface",48,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"wlshellsurface"}}],[11,"drop","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",49,null],[11,"interface","","",49,null],[11,"interface_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",49,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",49,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",49,null],[11,"from_ptr_no_own","","",49,null],[11,"set_evt_iterator","","",49,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pong","","respond to a ping event",49,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"move_","","start an interactive move",49,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"}],"output":null}],[11,"resize","","start an interactive resize",49,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"set_toplevel","","make the surface a toplevel surface",49,{"inputs":[{"name":"self"}],"output":null}],[11,"set_transient","","make the surface a transient surface",49,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"set_fullscreen","","make the surface a fullscreen surface",49,{"inputs":[{"name":"self"},{"name":"wlshellsurfacefullscreenmethod"},{"name":"u32"},{"name":"option"}],"output":null}],[11,"set_popup","","make the surface a popup surface",49,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"set_maximized","","make the surface a maximized surface",49,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_title","","set surface title",49,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"set_class","","set surface class",49,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"drop","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",50,null],[11,"interface","","",50,null],[11,"interface_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",50,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",50,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",50,null],[11,"from_ptr_no_own","","",50,null],[11,"set_evt_iterator","","",50,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","delete surface",50,{"inputs":[{"name":"self"}],"output":null}],[11,"attach","","set the surface contents",50,{"inputs":[{"name":"self"},{"name":"option"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"damage","","mark part of the surface damaged",50,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"frame","","request a frame throttling hint",50,{"inputs":[{"name":"self"}],"output":{"name":"wlcallback"}}],[11,"set_opaque_region","","set opaque region",50,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_input_region","","set input region",50,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"commit","","commit pending surface state",50,{"inputs":[{"name":"self"}],"output":null}],[11,"set_buffer_transform","","sets the buffer transformation",50,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_buffer_scale","","sets the buffer scaling factor",50,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"drop","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::seat","",51,null],[11,"interface","","",51,null],[11,"interface_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",51,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",51,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",51,null],[11,"from_ptr_no_own","","",51,null],[11,"set_evt_iterator","","",51,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_pointer","","return pointer object",51,{"inputs":[{"name":"self"}],"output":{"name":"wlpointer"}}],[11,"get_keyboard","","return keyboard object",51,{"inputs":[{"name":"self"}],"output":{"name":"wlkeyboard"}}],[11,"get_touch","","return touch object",51,{"inputs":[{"name":"self"}],"output":{"name":"wltouch"}}],[11,"release","","release the seat object",51,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",52,null],[11,"interface","","",52,null],[11,"interface_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",52,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",52,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",52,null],[11,"from_ptr_no_own","","",52,null],[11,"set_evt_iterator","","",52,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_cursor","","set the pointer surface",52,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"option"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"release","","release the pointer object",52,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",53,null],[11,"interface","","",53,null],[11,"interface_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",53,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",53,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",53,null],[11,"from_ptr_no_own","","",53,null],[11,"set_evt_iterator","","",53,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"release","","release the keyboard object",53,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",54,null],[11,"interface","","",54,null],[11,"interface_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",54,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",54,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",54,null],[11,"from_ptr_no_own","","",54,null],[11,"set_evt_iterator","","",54,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"release","","release the touch object",54,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::output","",55,null],[11,"interface","","",55,null],[11,"interface_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",55,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",55,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",55,null],[11,"from_ptr_no_own","","",55,null],[11,"set_evt_iterator","","",55,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",56,null],[11,"interface","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",56,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",56,null],[11,"from_ptr_no_own","","",56,null],[11,"set_evt_iterator","","",56,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","destroy region",56,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","add rectangle to region",56,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"subtract","","subtract rectangle from region",56,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","wayland_client::wayland::subcompositor","",57,null],[11,"interface","","",57,null],[11,"interface_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",57,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",57,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",57,null],[11,"from_ptr_no_own","","",57,null],[11,"set_evt_iterator","","",57,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","unbind from the subcompositor interface",57,{"inputs":[{"name":"self"}],"output":null}],[11,"get_subsurface","","give a surface the role sub-surface",57,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wlsurface"}],"output":{"name":"wlsubsurface"}}],[11,"drop","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr","","",58,null],[11,"interface","","",58,null],[11,"interface_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",58,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",58,{"inputs":[{"name":"self"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",58,null],[11,"from_ptr_no_own","","",58,null],[11,"set_evt_iterator","","",58,{"inputs":[{"name":"self"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","remove sub-surface interface",58,{"inputs":[{"name":"self"}],"output":null}],[11,"set_position","","reposition the sub-surface",58,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"place_above","","restack the sub-surface",58,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":null}],[11,"place_below","","restack the sub-surface",58,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":null}],[11,"set_sync","","set sub-surface to synchronized mode",58,{"inputs":[{"name":"self"}],"output":null}],[11,"set_desync","","set sub-surface to desynchronized mode",58,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",58,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"Event"],[3,"EventIterator"],[3,"WlEglSurface"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[4,"WlCallbackEvent"],[4,"WlDisplayEvent"],[4,"WlRegistryEvent"],[4,"WaylandProtocolEvent"],[4,"WlSurfaceEvent"],[4,"WlDataDeviceEvent"],[4,"WlDataOfferEvent"],[4,"WlDataSourceEvent"],[4,"WlOutputEvent"],[4,"WlOutputSubpixel"],[4,"WlOutputTransform"],[4,"WlKeyboardEvent"],[4,"WlPointerEvent"],[4,"WlSeatEvent"],[4,"WlTouchEvent"],[4,"WlKeyboardKeyState"],[4,"WlKeyboardKeymapFormat"],[4,"WlPointerAxis"],[4,"WlPointerButtonState"],[4,"WlShellSurfaceEvent"],[4,"WlShellSurfaceFullscreenMethod"],[4,"WlBufferEvent"],[4,"WlShmEvent"],[4,"WlShmFormat"],[3,"WlDisplay"],[3,"ReadEventsGuard"],[8,"Proxy"],[3,"ProxyId"],[3,"WlShellSurfaceResize"],[3,"WlShellSurfaceTransient"],[3,"WlSeatCapability"],[3,"WlOutputMode"],[3,"WlRegistry"],[3,"WlCallback"],[3,"WlCompositor"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"WlShell"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"WlOutput"],[3,"WlRegion"],[3,"WlSubcompositor"],[3,"WlSubsurface"]]};
searchIndex["wayland_kbd"] = {"doc":"Keyboard mapping utility for `wayland-client` using libxkbcommon.","items":[[3,"MappedKeyboard","wayland_kbd","A wayland keyboard mapped to its keymap",null,null],[4,"MappedKeyboardError","","",null,null],[13,"XKBNotFound","","",0,null],[13,"NoKeyboardOnSeat","","",0,null],[11,"new","","",1,{"inputs":[{"name":"h"}],"output":{"name":"result"}}],[11,"handler","","",1,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"keymap","","",1,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"keymapformat"},{"name":"rawfd"},{"name":"u32"}],"output":null}],[11,"enter","","",1,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"wlsurface"},{"name":"vec"}],"output":null}],[11,"leave","","",1,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"wlsurface"}],"output":null}],[11,"key","","",1,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"keystate"}],"output":null}],[11,"modifiers","","",1,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"repeat_info","","",1,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"message","","",1,null],[0,"keysyms","","",null,null],[17,"XKB_KEY_VoidSymbol","wayland_kbd::keysyms","",null,null],[17,"XKB_KEY_BackSpace","","",null,null],[17,"XKB_KEY_Tab","","",null,null],[17,"XKB_KEY_Linefeed","","",null,null],[17,"XKB_KEY_Clear","","",null,null],[17,"XKB_KEY_Return","","",null,null],[17,"XKB_KEY_Pause","","",null,null],[17,"XKB_KEY_Scroll_Lock","","",null,null],[17,"XKB_KEY_Sys_Req","","",null,null],[17,"XKB_KEY_Escape","","",null,null],[17,"XKB_KEY_Delete","","",null,null],[17,"XKB_KEY_Multi_key","","",null,null],[17,"XKB_KEY_Codeinput","","",null,null],[17,"XKB_KEY_SingleCandidate","","",null,null],[17,"XKB_KEY_MultipleCandidate","","",null,null],[17,"XKB_KEY_PreviousCandidate","","",null,null],[17,"XKB_KEY_Kanji","","",null,null],[17,"XKB_KEY_Muhenkan","","",null,null],[17,"XKB_KEY_Henkan_Mode","","",null,null],[17,"XKB_KEY_Henkan","","",null,null],[17,"XKB_KEY_Romaji","","",null,null],[17,"XKB_KEY_Hiragana","","",null,null],[17,"XKB_KEY_Katakana","","",null,null],[17,"XKB_KEY_Hiragana_Katakana","","",null,null],[17,"XKB_KEY_Zenkaku","","",null,null],[17,"XKB_KEY_Hankaku","","",null,null],[17,"XKB_KEY_Zenkaku_Hankaku","","",null,null],[17,"XKB_KEY_Touroku","","",null,null],[17,"XKB_KEY_Massyo","","",null,null],[17,"XKB_KEY_Kana_Lock","","",null,null],[17,"XKB_KEY_Kana_Shift","","",null,null],[17,"XKB_KEY_Eisu_Shift","","",null,null],[17,"XKB_KEY_Eisu_toggle","","",null,null],[17,"XKB_KEY_Kanji_Bangou","","",null,null],[17,"XKB_KEY_Zen_Koho","","",null,null],[17,"XKB_KEY_Mae_Koho","","",null,null],[17,"XKB_KEY_Home","","",null,null],[17,"XKB_KEY_Left","","",null,null],[17,"XKB_KEY_Up","","",null,null],[17,"XKB_KEY_Right","","",null,null],[17,"XKB_KEY_Down","","",null,null],[17,"XKB_KEY_Prior","","",null,null],[17,"XKB_KEY_Page_Up","","",null,null],[17,"XKB_KEY_Next","","",null,null],[17,"XKB_KEY_Page_Down","","",null,null],[17,"XKB_KEY_End","","",null,null],[17,"XKB_KEY_Begin","","",null,null],[17,"XKB_KEY_Select","","",null,null],[17,"XKB_KEY_Print","","",null,null],[17,"XKB_KEY_Execute","","",null,null],[17,"XKB_KEY_Insert","","",null,null],[17,"XKB_KEY_Undo","","",null,null],[17,"XKB_KEY_Redo","","",null,null],[17,"XKB_KEY_Menu","","",null,null],[17,"XKB_KEY_Find","","",null,null],[17,"XKB_KEY_Cancel","","",null,null],[17,"XKB_KEY_Help","","",null,null],[17,"XKB_KEY_Break","","",null,null],[17,"XKB_KEY_Mode_switch","","",null,null],[17,"XKB_KEY_script_switch","","",null,null],[17,"XKB_KEY_Num_Lock","","",null,null],[17,"XKB_KEY_KP_Space","","",null,null],[17,"XKB_KEY_KP_Tab","","",null,null],[17,"XKB_KEY_KP_Enter","","",null,null],[17,"XKB_KEY_KP_F1","","",null,null],[17,"XKB_KEY_KP_F2","","",null,null],[17,"XKB_KEY_KP_F3","","",null,null],[17,"XKB_KEY_KP_F4","","",null,null],[17,"XKB_KEY_KP_Home","","",null,null],[17,"XKB_KEY_KP_Left","","",null,null],[17,"XKB_KEY_KP_Up","","",null,null],[17,"XKB_KEY_KP_Right","","",null,null],[17,"XKB_KEY_KP_Down","","",null,null],[17,"XKB_KEY_KP_Prior","","",null,null],[17,"XKB_KEY_KP_Page_Up","","",null,null],[17,"XKB_KEY_KP_Next","","",null,null],[17,"XKB_KEY_KP_Page_Down","","",null,null],[17,"XKB_KEY_KP_End","","",null,null],[17,"XKB_KEY_KP_Begin","","",null,null],[17,"XKB_KEY_KP_Insert","","",null,null],[17,"XKB_KEY_KP_Delete","","",null,null],[17,"XKB_KEY_KP_Equal","","",null,null],[17,"XKB_KEY_KP_Multiply","","",null,null],[17,"XKB_KEY_KP_Add","","",null,null],[17,"XKB_KEY_KP_Separator","","",null,null],[17,"XKB_KEY_KP_Subtract","","",null,null],[17,"XKB_KEY_KP_Decimal","","",null,null],[17,"XKB_KEY_KP_Divide","","",null,null],[17,"XKB_KEY_KP_0","","",null,null],[17,"XKB_KEY_KP_1","","",null,null],[17,"XKB_KEY_KP_2","","",null,null],[17,"XKB_KEY_KP_3","","",null,null],[17,"XKB_KEY_KP_4","","",null,null],[17,"XKB_KEY_KP_5","","",null,null],[17,"XKB_KEY_KP_6","","",null,null],[17,"XKB_KEY_KP_7","","",null,null],[17,"XKB_KEY_KP_8","","",null,null],[17,"XKB_KEY_KP_9","","",null,null],[17,"XKB_KEY_F1","","",null,null],[17,"XKB_KEY_F2","","",null,null],[17,"XKB_KEY_F3","","",null,null],[17,"XKB_KEY_F4","","",null,null],[17,"XKB_KEY_F5","","",null,null],[17,"XKB_KEY_F6","","",null,null],[17,"XKB_KEY_F7","","",null,null],[17,"XKB_KEY_F8","","",null,null],[17,"XKB_KEY_F9","","",null,null],[17,"XKB_KEY_F10","","",null,null],[17,"XKB_KEY_F11","","",null,null],[17,"XKB_KEY_L1","","",null,null],[17,"XKB_KEY_F12","","",null,null],[17,"XKB_KEY_L2","","",null,null],[17,"XKB_KEY_F13","","",null,null],[17,"XKB_KEY_L3","","",null,null],[17,"XKB_KEY_F14","","",null,null],[17,"XKB_KEY_L4","","",null,null],[17,"XKB_KEY_F15","","",null,null],[17,"XKB_KEY_L5","","",null,null],[17,"XKB_KEY_F16","","",null,null],[17,"XKB_KEY_L6","","",null,null],[17,"XKB_KEY_F17","","",null,null],[17,"XKB_KEY_L7","","",null,null],[17,"XKB_KEY_F18","","",null,null],[17,"XKB_KEY_L8","","",null,null],[17,"XKB_KEY_F19","","",null,null],[17,"XKB_KEY_L9","","",null,null],[17,"XKB_KEY_F20","","",null,null],[17,"XKB_KEY_L10","","",null,null],[17,"XKB_KEY_F21","","",null,null],[17,"XKB_KEY_R1","","",null,null],[17,"XKB_KEY_F22","","",null,null],[17,"XKB_KEY_R2","","",null,null],[17,"XKB_KEY_F23","","",null,null],[17,"XKB_KEY_R3","","",null,null],[17,"XKB_KEY_F24","","",null,null],[17,"XKB_KEY_R4","","",null,null],[17,"XKB_KEY_F25","","",null,null],[17,"XKB_KEY_R5","","",null,null],[17,"XKB_KEY_F26","","",null,null],[17,"XKB_KEY_R6","","",null,null],[17,"XKB_KEY_F27","","",null,null],[17,"XKB_KEY_R7","","",null,null],[17,"XKB_KEY_F28","","",null,null],[17,"XKB_KEY_R8","","",null,null],[17,"XKB_KEY_F29","","",null,null],[17,"XKB_KEY_R9","","",null,null],[17,"XKB_KEY_F30","","",null,null],[17,"XKB_KEY_R10","","",null,null],[17,"XKB_KEY_F31","","",null,null],[17,"XKB_KEY_R11","","",null,null],[17,"XKB_KEY_F32","","",null,null],[17,"XKB_KEY_R12","","",null,null],[17,"XKB_KEY_F33","","",null,null],[17,"XKB_KEY_R13","","",null,null],[17,"XKB_KEY_F34","","",null,null],[17,"XKB_KEY_R14","","",null,null],[17,"XKB_KEY_F35","","",null,null],[17,"XKB_KEY_R15","","",null,null],[17,"XKB_KEY_Shift_L","","",null,null],[17,"XKB_KEY_Shift_R","","",null,null],[17,"XKB_KEY_Control_L","","",null,null],[17,"XKB_KEY_Control_R","","",null,null],[17,"XKB_KEY_Caps_Lock","","",null,null],[17,"XKB_KEY_Shift_Lock","","",null,null],[17,"XKB_KEY_Meta_L","","",null,null],[17,"XKB_KEY_Meta_R","","",null,null],[17,"XKB_KEY_Alt_L","","",null,null],[17,"XKB_KEY_Alt_R","","",null,null],[17,"XKB_KEY_Super_L","","",null,null],[17,"XKB_KEY_Super_R","","",null,null],[17,"XKB_KEY_Hyper_L","","",null,null],[17,"XKB_KEY_Hyper_R","","",null,null],[17,"XKB_KEY_ISO_Lock","","",null,null],[17,"XKB_KEY_ISO_Level2_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Shift","","",null,null],[17,"XKB_KEY_ISO_Level3_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Lock","","",null,null],[17,"XKB_KEY_ISO_Level5_Shift","","",null,null],[17,"XKB_KEY_ISO_Level5_Latch","","",null,null],[17,"XKB_KEY_ISO_Level5_Lock","","",null,null],[17,"XKB_KEY_ISO_Group_Shift","","",null,null],[17,"XKB_KEY_ISO_Group_Latch","","",null,null],[17,"XKB_KEY_ISO_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Next_Group","","",null,null],[17,"XKB_KEY_ISO_Next_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Prev_Group","","",null,null],[17,"XKB_KEY_ISO_Prev_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_First_Group","","",null,null],[17,"XKB_KEY_ISO_First_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Last_Group","","",null,null],[17,"XKB_KEY_ISO_Last_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Left_Tab","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Left","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Right","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Both_Margins","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Left","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Right","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Up","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Down","","",null,null],[17,"XKB_KEY_ISO_Continuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Discontinuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Emphasize","","",null,null],[17,"XKB_KEY_ISO_Center_Object","","",null,null],[17,"XKB_KEY_ISO_Enter","","",null,null],[17,"XKB_KEY_dead_grave","","",null,null],[17,"XKB_KEY_dead_acute","","",null,null],[17,"XKB_KEY_dead_circumflex","","",null,null],[17,"XKB_KEY_dead_tilde","","",null,null],[17,"XKB_KEY_dead_perispomeni","","",null,null],[17,"XKB_KEY_dead_macron","","",null,null],[17,"XKB_KEY_dead_breve","","",null,null],[17,"XKB_KEY_dead_abovedot","","",null,null],[17,"XKB_KEY_dead_diaeresis","","",null,null],[17,"XKB_KEY_dead_abovering","","",null,null],[17,"XKB_KEY_dead_doubleacute","","",null,null],[17,"XKB_KEY_dead_caron","","",null,null],[17,"XKB_KEY_dead_cedilla","","",null,null],[17,"XKB_KEY_dead_ogonek","","",null,null],[17,"XKB_KEY_dead_iota","","",null,null],[17,"XKB_KEY_dead_voiced_sound","","",null,null],[17,"XKB_KEY_dead_semivoiced_sound","","",null,null],[17,"XKB_KEY_dead_belowdot","","",null,null],[17,"XKB_KEY_dead_hook","","",null,null],[17,"XKB_KEY_dead_horn","","",null,null],[17,"XKB_KEY_dead_stroke","","",null,null],[17,"XKB_KEY_dead_abovecomma","","",null,null],[17,"XKB_KEY_dead_psili","","",null,null],[17,"XKB_KEY_dead_abovereversedcomma","","",null,null],[17,"XKB_KEY_dead_dasia","","",null,null],[17,"XKB_KEY_dead_doublegrave","","",null,null],[17,"XKB_KEY_dead_belowring","","",null,null],[17,"XKB_KEY_dead_belowmacron","","",null,null],[17,"XKB_KEY_dead_belowcircumflex","","",null,null],[17,"XKB_KEY_dead_belowtilde","","",null,null],[17,"XKB_KEY_dead_belowbreve","","",null,null],[17,"XKB_KEY_dead_belowdiaeresis","","",null,null],[17,"XKB_KEY_dead_invertedbreve","","",null,null],[17,"XKB_KEY_dead_belowcomma","","",null,null],[17,"XKB_KEY_dead_currency","","",null,null],[17,"XKB_KEY_dead_lowline","","",null,null],[17,"XKB_KEY_dead_aboveverticalline","","",null,null],[17,"XKB_KEY_dead_belowverticalline","","",null,null],[17,"XKB_KEY_dead_longsolidusoverlay","","",null,null],[17,"XKB_KEY_dead_a","","",null,null],[17,"XKB_KEY_dead_A","","",null,null],[17,"XKB_KEY_dead_e","","",null,null],[17,"XKB_KEY_dead_E","","",null,null],[17,"XKB_KEY_dead_i","","",null,null],[17,"XKB_KEY_dead_I","","",null,null],[17,"XKB_KEY_dead_o","","",null,null],[17,"XKB_KEY_dead_O","","",null,null],[17,"XKB_KEY_dead_u","","",null,null],[17,"XKB_KEY_dead_U","","",null,null],[17,"XKB_KEY_dead_small_schwa","","",null,null],[17,"XKB_KEY_dead_capital_schwa","","",null,null],[17,"XKB_KEY_dead_greek","","",null,null],[17,"XKB_KEY_First_Virtual_Screen","","",null,null],[17,"XKB_KEY_Prev_Virtual_Screen","","",null,null],[17,"XKB_KEY_Next_Virtual_Screen","","",null,null],[17,"XKB_KEY_Last_Virtual_Screen","","",null,null],[17,"XKB_KEY_Terminate_Server","","",null,null],[17,"XKB_KEY_AccessX_Enable","","",null,null],[17,"XKB_KEY_AccessX_Feedback_Enable","","",null,null],[17,"XKB_KEY_RepeatKeys_Enable","","",null,null],[17,"XKB_KEY_SlowKeys_Enable","","",null,null],[17,"XKB_KEY_BounceKeys_Enable","","",null,null],[17,"XKB_KEY_StickyKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Accel_Enable","","",null,null],[17,"XKB_KEY_Overlay1_Enable","","",null,null],[17,"XKB_KEY_Overlay2_Enable","","",null,null],[17,"XKB_KEY_AudibleBell_Enable","","",null,null],[17,"XKB_KEY_Pointer_Left","","",null,null],[17,"XKB_KEY_Pointer_Right","","",null,null],[17,"XKB_KEY_Pointer_Up","","",null,null],[17,"XKB_KEY_Pointer_Down","","",null,null],[17,"XKB_KEY_Pointer_UpLeft","","",null,null],[17,"XKB_KEY_Pointer_UpRight","","",null,null],[17,"XKB_KEY_Pointer_DownLeft","","",null,null],[17,"XKB_KEY_Pointer_DownRight","","",null,null],[17,"XKB_KEY_Pointer_Button_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Button1","","",null,null],[17,"XKB_KEY_Pointer_Button2","","",null,null],[17,"XKB_KEY_Pointer_Button3","","",null,null],[17,"XKB_KEY_Pointer_Button4","","",null,null],[17,"XKB_KEY_Pointer_Button5","","",null,null],[17,"XKB_KEY_Pointer_DblClick_Dflt","","",null,null],[17,"XKB_KEY_Pointer_DblClick1","","",null,null],[17,"XKB_KEY_Pointer_DblClick2","","",null,null],[17,"XKB_KEY_Pointer_DblClick3","","",null,null],[17,"XKB_KEY_Pointer_DblClick4","","",null,null],[17,"XKB_KEY_Pointer_DblClick5","","",null,null],[17,"XKB_KEY_Pointer_Drag_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Drag1","","",null,null],[17,"XKB_KEY_Pointer_Drag2","","",null,null],[17,"XKB_KEY_Pointer_Drag3","","",null,null],[17,"XKB_KEY_Pointer_Drag4","","",null,null],[17,"XKB_KEY_Pointer_Drag5","","",null,null],[17,"XKB_KEY_Pointer_EnableKeys","","",null,null],[17,"XKB_KEY_Pointer_Accelerate","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnNext","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnPrev","","",null,null],[17,"XKB_KEY_ch","","",null,null],[17,"XKB_KEY_Ch","","",null,null],[17,"XKB_KEY_CH","","",null,null],[17,"XKB_KEY_c_h","","",null,null],[17,"XKB_KEY_C_h","","",null,null],[17,"XKB_KEY_C_H","","",null,null],[17,"XKB_KEY_3270_Duplicate","","",null,null],[17,"XKB_KEY_3270_FieldMark","","",null,null],[17,"XKB_KEY_3270_Right2","","",null,null],[17,"XKB_KEY_3270_Left2","","",null,null],[17,"XKB_KEY_3270_BackTab","","",null,null],[17,"XKB_KEY_3270_EraseEOF","","",null,null],[17,"XKB_KEY_3270_EraseInput","","",null,null],[17,"XKB_KEY_3270_Reset","","",null,null],[17,"XKB_KEY_3270_Quit","","",null,null],[17,"XKB_KEY_3270_PA1","","",null,null],[17,"XKB_KEY_3270_PA2","","",null,null],[17,"XKB_KEY_3270_PA3","","",null,null],[17,"XKB_KEY_3270_Test","","",null,null],[17,"XKB_KEY_3270_Attn","","",null,null],[17,"XKB_KEY_3270_CursorBlink","","",null,null],[17,"XKB_KEY_3270_AltCursor","","",null,null],[17,"XKB_KEY_3270_KeyClick","","",null,null],[17,"XKB_KEY_3270_Jump","","",null,null],[17,"XKB_KEY_3270_Ident","","",null,null],[17,"XKB_KEY_3270_Rule","","",null,null],[17,"XKB_KEY_3270_Copy","","",null,null],[17,"XKB_KEY_3270_Play","","",null,null],[17,"XKB_KEY_3270_Setup","","",null,null],[17,"XKB_KEY_3270_Record","","",null,null],[17,"XKB_KEY_3270_ChangeScreen","","",null,null],[17,"XKB_KEY_3270_DeleteWord","","",null,null],[17,"XKB_KEY_3270_ExSelect","","",null,null],[17,"XKB_KEY_3270_CursorSelect","","",null,null],[17,"XKB_KEY_3270_PrintScreen","","",null,null],[17,"XKB_KEY_3270_Enter","","",null,null],[17,"XKB_KEY_space","","",null,null],[17,"XKB_KEY_exclam","","",null,null],[17,"XKB_KEY_quotedbl","","",null,null],[17,"XKB_KEY_numbersign","","",null,null],[17,"XKB_KEY_dollar","","",null,null],[17,"XKB_KEY_percent","","",null,null],[17,"XKB_KEY_ampersand","","",null,null],[17,"XKB_KEY_apostrophe","","",null,null],[17,"XKB_KEY_quoteright","","",null,null],[17,"XKB_KEY_parenleft","","",null,null],[17,"XKB_KEY_parenright","","",null,null],[17,"XKB_KEY_asterisk","","",null,null],[17,"XKB_KEY_plus","","",null,null],[17,"XKB_KEY_comma","","",null,null],[17,"XKB_KEY_minus","","",null,null],[17,"XKB_KEY_period","","",null,null],[17,"XKB_KEY_slash","","",null,null],[17,"XKB_KEY_0","","",null,null],[17,"XKB_KEY_1","","",null,null],[17,"XKB_KEY_2","","",null,null],[17,"XKB_KEY_3","","",null,null],[17,"XKB_KEY_4","","",null,null],[17,"XKB_KEY_5","","",null,null],[17,"XKB_KEY_6","","",null,null],[17,"XKB_KEY_7","","",null,null],[17,"XKB_KEY_8","","",null,null],[17,"XKB_KEY_9","","",null,null],[17,"XKB_KEY_colon","","",null,null],[17,"XKB_KEY_semicolon","","",null,null],[17,"XKB_KEY_less","","",null,null],[17,"XKB_KEY_equal","","",null,null],[17,"XKB_KEY_greater","","",null,null],[17,"XKB_KEY_question","","",null,null],[17,"XKB_KEY_at","","",null,null],[17,"XKB_KEY_A","","",null,null],[17,"XKB_KEY_B","","",null,null],[17,"XKB_KEY_C","","",null,null],[17,"XKB_KEY_D","","",null,null],[17,"XKB_KEY_E","","",null,null],[17,"XKB_KEY_F","","",null,null],[17,"XKB_KEY_G","","",null,null],[17,"XKB_KEY_H","","",null,null],[17,"XKB_KEY_I","","",null,null],[17,"XKB_KEY_J","","",null,null],[17,"XKB_KEY_K","","",null,null],[17,"XKB_KEY_L","","",null,null],[17,"XKB_KEY_M","","",null,null],[17,"XKB_KEY_N","","",null,null],[17,"XKB_KEY_O","","",null,null],[17,"XKB_KEY_P","","",null,null],[17,"XKB_KEY_Q","","",null,null],[17,"XKB_KEY_R","","",null,null],[17,"XKB_KEY_S","","",null,null],[17,"XKB_KEY_T","","",null,null],[17,"XKB_KEY_U","","",null,null],[17,"XKB_KEY_V","","",null,null],[17,"XKB_KEY_W","","",null,null],[17,"XKB_KEY_X","","",null,null],[17,"XKB_KEY_Y","","",null,null],[17,"XKB_KEY_Z","","",null,null],[17,"XKB_KEY_bracketleft","","",null,null],[17,"XKB_KEY_backslash","","",null,null],[17,"XKB_KEY_bracketright","","",null,null],[17,"XKB_KEY_asciicircum","","",null,null],[17,"XKB_KEY_underscore","","",null,null],[17,"XKB_KEY_grave","","",null,null],[17,"XKB_KEY_quoteleft","","",null,null],[17,"XKB_KEY_a","","",null,null],[17,"XKB_KEY_b","","",null,null],[17,"XKB_KEY_c","","",null,null],[17,"XKB_KEY_d","","",null,null],[17,"XKB_KEY_e","","",null,null],[17,"XKB_KEY_f","","",null,null],[17,"XKB_KEY_g","","",null,null],[17,"XKB_KEY_h","","",null,null],[17,"XKB_KEY_i","","",null,null],[17,"XKB_KEY_j","","",null,null],[17,"XKB_KEY_k","","",null,null],[17,"XKB_KEY_l","","",null,null],[17,"XKB_KEY_m","","",null,null],[17,"XKB_KEY_n","","",null,null],[17,"XKB_KEY_o","","",null,null],[17,"XKB_KEY_p","","",null,null],[17,"XKB_KEY_q","","",null,null],[17,"XKB_KEY_r","","",null,null],[17,"XKB_KEY_s","","",null,null],[17,"XKB_KEY_t","","",null,null],[17,"XKB_KEY_u","","",null,null],[17,"XKB_KEY_v","","",null,null],[17,"XKB_KEY_w","","",null,null],[17,"XKB_KEY_x","","",null,null],[17,"XKB_KEY_y","","",null,null],[17,"XKB_KEY_z","","",null,null],[17,"XKB_KEY_braceleft","","",null,null],[17,"XKB_KEY_bar","","",null,null],[17,"XKB_KEY_braceright","","",null,null],[17,"XKB_KEY_asciitilde","","",null,null],[17,"XKB_KEY_nobreakspace","","",null,null],[17,"XKB_KEY_exclamdown","","",null,null],[17,"XKB_KEY_cent","","",null,null],[17,"XKB_KEY_sterling","","",null,null],[17,"XKB_KEY_currency","","",null,null],[17,"XKB_KEY_yen","","",null,null],[17,"XKB_KEY_brokenbar","","",null,null],[17,"XKB_KEY_section","","",null,null],[17,"XKB_KEY_diaeresis","","",null,null],[17,"XKB_KEY_copyright","","",null,null],[17,"XKB_KEY_ordfeminine","","",null,null],[17,"XKB_KEY_guillemotleft","","",null,null],[17,"XKB_KEY_notsign","","",null,null],[17,"XKB_KEY_hyphen","","",null,null],[17,"XKB_KEY_registered","","",null,null],[17,"XKB_KEY_macron","","",null,null],[17,"XKB_KEY_degree","","",null,null],[17,"XKB_KEY_plusminus","","",null,null],[17,"XKB_KEY_twosuperior","","",null,null],[17,"XKB_KEY_threesuperior","","",null,null],[17,"XKB_KEY_acute","","",null,null],[17,"XKB_KEY_mu","","",null,null],[17,"XKB_KEY_paragraph","","",null,null],[17,"XKB_KEY_periodcentered","","",null,null],[17,"XKB_KEY_cedilla","","",null,null],[17,"XKB_KEY_onesuperior","","",null,null],[17,"XKB_KEY_masculine","","",null,null],[17,"XKB_KEY_guillemotright","","",null,null],[17,"XKB_KEY_onequarter","","",null,null],[17,"XKB_KEY_onehalf","","",null,null],[17,"XKB_KEY_threequarters","","",null,null],[17,"XKB_KEY_questiondown","","",null,null],[17,"XKB_KEY_Agrave","","",null,null],[17,"XKB_KEY_Aacute","","",null,null],[17,"XKB_KEY_Acircumflex","","",null,null],[17,"XKB_KEY_Atilde","","",null,null],[17,"XKB_KEY_Adiaeresis","","",null,null],[17,"XKB_KEY_Aring","","",null,null],[17,"XKB_KEY_AE","","",null,null],[17,"XKB_KEY_Ccedilla","","",null,null],[17,"XKB_KEY_Egrave","","",null,null],[17,"XKB_KEY_Eacute","","",null,null],[17,"XKB_KEY_Ecircumflex","","",null,null],[17,"XKB_KEY_Ediaeresis","","",null,null],[17,"XKB_KEY_Igrave","","",null,null],[17,"XKB_KEY_Iacute","","",null,null],[17,"XKB_KEY_Icircumflex","","",null,null],[17,"XKB_KEY_Idiaeresis","","",null,null],[17,"XKB_KEY_ETH","","",null,null],[17,"XKB_KEY_Eth","","",null,null],[17,"XKB_KEY_Ntilde","","",null,null],[17,"XKB_KEY_Ograve","","",null,null],[17,"XKB_KEY_Oacute","","",null,null],[17,"XKB_KEY_Ocircumflex","","",null,null],[17,"XKB_KEY_Otilde","","",null,null],[17,"XKB_KEY_Odiaeresis","","",null,null],[17,"XKB_KEY_multiply","","",null,null],[17,"XKB_KEY_Oslash","","",null,null],[17,"XKB_KEY_Ooblique","","",null,null],[17,"XKB_KEY_Ugrave","","",null,null],[17,"XKB_KEY_Uacute","","",null,null],[17,"XKB_KEY_Ucircumflex","","",null,null],[17,"XKB_KEY_Udiaeresis","","",null,null],[17,"XKB_KEY_Yacute","","",null,null],[17,"XKB_KEY_THORN","","",null,null],[17,"XKB_KEY_Thorn","","",null,null],[17,"XKB_KEY_ssharp","","",null,null],[17,"XKB_KEY_agrave","","",null,null],[17,"XKB_KEY_aacute","","",null,null],[17,"XKB_KEY_acircumflex","","",null,null],[17,"XKB_KEY_atilde","","",null,null],[17,"XKB_KEY_adiaeresis","","",null,null],[17,"XKB_KEY_aring","","",null,null],[17,"XKB_KEY_ae","","",null,null],[17,"XKB_KEY_ccedilla","","",null,null],[17,"XKB_KEY_egrave","","",null,null],[17,"XKB_KEY_eacute","","",null,null],[17,"XKB_KEY_ecircumflex","","",null,null],[17,"XKB_KEY_ediaeresis","","",null,null],[17,"XKB_KEY_igrave","","",null,null],[17,"XKB_KEY_iacute","","",null,null],[17,"XKB_KEY_icircumflex","","",null,null],[17,"XKB_KEY_idiaeresis","","",null,null],[17,"XKB_KEY_eth","","",null,null],[17,"XKB_KEY_ntilde","","",null,null],[17,"XKB_KEY_ograve","","",null,null],[17,"XKB_KEY_oacute","","",null,null],[17,"XKB_KEY_ocircumflex","","",null,null],[17,"XKB_KEY_otilde","","",null,null],[17,"XKB_KEY_odiaeresis","","",null,null],[17,"XKB_KEY_division","","",null,null],[17,"XKB_KEY_oslash","","",null,null],[17,"XKB_KEY_ooblique","","",null,null],[17,"XKB_KEY_ugrave","","",null,null],[17,"XKB_KEY_uacute","","",null,null],[17,"XKB_KEY_ucircumflex","","",null,null],[17,"XKB_KEY_udiaeresis","","",null,null],[17,"XKB_KEY_yacute","","",null,null],[17,"XKB_KEY_thorn","","",null,null],[17,"XKB_KEY_ydiaeresis","","",null,null],[17,"XKB_KEY_Aogonek","","",null,null],[17,"XKB_KEY_breve","","",null,null],[17,"XKB_KEY_Lstroke","","",null,null],[17,"XKB_KEY_Lcaron","","",null,null],[17,"XKB_KEY_Sacute","","",null,null],[17,"XKB_KEY_Scaron","","",null,null],[17,"XKB_KEY_Scedilla","","",null,null],[17,"XKB_KEY_Tcaron","","",null,null],[17,"XKB_KEY_Zacute","","",null,null],[17,"XKB_KEY_Zcaron","","",null,null],[17,"XKB_KEY_Zabovedot","","",null,null],[17,"XKB_KEY_aogonek","","",null,null],[17,"XKB_KEY_ogonek","","",null,null],[17,"XKB_KEY_lstroke","","",null,null],[17,"XKB_KEY_lcaron","","",null,null],[17,"XKB_KEY_sacute","","",null,null],[17,"XKB_KEY_caron","","",null,null],[17,"XKB_KEY_scaron","","",null,null],[17,"XKB_KEY_scedilla","","",null,null],[17,"XKB_KEY_tcaron","","",null,null],[17,"XKB_KEY_zacute","","",null,null],[17,"XKB_KEY_doubleacute","","",null,null],[17,"XKB_KEY_zcaron","","",null,null],[17,"XKB_KEY_zabovedot","","",null,null],[17,"XKB_KEY_Racute","","",null,null],[17,"XKB_KEY_Abreve","","",null,null],[17,"XKB_KEY_Lacute","","",null,null],[17,"XKB_KEY_Cacute","","",null,null],[17,"XKB_KEY_Ccaron","","",null,null],[17,"XKB_KEY_Eogonek","","",null,null],[17,"XKB_KEY_Ecaron","","",null,null],[17,"XKB_KEY_Dcaron","","",null,null],[17,"XKB_KEY_Dstroke","","",null,null],[17,"XKB_KEY_Nacute","","",null,null],[17,"XKB_KEY_Ncaron","","",null,null],[17,"XKB_KEY_Odoubleacute","","",null,null],[17,"XKB_KEY_Rcaron","","",null,null],[17,"XKB_KEY_Uring","","",null,null],[17,"XKB_KEY_Udoubleacute","","",null,null],[17,"XKB_KEY_Tcedilla","","",null,null],[17,"XKB_KEY_racute","","",null,null],[17,"XKB_KEY_abreve","","",null,null],[17,"XKB_KEY_lacute","","",null,null],[17,"XKB_KEY_cacute","","",null,null],[17,"XKB_KEY_ccaron","","",null,null],[17,"XKB_KEY_eogonek","","",null,null],[17,"XKB_KEY_ecaron","","",null,null],[17,"XKB_KEY_dcaron","","",null,null],[17,"XKB_KEY_dstroke","","",null,null],[17,"XKB_KEY_nacute","","",null,null],[17,"XKB_KEY_ncaron","","",null,null],[17,"XKB_KEY_odoubleacute","","",null,null],[17,"XKB_KEY_rcaron","","",null,null],[17,"XKB_KEY_uring","","",null,null],[17,"XKB_KEY_udoubleacute","","",null,null],[17,"XKB_KEY_tcedilla","","",null,null],[17,"XKB_KEY_abovedot","","",null,null],[17,"XKB_KEY_Hstroke","","",null,null],[17,"XKB_KEY_Hcircumflex","","",null,null],[17,"XKB_KEY_Iabovedot","","",null,null],[17,"XKB_KEY_Gbreve","","",null,null],[17,"XKB_KEY_Jcircumflex","","",null,null],[17,"XKB_KEY_hstroke","","",null,null],[17,"XKB_KEY_hcircumflex","","",null,null],[17,"XKB_KEY_idotless","","",null,null],[17,"XKB_KEY_gbreve","","",null,null],[17,"XKB_KEY_jcircumflex","","",null,null],[17,"XKB_KEY_Cabovedot","","",null,null],[17,"XKB_KEY_Ccircumflex","","",null,null],[17,"XKB_KEY_Gabovedot","","",null,null],[17,"XKB_KEY_Gcircumflex","","",null,null],[17,"XKB_KEY_Ubreve","","",null,null],[17,"XKB_KEY_Scircumflex","","",null,null],[17,"XKB_KEY_cabovedot","","",null,null],[17,"XKB_KEY_ccircumflex","","",null,null],[17,"XKB_KEY_gabovedot","","",null,null],[17,"XKB_KEY_gcircumflex","","",null,null],[17,"XKB_KEY_ubreve","","",null,null],[17,"XKB_KEY_scircumflex","","",null,null],[17,"XKB_KEY_kra","","",null,null],[17,"XKB_KEY_kappa","","",null,null],[17,"XKB_KEY_Rcedilla","","",null,null],[17,"XKB_KEY_Itilde","","",null,null],[17,"XKB_KEY_Lcedilla","","",null,null],[17,"XKB_KEY_Emacron","","",null,null],[17,"XKB_KEY_Gcedilla","","",null,null],[17,"XKB_KEY_Tslash","","",null,null],[17,"XKB_KEY_rcedilla","","",null,null],[17,"XKB_KEY_itilde","","",null,null],[17,"XKB_KEY_lcedilla","","",null,null],[17,"XKB_KEY_emacron","","",null,null],[17,"XKB_KEY_gcedilla","","",null,null],[17,"XKB_KEY_tslash","","",null,null],[17,"XKB_KEY_ENG","","",null,null],[17,"XKB_KEY_eng","","",null,null],[17,"XKB_KEY_Amacron","","",null,null],[17,"XKB_KEY_Iogonek","","",null,null],[17,"XKB_KEY_Eabovedot","","",null,null],[17,"XKB_KEY_Imacron","","",null,null],[17,"XKB_KEY_Ncedilla","","",null,null],[17,"XKB_KEY_Omacron","","",null,null],[17,"XKB_KEY_Kcedilla","","",null,null],[17,"XKB_KEY_Uogonek","","",null,null],[17,"XKB_KEY_Utilde","","",null,null],[17,"XKB_KEY_Umacron","","",null,null],[17,"XKB_KEY_amacron","","",null,null],[17,"XKB_KEY_iogonek","","",null,null],[17,"XKB_KEY_eabovedot","","",null,null],[17,"XKB_KEY_imacron","","",null,null],[17,"XKB_KEY_ncedilla","","",null,null],[17,"XKB_KEY_omacron","","",null,null],[17,"XKB_KEY_kcedilla","","",null,null],[17,"XKB_KEY_uogonek","","",null,null],[17,"XKB_KEY_utilde","","",null,null],[17,"XKB_KEY_umacron","","",null,null],[17,"XKB_KEY_Wcircumflex","","",null,null],[17,"XKB_KEY_wcircumflex","","",null,null],[17,"XKB_KEY_Ycircumflex","","",null,null],[17,"XKB_KEY_ycircumflex","","",null,null],[17,"XKB_KEY_Babovedot","","",null,null],[17,"XKB_KEY_babovedot","","",null,null],[17,"XKB_KEY_Dabovedot","","",null,null],[17,"XKB_KEY_dabovedot","","",null,null],[17,"XKB_KEY_Fabovedot","","",null,null],[17,"XKB_KEY_fabovedot","","",null,null],[17,"XKB_KEY_Mabovedot","","",null,null],[17,"XKB_KEY_mabovedot","","",null,null],[17,"XKB_KEY_Pabovedot","","",null,null],[17,"XKB_KEY_pabovedot","","",null,null],[17,"XKB_KEY_Sabovedot","","",null,null],[17,"XKB_KEY_sabovedot","","",null,null],[17,"XKB_KEY_Tabovedot","","",null,null],[17,"XKB_KEY_tabovedot","","",null,null],[17,"XKB_KEY_Wgrave","","",null,null],[17,"XKB_KEY_wgrave","","",null,null],[17,"XKB_KEY_Wacute","","",null,null],[17,"XKB_KEY_wacute","","",null,null],[17,"XKB_KEY_Wdiaeresis","","",null,null],[17,"XKB_KEY_wdiaeresis","","",null,null],[17,"XKB_KEY_Ygrave","","",null,null],[17,"XKB_KEY_ygrave","","",null,null],[17,"XKB_KEY_OE","","",null,null],[17,"XKB_KEY_oe","","",null,null],[17,"XKB_KEY_Ydiaeresis","","",null,null],[17,"XKB_KEY_overline","","",null,null],[17,"XKB_KEY_kana_fullstop","","",null,null],[17,"XKB_KEY_kana_openingbracket","","",null,null],[17,"XKB_KEY_kana_closingbracket","","",null,null],[17,"XKB_KEY_kana_comma","","",null,null],[17,"XKB_KEY_kana_conjunctive","","",null,null],[17,"XKB_KEY_kana_middledot","","",null,null],[17,"XKB_KEY_kana_WO","","",null,null],[17,"XKB_KEY_kana_a","","",null,null],[17,"XKB_KEY_kana_i","","",null,null],[17,"XKB_KEY_kana_u","","",null,null],[17,"XKB_KEY_kana_e","","",null,null],[17,"XKB_KEY_kana_o","","",null,null],[17,"XKB_KEY_kana_ya","","",null,null],[17,"XKB_KEY_kana_yu","","",null,null],[17,"XKB_KEY_kana_yo","","",null,null],[17,"XKB_KEY_kana_tsu","","",null,null],[17,"XKB_KEY_kana_tu","","",null,null],[17,"XKB_KEY_prolongedsound","","",null,null],[17,"XKB_KEY_kana_A","","",null,null],[17,"XKB_KEY_kana_I","","",null,null],[17,"XKB_KEY_kana_U","","",null,null],[17,"XKB_KEY_kana_E","","",null,null],[17,"XKB_KEY_kana_O","","",null,null],[17,"XKB_KEY_kana_KA","","",null,null],[17,"XKB_KEY_kana_KI","","",null,null],[17,"XKB_KEY_kana_KU","","",null,null],[17,"XKB_KEY_kana_KE","","",null,null],[17,"XKB_KEY_kana_KO","","",null,null],[17,"XKB_KEY_kana_SA","","",null,null],[17,"XKB_KEY_kana_SHI","","",null,null],[17,"XKB_KEY_kana_SU","","",null,null],[17,"XKB_KEY_kana_SE","","",null,null],[17,"XKB_KEY_kana_SO","","",null,null],[17,"XKB_KEY_kana_TA","","",null,null],[17,"XKB_KEY_kana_CHI","","",null,null],[17,"XKB_KEY_kana_TI","","",null,null],[17,"XKB_KEY_kana_TSU","","",null,null],[17,"XKB_KEY_kana_TU","","",null,null],[17,"XKB_KEY_kana_TE","","",null,null],[17,"XKB_KEY_kana_TO","","",null,null],[17,"XKB_KEY_kana_NA","","",null,null],[17,"XKB_KEY_kana_NI","","",null,null],[17,"XKB_KEY_kana_NU","","",null,null],[17,"XKB_KEY_kana_NE","","",null,null],[17,"XKB_KEY_kana_NO","","",null,null],[17,"XKB_KEY_kana_HA","","",null,null],[17,"XKB_KEY_kana_HI","","",null,null],[17,"XKB_KEY_kana_FU","","",null,null],[17,"XKB_KEY_kana_HU","","",null,null],[17,"XKB_KEY_kana_HE","","",null,null],[17,"XKB_KEY_kana_HO","","",null,null],[17,"XKB_KEY_kana_MA","","",null,null],[17,"XKB_KEY_kana_MI","","",null,null],[17,"XKB_KEY_kana_MU","","",null,null],[17,"XKB_KEY_kana_ME","","",null,null],[17,"XKB_KEY_kana_MO","","",null,null],[17,"XKB_KEY_kana_YA","","",null,null],[17,"XKB_KEY_kana_YU","","",null,null],[17,"XKB_KEY_kana_YO","","",null,null],[17,"XKB_KEY_kana_RA","","",null,null],[17,"XKB_KEY_kana_RI","","",null,null],[17,"XKB_KEY_kana_RU","","",null,null],[17,"XKB_KEY_kana_RE","","",null,null],[17,"XKB_KEY_kana_RO","","",null,null],[17,"XKB_KEY_kana_WA","","",null,null],[17,"XKB_KEY_kana_N","","",null,null],[17,"XKB_KEY_voicedsound","","",null,null],[17,"XKB_KEY_semivoicedsound","","",null,null],[17,"XKB_KEY_kana_switch","","",null,null],[17,"XKB_KEY_Farsi_0","","",null,null],[17,"XKB_KEY_Farsi_1","","",null,null],[17,"XKB_KEY_Farsi_2","","",null,null],[17,"XKB_KEY_Farsi_3","","",null,null],[17,"XKB_KEY_Farsi_4","","",null,null],[17,"XKB_KEY_Farsi_5","","",null,null],[17,"XKB_KEY_Farsi_6","","",null,null],[17,"XKB_KEY_Farsi_7","","",null,null],[17,"XKB_KEY_Farsi_8","","",null,null],[17,"XKB_KEY_Farsi_9","","",null,null],[17,"XKB_KEY_Arabic_percent","","",null,null],[17,"XKB_KEY_Arabic_superscript_alef","","",null,null],[17,"XKB_KEY_Arabic_tteh","","",null,null],[17,"XKB_KEY_Arabic_peh","","",null,null],[17,"XKB_KEY_Arabic_tcheh","","",null,null],[17,"XKB_KEY_Arabic_ddal","","",null,null],[17,"XKB_KEY_Arabic_rreh","","",null,null],[17,"XKB_KEY_Arabic_comma","","",null,null],[17,"XKB_KEY_Arabic_fullstop","","",null,null],[17,"XKB_KEY_Arabic_0","","",null,null],[17,"XKB_KEY_Arabic_1","","",null,null],[17,"XKB_KEY_Arabic_2","","",null,null],[17,"XKB_KEY_Arabic_3","","",null,null],[17,"XKB_KEY_Arabic_4","","",null,null],[17,"XKB_KEY_Arabic_5","","",null,null],[17,"XKB_KEY_Arabic_6","","",null,null],[17,"XKB_KEY_Arabic_7","","",null,null],[17,"XKB_KEY_Arabic_8","","",null,null],[17,"XKB_KEY_Arabic_9","","",null,null],[17,"XKB_KEY_Arabic_semicolon","","",null,null],[17,"XKB_KEY_Arabic_question_mark","","",null,null],[17,"XKB_KEY_Arabic_hamza","","",null,null],[17,"XKB_KEY_Arabic_maddaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonwaw","","",null,null],[17,"XKB_KEY_Arabic_hamzaunderalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonyeh","","",null,null],[17,"XKB_KEY_Arabic_alef","","",null,null],[17,"XKB_KEY_Arabic_beh","","",null,null],[17,"XKB_KEY_Arabic_tehmarbuta","","",null,null],[17,"XKB_KEY_Arabic_teh","","",null,null],[17,"XKB_KEY_Arabic_theh","","",null,null],[17,"XKB_KEY_Arabic_jeem","","",null,null],[17,"XKB_KEY_Arabic_hah","","",null,null],[17,"XKB_KEY_Arabic_khah","","",null,null],[17,"XKB_KEY_Arabic_dal","","",null,null],[17,"XKB_KEY_Arabic_thal","","",null,null],[17,"XKB_KEY_Arabic_ra","","",null,null],[17,"XKB_KEY_Arabic_zain","","",null,null],[17,"XKB_KEY_Arabic_seen","","",null,null],[17,"XKB_KEY_Arabic_sheen","","",null,null],[17,"XKB_KEY_Arabic_sad","","",null,null],[17,"XKB_KEY_Arabic_dad","","",null,null],[17,"XKB_KEY_Arabic_tah","","",null,null],[17,"XKB_KEY_Arabic_zah","","",null,null],[17,"XKB_KEY_Arabic_ain","","",null,null],[17,"XKB_KEY_Arabic_ghain","","",null,null],[17,"XKB_KEY_Arabic_tatweel","","",null,null],[17,"XKB_KEY_Arabic_feh","","",null,null],[17,"XKB_KEY_Arabic_qaf","","",null,null],[17,"XKB_KEY_Arabic_kaf","","",null,null],[17,"XKB_KEY_Arabic_lam","","",null,null],[17,"XKB_KEY_Arabic_meem","","",null,null],[17,"XKB_KEY_Arabic_noon","","",null,null],[17,"XKB_KEY_Arabic_ha","","",null,null],[17,"XKB_KEY_Arabic_heh","","",null,null],[17,"XKB_KEY_Arabic_waw","","",null,null],[17,"XKB_KEY_Arabic_alefmaksura","","",null,null],[17,"XKB_KEY_Arabic_yeh","","",null,null],[17,"XKB_KEY_Arabic_fathatan","","",null,null],[17,"XKB_KEY_Arabic_dammatan","","",null,null],[17,"XKB_KEY_Arabic_kasratan","","",null,null],[17,"XKB_KEY_Arabic_fatha","","",null,null],[17,"XKB_KEY_Arabic_damma","","",null,null],[17,"XKB_KEY_Arabic_kasra","","",null,null],[17,"XKB_KEY_Arabic_shadda","","",null,null],[17,"XKB_KEY_Arabic_sukun","","",null,null],[17,"XKB_KEY_Arabic_madda_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_below","","",null,null],[17,"XKB_KEY_Arabic_jeh","","",null,null],[17,"XKB_KEY_Arabic_veh","","",null,null],[17,"XKB_KEY_Arabic_keheh","","",null,null],[17,"XKB_KEY_Arabic_gaf","","",null,null],[17,"XKB_KEY_Arabic_noon_ghunna","","",null,null],[17,"XKB_KEY_Arabic_heh_doachashmee","","",null,null],[17,"XKB_KEY_Farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_yeh_baree","","",null,null],[17,"XKB_KEY_Arabic_heh_goal","","",null,null],[17,"XKB_KEY_Arabic_switch","","",null,null],[17,"XKB_KEY_Cyrillic_GHE_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ghe_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_zhe_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ka_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_ka_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_EN_descender","","",null,null],[17,"XKB_KEY_Cyrillic_en_descender","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_HA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ha_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_che_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_che_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_SHHA","","",null,null],[17,"XKB_KEY_Cyrillic_shha","","",null,null],[17,"XKB_KEY_Cyrillic_SCHWA","","",null,null],[17,"XKB_KEY_Cyrillic_schwa","","",null,null],[17,"XKB_KEY_Cyrillic_I_macron","","",null,null],[17,"XKB_KEY_Cyrillic_i_macron","","",null,null],[17,"XKB_KEY_Cyrillic_O_bar","","",null,null],[17,"XKB_KEY_Cyrillic_o_bar","","",null,null],[17,"XKB_KEY_Cyrillic_U_macron","","",null,null],[17,"XKB_KEY_Cyrillic_u_macron","","",null,null],[17,"XKB_KEY_Serbian_dje","","",null,null],[17,"XKB_KEY_Macedonia_gje","","",null,null],[17,"XKB_KEY_Cyrillic_io","","",null,null],[17,"XKB_KEY_Ukrainian_ie","","",null,null],[17,"XKB_KEY_Ukranian_je","","",null,null],[17,"XKB_KEY_Macedonia_dse","","",null,null],[17,"XKB_KEY_Ukrainian_i","","",null,null],[17,"XKB_KEY_Ukranian_i","","",null,null],[17,"XKB_KEY_Ukrainian_yi","","",null,null],[17,"XKB_KEY_Ukranian_yi","","",null,null],[17,"XKB_KEY_Cyrillic_je","","",null,null],[17,"XKB_KEY_Serbian_je","","",null,null],[17,"XKB_KEY_Cyrillic_lje","","",null,null],[17,"XKB_KEY_Serbian_lje","","",null,null],[17,"XKB_KEY_Cyrillic_nje","","",null,null],[17,"XKB_KEY_Serbian_nje","","",null,null],[17,"XKB_KEY_Serbian_tshe","","",null,null],[17,"XKB_KEY_Macedonia_kje","","",null,null],[17,"XKB_KEY_Ukrainian_ghe_with_upturn","","",null,null],[17,"XKB_KEY_Byelorussian_shortu","","",null,null],[17,"XKB_KEY_Cyrillic_dzhe","","",null,null],[17,"XKB_KEY_Serbian_dze","","",null,null],[17,"XKB_KEY_numerosign","","",null,null],[17,"XKB_KEY_Serbian_DJE","","",null,null],[17,"XKB_KEY_Macedonia_GJE","","",null,null],[17,"XKB_KEY_Cyrillic_IO","","",null,null],[17,"XKB_KEY_Ukrainian_IE","","",null,null],[17,"XKB_KEY_Ukranian_JE","","",null,null],[17,"XKB_KEY_Macedonia_DSE","","",null,null],[17,"XKB_KEY_Ukrainian_I","","",null,null],[17,"XKB_KEY_Ukranian_I","","",null,null],[17,"XKB_KEY_Ukrainian_YI","","",null,null],[17,"XKB_KEY_Ukranian_YI","","",null,null],[17,"XKB_KEY_Cyrillic_JE","","",null,null],[17,"XKB_KEY_Serbian_JE","","",null,null],[17,"XKB_KEY_Cyrillic_LJE","","",null,null],[17,"XKB_KEY_Serbian_LJE","","",null,null],[17,"XKB_KEY_Cyrillic_NJE","","",null,null],[17,"XKB_KEY_Serbian_NJE","","",null,null],[17,"XKB_KEY_Serbian_TSHE","","",null,null],[17,"XKB_KEY_Macedonia_KJE","","",null,null],[17,"XKB_KEY_Ukrainian_GHE_WITH_UPTURN","","",null,null],[17,"XKB_KEY_Byelorussian_SHORTU","","",null,null],[17,"XKB_KEY_Cyrillic_DZHE","","",null,null],[17,"XKB_KEY_Serbian_DZE","","",null,null],[17,"XKB_KEY_Cyrillic_yu","","",null,null],[17,"XKB_KEY_Cyrillic_a","","",null,null],[17,"XKB_KEY_Cyrillic_be","","",null,null],[17,"XKB_KEY_Cyrillic_tse","","",null,null],[17,"XKB_KEY_Cyrillic_de","","",null,null],[17,"XKB_KEY_Cyrillic_ie","","",null,null],[17,"XKB_KEY_Cyrillic_ef","","",null,null],[17,"XKB_KEY_Cyrillic_ghe","","",null,null],[17,"XKB_KEY_Cyrillic_ha","","",null,null],[17,"XKB_KEY_Cyrillic_i","","",null,null],[17,"XKB_KEY_Cyrillic_shorti","","",null,null],[17,"XKB_KEY_Cyrillic_ka","","",null,null],[17,"XKB_KEY_Cyrillic_el","","",null,null],[17,"XKB_KEY_Cyrillic_em","","",null,null],[17,"XKB_KEY_Cyrillic_en","","",null,null],[17,"XKB_KEY_Cyrillic_o","","",null,null],[17,"XKB_KEY_Cyrillic_pe","","",null,null],[17,"XKB_KEY_Cyrillic_ya","","",null,null],[17,"XKB_KEY_Cyrillic_er","","",null,null],[17,"XKB_KEY_Cyrillic_es","","",null,null],[17,"XKB_KEY_Cyrillic_te","","",null,null],[17,"XKB_KEY_Cyrillic_u","","",null,null],[17,"XKB_KEY_Cyrillic_zhe","","",null,null],[17,"XKB_KEY_Cyrillic_ve","","",null,null],[17,"XKB_KEY_Cyrillic_softsign","","",null,null],[17,"XKB_KEY_Cyrillic_yeru","","",null,null],[17,"XKB_KEY_Cyrillic_ze","","",null,null],[17,"XKB_KEY_Cyrillic_sha","","",null,null],[17,"XKB_KEY_Cyrillic_e","","",null,null],[17,"XKB_KEY_Cyrillic_shcha","","",null,null],[17,"XKB_KEY_Cyrillic_che","","",null,null],[17,"XKB_KEY_Cyrillic_hardsign","","",null,null],[17,"XKB_KEY_Cyrillic_YU","","",null,null],[17,"XKB_KEY_Cyrillic_A","","",null,null],[17,"XKB_KEY_Cyrillic_BE","","",null,null],[17,"XKB_KEY_Cyrillic_TSE","","",null,null],[17,"XKB_KEY_Cyrillic_DE","","",null,null],[17,"XKB_KEY_Cyrillic_IE","","",null,null],[17,"XKB_KEY_Cyrillic_EF","","",null,null],[17,"XKB_KEY_Cyrillic_GHE","","",null,null],[17,"XKB_KEY_Cyrillic_HA","","",null,null],[17,"XKB_KEY_Cyrillic_I","","",null,null],[17,"XKB_KEY_Cyrillic_SHORTI","","",null,null],[17,"XKB_KEY_Cyrillic_KA","","",null,null],[17,"XKB_KEY_Cyrillic_EL","","",null,null],[17,"XKB_KEY_Cyrillic_EM","","",null,null],[17,"XKB_KEY_Cyrillic_EN","","",null,null],[17,"XKB_KEY_Cyrillic_O","","",null,null],[17,"XKB_KEY_Cyrillic_PE","","",null,null],[17,"XKB_KEY_Cyrillic_YA","","",null,null],[17,"XKB_KEY_Cyrillic_ER","","",null,null],[17,"XKB_KEY_Cyrillic_ES","","",null,null],[17,"XKB_KEY_Cyrillic_TE","","",null,null],[17,"XKB_KEY_Cyrillic_U","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE","","",null,null],[17,"XKB_KEY_Cyrillic_VE","","",null,null],[17,"XKB_KEY_Cyrillic_SOFTSIGN","","",null,null],[17,"XKB_KEY_Cyrillic_YERU","","",null,null],[17,"XKB_KEY_Cyrillic_ZE","","",null,null],[17,"XKB_KEY_Cyrillic_SHA","","",null,null],[17,"XKB_KEY_Cyrillic_E","","",null,null],[17,"XKB_KEY_Cyrillic_SHCHA","","",null,null],[17,"XKB_KEY_Cyrillic_CHE","","",null,null],[17,"XKB_KEY_Cyrillic_HARDSIGN","","",null,null],[17,"XKB_KEY_Greek_ALPHAaccent","","",null,null],[17,"XKB_KEY_Greek_EPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_ETAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAdieresis","","",null,null],[17,"XKB_KEY_Greek_IOTAdiaeresis","","",null,null],[17,"XKB_KEY_Greek_OMICRONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONdieresis","","",null,null],[17,"XKB_KEY_Greek_OMEGAaccent","","",null,null],[17,"XKB_KEY_Greek_accentdieresis","","",null,null],[17,"XKB_KEY_Greek_horizbar","","",null,null],[17,"XKB_KEY_Greek_alphaaccent","","",null,null],[17,"XKB_KEY_Greek_epsilonaccent","","",null,null],[17,"XKB_KEY_Greek_etaaccent","","",null,null],[17,"XKB_KEY_Greek_iotaaccent","","",null,null],[17,"XKB_KEY_Greek_iotadieresis","","",null,null],[17,"XKB_KEY_Greek_iotaaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omicronaccent","","",null,null],[17,"XKB_KEY_Greek_upsilonaccent","","",null,null],[17,"XKB_KEY_Greek_upsilondieresis","","",null,null],[17,"XKB_KEY_Greek_upsilonaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omegaaccent","","",null,null],[17,"XKB_KEY_Greek_ALPHA","","",null,null],[17,"XKB_KEY_Greek_BETA","","",null,null],[17,"XKB_KEY_Greek_GAMMA","","",null,null],[17,"XKB_KEY_Greek_DELTA","","",null,null],[17,"XKB_KEY_Greek_EPSILON","","",null,null],[17,"XKB_KEY_Greek_ZETA","","",null,null],[17,"XKB_KEY_Greek_ETA","","",null,null],[17,"XKB_KEY_Greek_THETA","","",null,null],[17,"XKB_KEY_Greek_IOTA","","",null,null],[17,"XKB_KEY_Greek_KAPPA","","",null,null],[17,"XKB_KEY_Greek_LAMDA","","",null,null],[17,"XKB_KEY_Greek_LAMBDA","","",null,null],[17,"XKB_KEY_Greek_MU","","",null,null],[17,"XKB_KEY_Greek_NU","","",null,null],[17,"XKB_KEY_Greek_XI","","",null,null],[17,"XKB_KEY_Greek_OMICRON","","",null,null],[17,"XKB_KEY_Greek_PI","","",null,null],[17,"XKB_KEY_Greek_RHO","","",null,null],[17,"XKB_KEY_Greek_SIGMA","","",null,null],[17,"XKB_KEY_Greek_TAU","","",null,null],[17,"XKB_KEY_Greek_UPSILON","","",null,null],[17,"XKB_KEY_Greek_PHI","","",null,null],[17,"XKB_KEY_Greek_CHI","","",null,null],[17,"XKB_KEY_Greek_PSI","","",null,null],[17,"XKB_KEY_Greek_OMEGA","","",null,null],[17,"XKB_KEY_Greek_alpha","","",null,null],[17,"XKB_KEY_Greek_beta","","",null,null],[17,"XKB_KEY_Greek_gamma","","",null,null],[17,"XKB_KEY_Greek_delta","","",null,null],[17,"XKB_KEY_Greek_epsilon","","",null,null],[17,"XKB_KEY_Greek_zeta","","",null,null],[17,"XKB_KEY_Greek_eta","","",null,null],[17,"XKB_KEY_Greek_theta","","",null,null],[17,"XKB_KEY_Greek_iota","","",null,null],[17,"XKB_KEY_Greek_kappa","","",null,null],[17,"XKB_KEY_Greek_lamda","","",null,null],[17,"XKB_KEY_Greek_lambda","","",null,null],[17,"XKB_KEY_Greek_mu","","",null,null],[17,"XKB_KEY_Greek_nu","","",null,null],[17,"XKB_KEY_Greek_xi","","",null,null],[17,"XKB_KEY_Greek_omicron","","",null,null],[17,"XKB_KEY_Greek_pi","","",null,null],[17,"XKB_KEY_Greek_rho","","",null,null],[17,"XKB_KEY_Greek_sigma","","",null,null],[17,"XKB_KEY_Greek_finalsmallsigma","","",null,null],[17,"XKB_KEY_Greek_tau","","",null,null],[17,"XKB_KEY_Greek_upsilon","","",null,null],[17,"XKB_KEY_Greek_phi","","",null,null],[17,"XKB_KEY_Greek_chi","","",null,null],[17,"XKB_KEY_Greek_psi","","",null,null],[17,"XKB_KEY_Greek_omega","","",null,null],[17,"XKB_KEY_Greek_switch","","",null,null],[17,"XKB_KEY_leftradical","","",null,null],[17,"XKB_KEY_topleftradical","","",null,null],[17,"XKB_KEY_horizconnector","","",null,null],[17,"XKB_KEY_topintegral","","",null,null],[17,"XKB_KEY_botintegral","","",null,null],[17,"XKB_KEY_vertconnector","","",null,null],[17,"XKB_KEY_topleftsqbracket","","",null,null],[17,"XKB_KEY_botleftsqbracket","","",null,null],[17,"XKB_KEY_toprightsqbracket","","",null,null],[17,"XKB_KEY_botrightsqbracket","","",null,null],[17,"XKB_KEY_topleftparens","","",null,null],[17,"XKB_KEY_botleftparens","","",null,null],[17,"XKB_KEY_toprightparens","","",null,null],[17,"XKB_KEY_botrightparens","","",null,null],[17,"XKB_KEY_leftmiddlecurlybrace","","",null,null],[17,"XKB_KEY_rightmiddlecurlybrace","","",null,null],[17,"XKB_KEY_topleftsummation","","",null,null],[17,"XKB_KEY_botleftsummation","","",null,null],[17,"XKB_KEY_topvertsummationconnector","","",null,null],[17,"XKB_KEY_botvertsummationconnector","","",null,null],[17,"XKB_KEY_toprightsummation","","",null,null],[17,"XKB_KEY_botrightsummation","","",null,null],[17,"XKB_KEY_rightmiddlesummation","","",null,null],[17,"XKB_KEY_lessthanequal","","",null,null],[17,"XKB_KEY_notequal","","",null,null],[17,"XKB_KEY_greaterthanequal","","",null,null],[17,"XKB_KEY_integral","","",null,null],[17,"XKB_KEY_therefore","","",null,null],[17,"XKB_KEY_variation","","",null,null],[17,"XKB_KEY_infinity","","",null,null],[17,"XKB_KEY_nabla","","",null,null],[17,"XKB_KEY_approximate","","",null,null],[17,"XKB_KEY_similarequal","","",null,null],[17,"XKB_KEY_ifonlyif","","",null,null],[17,"XKB_KEY_implies","","",null,null],[17,"XKB_KEY_identical","","",null,null],[17,"XKB_KEY_radical","","",null,null],[17,"XKB_KEY_includedin","","",null,null],[17,"XKB_KEY_includes","","",null,null],[17,"XKB_KEY_intersection","","",null,null],[17,"XKB_KEY_union","","",null,null],[17,"XKB_KEY_logicaland","","",null,null],[17,"XKB_KEY_logicalor","","",null,null],[17,"XKB_KEY_partialderivative","","",null,null],[17,"XKB_KEY_function","","",null,null],[17,"XKB_KEY_leftarrow","","",null,null],[17,"XKB_KEY_uparrow","","",null,null],[17,"XKB_KEY_rightarrow","","",null,null],[17,"XKB_KEY_downarrow","","",null,null],[17,"XKB_KEY_blank","","",null,null],[17,"XKB_KEY_soliddiamond","","",null,null],[17,"XKB_KEY_checkerboard","","",null,null],[17,"XKB_KEY_ht","","",null,null],[17,"XKB_KEY_ff","","",null,null],[17,"XKB_KEY_cr","","",null,null],[17,"XKB_KEY_lf","","",null,null],[17,"XKB_KEY_nl","","",null,null],[17,"XKB_KEY_vt","","",null,null],[17,"XKB_KEY_lowrightcorner","","",null,null],[17,"XKB_KEY_uprightcorner","","",null,null],[17,"XKB_KEY_upleftcorner","","",null,null],[17,"XKB_KEY_lowleftcorner","","",null,null],[17,"XKB_KEY_crossinglines","","",null,null],[17,"XKB_KEY_horizlinescan1","","",null,null],[17,"XKB_KEY_horizlinescan3","","",null,null],[17,"XKB_KEY_horizlinescan5","","",null,null],[17,"XKB_KEY_horizlinescan7","","",null,null],[17,"XKB_KEY_horizlinescan9","","",null,null],[17,"XKB_KEY_leftt","","",null,null],[17,"XKB_KEY_rightt","","",null,null],[17,"XKB_KEY_bott","","",null,null],[17,"XKB_KEY_topt","","",null,null],[17,"XKB_KEY_vertbar","","",null,null],[17,"XKB_KEY_emspace","","",null,null],[17,"XKB_KEY_enspace","","",null,null],[17,"XKB_KEY_em3space","","",null,null],[17,"XKB_KEY_em4space","","",null,null],[17,"XKB_KEY_digitspace","","",null,null],[17,"XKB_KEY_punctspace","","",null,null],[17,"XKB_KEY_thinspace","","",null,null],[17,"XKB_KEY_hairspace","","",null,null],[17,"XKB_KEY_emdash","","",null,null],[17,"XKB_KEY_endash","","",null,null],[17,"XKB_KEY_signifblank","","",null,null],[17,"XKB_KEY_ellipsis","","",null,null],[17,"XKB_KEY_doubbaselinedot","","",null,null],[17,"XKB_KEY_onethird","","",null,null],[17,"XKB_KEY_twothirds","","",null,null],[17,"XKB_KEY_onefifth","","",null,null],[17,"XKB_KEY_twofifths","","",null,null],[17,"XKB_KEY_threefifths","","",null,null],[17,"XKB_KEY_fourfifths","","",null,null],[17,"XKB_KEY_onesixth","","",null,null],[17,"XKB_KEY_fivesixths","","",null,null],[17,"XKB_KEY_careof","","",null,null],[17,"XKB_KEY_figdash","","",null,null],[17,"XKB_KEY_leftanglebracket","","",null,null],[17,"XKB_KEY_decimalpoint","","",null,null],[17,"XKB_KEY_rightanglebracket","","",null,null],[17,"XKB_KEY_marker","","",null,null],[17,"XKB_KEY_oneeighth","","",null,null],[17,"XKB_KEY_threeeighths","","",null,null],[17,"XKB_KEY_fiveeighths","","",null,null],[17,"XKB_KEY_seveneighths","","",null,null],[17,"XKB_KEY_trademark","","",null,null],[17,"XKB_KEY_signaturemark","","",null,null],[17,"XKB_KEY_trademarkincircle","","",null,null],[17,"XKB_KEY_leftopentriangle","","",null,null],[17,"XKB_KEY_rightopentriangle","","",null,null],[17,"XKB_KEY_emopencircle","","",null,null],[17,"XKB_KEY_emopenrectangle","","",null,null],[17,"XKB_KEY_leftsinglequotemark","","",null,null],[17,"XKB_KEY_rightsinglequotemark","","",null,null],[17,"XKB_KEY_leftdoublequotemark","","",null,null],[17,"XKB_KEY_rightdoublequotemark","","",null,null],[17,"XKB_KEY_prescription","","",null,null],[17,"XKB_KEY_permille","","",null,null],[17,"XKB_KEY_minutes","","",null,null],[17,"XKB_KEY_seconds","","",null,null],[17,"XKB_KEY_latincross","","",null,null],[17,"XKB_KEY_hexagram","","",null,null],[17,"XKB_KEY_filledrectbullet","","",null,null],[17,"XKB_KEY_filledlefttribullet","","",null,null],[17,"XKB_KEY_filledrighttribullet","","",null,null],[17,"XKB_KEY_emfilledcircle","","",null,null],[17,"XKB_KEY_emfilledrect","","",null,null],[17,"XKB_KEY_enopencircbullet","","",null,null],[17,"XKB_KEY_enopensquarebullet","","",null,null],[17,"XKB_KEY_openrectbullet","","",null,null],[17,"XKB_KEY_opentribulletup","","",null,null],[17,"XKB_KEY_opentribulletdown","","",null,null],[17,"XKB_KEY_openstar","","",null,null],[17,"XKB_KEY_enfilledcircbullet","","",null,null],[17,"XKB_KEY_enfilledsqbullet","","",null,null],[17,"XKB_KEY_filledtribulletup","","",null,null],[17,"XKB_KEY_filledtribulletdown","","",null,null],[17,"XKB_KEY_leftpointer","","",null,null],[17,"XKB_KEY_rightpointer","","",null,null],[17,"XKB_KEY_club","","",null,null],[17,"XKB_KEY_diamond","","",null,null],[17,"XKB_KEY_heart","","",null,null],[17,"XKB_KEY_maltesecross","","",null,null],[17,"XKB_KEY_dagger","","",null,null],[17,"XKB_KEY_doubledagger","","",null,null],[17,"XKB_KEY_checkmark","","",null,null],[17,"XKB_KEY_ballotcross","","",null,null],[17,"XKB_KEY_musicalsharp","","",null,null],[17,"XKB_KEY_musicalflat","","",null,null],[17,"XKB_KEY_malesymbol","","",null,null],[17,"XKB_KEY_femalesymbol","","",null,null],[17,"XKB_KEY_telephone","","",null,null],[17,"XKB_KEY_telephonerecorder","","",null,null],[17,"XKB_KEY_phonographcopyright","","",null,null],[17,"XKB_KEY_caret","","",null,null],[17,"XKB_KEY_singlelowquotemark","","",null,null],[17,"XKB_KEY_doublelowquotemark","","",null,null],[17,"XKB_KEY_cursor","","",null,null],[17,"XKB_KEY_leftcaret","","",null,null],[17,"XKB_KEY_rightcaret","","",null,null],[17,"XKB_KEY_downcaret","","",null,null],[17,"XKB_KEY_upcaret","","",null,null],[17,"XKB_KEY_overbar","","",null,null],[17,"XKB_KEY_downtack","","",null,null],[17,"XKB_KEY_upshoe","","",null,null],[17,"XKB_KEY_downstile","","",null,null],[17,"XKB_KEY_underbar","","",null,null],[17,"XKB_KEY_jot","","",null,null],[17,"XKB_KEY_quad","","",null,null],[17,"XKB_KEY_uptack","","",null,null],[17,"XKB_KEY_circle","","",null,null],[17,"XKB_KEY_upstile","","",null,null],[17,"XKB_KEY_downshoe","","",null,null],[17,"XKB_KEY_rightshoe","","",null,null],[17,"XKB_KEY_leftshoe","","",null,null],[17,"XKB_KEY_lefttack","","",null,null],[17,"XKB_KEY_righttack","","",null,null],[17,"XKB_KEY_hebrew_doublelowline","","",null,null],[17,"XKB_KEY_hebrew_aleph","","",null,null],[17,"XKB_KEY_hebrew_bet","","",null,null],[17,"XKB_KEY_hebrew_beth","","",null,null],[17,"XKB_KEY_hebrew_gimel","","",null,null],[17,"XKB_KEY_hebrew_gimmel","","",null,null],[17,"XKB_KEY_hebrew_dalet","","",null,null],[17,"XKB_KEY_hebrew_daleth","","",null,null],[17,"XKB_KEY_hebrew_he","","",null,null],[17,"XKB_KEY_hebrew_waw","","",null,null],[17,"XKB_KEY_hebrew_zain","","",null,null],[17,"XKB_KEY_hebrew_zayin","","",null,null],[17,"XKB_KEY_hebrew_chet","","",null,null],[17,"XKB_KEY_hebrew_het","","",null,null],[17,"XKB_KEY_hebrew_tet","","",null,null],[17,"XKB_KEY_hebrew_teth","","",null,null],[17,"XKB_KEY_hebrew_yod","","",null,null],[17,"XKB_KEY_hebrew_finalkaph","","",null,null],[17,"XKB_KEY_hebrew_kaph","","",null,null],[17,"XKB_KEY_hebrew_lamed","","",null,null],[17,"XKB_KEY_hebrew_finalmem","","",null,null],[17,"XKB_KEY_hebrew_mem","","",null,null],[17,"XKB_KEY_hebrew_finalnun","","",null,null],[17,"XKB_KEY_hebrew_nun","","",null,null],[17,"XKB_KEY_hebrew_samech","","",null,null],[17,"XKB_KEY_hebrew_samekh","","",null,null],[17,"XKB_KEY_hebrew_ayin","","",null,null],[17,"XKB_KEY_hebrew_finalpe","","",null,null],[17,"XKB_KEY_hebrew_pe","","",null,null],[17,"XKB_KEY_hebrew_finalzade","","",null,null],[17,"XKB_KEY_hebrew_finalzadi","","",null,null],[17,"XKB_KEY_hebrew_zade","","",null,null],[17,"XKB_KEY_hebrew_zadi","","",null,null],[17,"XKB_KEY_hebrew_qoph","","",null,null],[17,"XKB_KEY_hebrew_kuf","","",null,null],[17,"XKB_KEY_hebrew_resh","","",null,null],[17,"XKB_KEY_hebrew_shin","","",null,null],[17,"XKB_KEY_hebrew_taw","","",null,null],[17,"XKB_KEY_hebrew_taf","","",null,null],[17,"XKB_KEY_Hebrew_switch","","",null,null],[17,"XKB_KEY_Thai_kokai","","",null,null],[17,"XKB_KEY_Thai_khokhai","","",null,null],[17,"XKB_KEY_Thai_khokhuat","","",null,null],[17,"XKB_KEY_Thai_khokhwai","","",null,null],[17,"XKB_KEY_Thai_khokhon","","",null,null],[17,"XKB_KEY_Thai_khorakhang","","",null,null],[17,"XKB_KEY_Thai_ngongu","","",null,null],[17,"XKB_KEY_Thai_chochan","","",null,null],[17,"XKB_KEY_Thai_choching","","",null,null],[17,"XKB_KEY_Thai_chochang","","",null,null],[17,"XKB_KEY_Thai_soso","","",null,null],[17,"XKB_KEY_Thai_chochoe","","",null,null],[17,"XKB_KEY_Thai_yoying","","",null,null],[17,"XKB_KEY_Thai_dochada","","",null,null],[17,"XKB_KEY_Thai_topatak","","",null,null],[17,"XKB_KEY_Thai_thothan","","",null,null],[17,"XKB_KEY_Thai_thonangmontho","","",null,null],[17,"XKB_KEY_Thai_thophuthao","","",null,null],[17,"XKB_KEY_Thai_nonen","","",null,null],[17,"XKB_KEY_Thai_dodek","","",null,null],[17,"XKB_KEY_Thai_totao","","",null,null],[17,"XKB_KEY_Thai_thothung","","",null,null],[17,"XKB_KEY_Thai_thothahan","","",null,null],[17,"XKB_KEY_Thai_thothong","","",null,null],[17,"XKB_KEY_Thai_nonu","","",null,null],[17,"XKB_KEY_Thai_bobaimai","","",null,null],[17,"XKB_KEY_Thai_popla","","",null,null],[17,"XKB_KEY_Thai_phophung","","",null,null],[17,"XKB_KEY_Thai_fofa","","",null,null],[17,"XKB_KEY_Thai_phophan","","",null,null],[17,"XKB_KEY_Thai_fofan","","",null,null],[17,"XKB_KEY_Thai_phosamphao","","",null,null],[17,"XKB_KEY_Thai_moma","","",null,null],[17,"XKB_KEY_Thai_yoyak","","",null,null],[17,"XKB_KEY_Thai_rorua","","",null,null],[17,"XKB_KEY_Thai_ru","","",null,null],[17,"XKB_KEY_Thai_loling","","",null,null],[17,"XKB_KEY_Thai_lu","","",null,null],[17,"XKB_KEY_Thai_wowaen","","",null,null],[17,"XKB_KEY_Thai_sosala","","",null,null],[17,"XKB_KEY_Thai_sorusi","","",null,null],[17,"XKB_KEY_Thai_sosua","","",null,null],[17,"XKB_KEY_Thai_hohip","","",null,null],[17,"XKB_KEY_Thai_lochula","","",null,null],[17,"XKB_KEY_Thai_oang","","",null,null],[17,"XKB_KEY_Thai_honokhuk","","",null,null],[17,"XKB_KEY_Thai_paiyannoi","","",null,null],[17,"XKB_KEY_Thai_saraa","","",null,null],[17,"XKB_KEY_Thai_maihanakat","","",null,null],[17,"XKB_KEY_Thai_saraaa","","",null,null],[17,"XKB_KEY_Thai_saraam","","",null,null],[17,"XKB_KEY_Thai_sarai","","",null,null],[17,"XKB_KEY_Thai_saraii","","",null,null],[17,"XKB_KEY_Thai_saraue","","",null,null],[17,"XKB_KEY_Thai_sarauee","","",null,null],[17,"XKB_KEY_Thai_sarau","","",null,null],[17,"XKB_KEY_Thai_sarauu","","",null,null],[17,"XKB_KEY_Thai_phinthu","","",null,null],[17,"XKB_KEY_Thai_maihanakat_maitho","","",null,null],[17,"XKB_KEY_Thai_baht","","",null,null],[17,"XKB_KEY_Thai_sarae","","",null,null],[17,"XKB_KEY_Thai_saraae","","",null,null],[17,"XKB_KEY_Thai_sarao","","",null,null],[17,"XKB_KEY_Thai_saraaimaimuan","","",null,null],[17,"XKB_KEY_Thai_saraaimaimalai","","",null,null],[17,"XKB_KEY_Thai_lakkhangyao","","",null,null],[17,"XKB_KEY_Thai_maiyamok","","",null,null],[17,"XKB_KEY_Thai_maitaikhu","","",null,null],[17,"XKB_KEY_Thai_maiek","","",null,null],[17,"XKB_KEY_Thai_maitho","","",null,null],[17,"XKB_KEY_Thai_maitri","","",null,null],[17,"XKB_KEY_Thai_maichattawa","","",null,null],[17,"XKB_KEY_Thai_thanthakhat","","",null,null],[17,"XKB_KEY_Thai_nikhahit","","",null,null],[17,"XKB_KEY_Thai_leksun","","",null,null],[17,"XKB_KEY_Thai_leknung","","",null,null],[17,"XKB_KEY_Thai_leksong","","",null,null],[17,"XKB_KEY_Thai_leksam","","",null,null],[17,"XKB_KEY_Thai_leksi","","",null,null],[17,"XKB_KEY_Thai_lekha","","",null,null],[17,"XKB_KEY_Thai_lekhok","","",null,null],[17,"XKB_KEY_Thai_lekchet","","",null,null],[17,"XKB_KEY_Thai_lekpaet","","",null,null],[17,"XKB_KEY_Thai_lekkao","","",null,null],[17,"XKB_KEY_Hangul","","",null,null],[17,"XKB_KEY_Hangul_Start","","",null,null],[17,"XKB_KEY_Hangul_End","","",null,null],[17,"XKB_KEY_Hangul_Hanja","","",null,null],[17,"XKB_KEY_Hangul_Jamo","","",null,null],[17,"XKB_KEY_Hangul_Romaja","","",null,null],[17,"XKB_KEY_Hangul_Codeinput","","",null,null],[17,"XKB_KEY_Hangul_Jeonja","","",null,null],[17,"XKB_KEY_Hangul_Banja","","",null,null],[17,"XKB_KEY_Hangul_PreHanja","","",null,null],[17,"XKB_KEY_Hangul_PostHanja","","",null,null],[17,"XKB_KEY_Hangul_SingleCandidate","","",null,null],[17,"XKB_KEY_Hangul_MultipleCandidate","","",null,null],[17,"XKB_KEY_Hangul_PreviousCandidate","","",null,null],[17,"XKB_KEY_Hangul_Special","","",null,null],[17,"XKB_KEY_Hangul_switch","","",null,null],[17,"XKB_KEY_Hangul_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_Nieun","","",null,null],[17,"XKB_KEY_Hangul_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_SsangDikeud","","",null,null],[17,"XKB_KEY_Hangul_Rieul","","",null,null],[17,"XKB_KEY_Hangul_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_Mieum","","",null,null],[17,"XKB_KEY_Hangul_Pieub","","",null,null],[17,"XKB_KEY_Hangul_SsangPieub","","",null,null],[17,"XKB_KEY_Hangul_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_Sios","","",null,null],[17,"XKB_KEY_Hangul_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_Ieung","","",null,null],[17,"XKB_KEY_Hangul_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_SsangJieuj","","",null,null],[17,"XKB_KEY_Hangul_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_Tieut","","",null,null],[17,"XKB_KEY_Hangul_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_A","","",null,null],[17,"XKB_KEY_Hangul_AE","","",null,null],[17,"XKB_KEY_Hangul_YA","","",null,null],[17,"XKB_KEY_Hangul_YAE","","",null,null],[17,"XKB_KEY_Hangul_EO","","",null,null],[17,"XKB_KEY_Hangul_E","","",null,null],[17,"XKB_KEY_Hangul_YEO","","",null,null],[17,"XKB_KEY_Hangul_YE","","",null,null],[17,"XKB_KEY_Hangul_O","","",null,null],[17,"XKB_KEY_Hangul_WA","","",null,null],[17,"XKB_KEY_Hangul_WAE","","",null,null],[17,"XKB_KEY_Hangul_OE","","",null,null],[17,"XKB_KEY_Hangul_YO","","",null,null],[17,"XKB_KEY_Hangul_U","","",null,null],[17,"XKB_KEY_Hangul_WEO","","",null,null],[17,"XKB_KEY_Hangul_WE","","",null,null],[17,"XKB_KEY_Hangul_WI","","",null,null],[17,"XKB_KEY_Hangul_YU","","",null,null],[17,"XKB_KEY_Hangul_EU","","",null,null],[17,"XKB_KEY_Hangul_YI","","",null,null],[17,"XKB_KEY_Hangul_I","","",null,null],[17,"XKB_KEY_Hangul_J_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_J_Nieun","","",null,null],[17,"XKB_KEY_Hangul_J_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_J_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_J_Rieul","","",null,null],[17,"XKB_KEY_Hangul_J_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_J_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_J_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_J_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Mieum","","",null,null],[17,"XKB_KEY_Hangul_J_Pieub","","",null,null],[17,"XKB_KEY_Hangul_J_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_J_Sios","","",null,null],[17,"XKB_KEY_Hangul_J_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_J_Ieung","","",null,null],[17,"XKB_KEY_Hangul_J_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_J_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_J_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_J_Tieut","","",null,null],[17,"XKB_KEY_Hangul_J_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_J_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_RieulYeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumMieum","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPieub","","",null,null],[17,"XKB_KEY_Hangul_PanSios","","",null,null],[17,"XKB_KEY_Hangul_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPhieuf","","",null,null],[17,"XKB_KEY_Hangul_YeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_AraeA","","",null,null],[17,"XKB_KEY_Hangul_AraeAE","","",null,null],[17,"XKB_KEY_Hangul_J_PanSios","","",null,null],[17,"XKB_KEY_Hangul_J_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_J_YeorinHieuh","","",null,null],[17,"XKB_KEY_Korean_Won","","",null,null],[17,"XKB_KEY_Armenian_ligature_ew","","",null,null],[17,"XKB_KEY_Armenian_full_stop","","",null,null],[17,"XKB_KEY_Armenian_verjaket","","",null,null],[17,"XKB_KEY_Armenian_separation_mark","","",null,null],[17,"XKB_KEY_Armenian_but","","",null,null],[17,"XKB_KEY_Armenian_hyphen","","",null,null],[17,"XKB_KEY_Armenian_yentamna","","",null,null],[17,"XKB_KEY_Armenian_exclam","","",null,null],[17,"XKB_KEY_Armenian_amanak","","",null,null],[17,"XKB_KEY_Armenian_accent","","",null,null],[17,"XKB_KEY_Armenian_shesht","","",null,null],[17,"XKB_KEY_Armenian_question","","",null,null],[17,"XKB_KEY_Armenian_paruyk","","",null,null],[17,"XKB_KEY_Armenian_AYB","","",null,null],[17,"XKB_KEY_Armenian_ayb","","",null,null],[17,"XKB_KEY_Armenian_BEN","","",null,null],[17,"XKB_KEY_Armenian_ben","","",null,null],[17,"XKB_KEY_Armenian_GIM","","",null,null],[17,"XKB_KEY_Armenian_gim","","",null,null],[17,"XKB_KEY_Armenian_DA","","",null,null],[17,"XKB_KEY_Armenian_da","","",null,null],[17,"XKB_KEY_Armenian_YECH","","",null,null],[17,"XKB_KEY_Armenian_yech","","",null,null],[17,"XKB_KEY_Armenian_ZA","","",null,null],[17,"XKB_KEY_Armenian_za","","",null,null],[17,"XKB_KEY_Armenian_E","","",null,null],[17,"XKB_KEY_Armenian_e","","",null,null],[17,"XKB_KEY_Armenian_AT","","",null,null],[17,"XKB_KEY_Armenian_at","","",null,null],[17,"XKB_KEY_Armenian_TO","","",null,null],[17,"XKB_KEY_Armenian_to","","",null,null],[17,"XKB_KEY_Armenian_ZHE","","",null,null],[17,"XKB_KEY_Armenian_zhe","","",null,null],[17,"XKB_KEY_Armenian_INI","","",null,null],[17,"XKB_KEY_Armenian_ini","","",null,null],[17,"XKB_KEY_Armenian_LYUN","","",null,null],[17,"XKB_KEY_Armenian_lyun","","",null,null],[17,"XKB_KEY_Armenian_KHE","","",null,null],[17,"XKB_KEY_Armenian_khe","","",null,null],[17,"XKB_KEY_Armenian_TSA","","",null,null],[17,"XKB_KEY_Armenian_tsa","","",null,null],[17,"XKB_KEY_Armenian_KEN","","",null,null],[17,"XKB_KEY_Armenian_ken","","",null,null],[17,"XKB_KEY_Armenian_HO","","",null,null],[17,"XKB_KEY_Armenian_ho","","",null,null],[17,"XKB_KEY_Armenian_DZA","","",null,null],[17,"XKB_KEY_Armenian_dza","","",null,null],[17,"XKB_KEY_Armenian_GHAT","","",null,null],[17,"XKB_KEY_Armenian_ghat","","",null,null],[17,"XKB_KEY_Armenian_TCHE","","",null,null],[17,"XKB_KEY_Armenian_tche","","",null,null],[17,"XKB_KEY_Armenian_MEN","","",null,null],[17,"XKB_KEY_Armenian_men","","",null,null],[17,"XKB_KEY_Armenian_HI","","",null,null],[17,"XKB_KEY_Armenian_hi","","",null,null],[17,"XKB_KEY_Armenian_NU","","",null,null],[17,"XKB_KEY_Armenian_nu","","",null,null],[17,"XKB_KEY_Armenian_SHA","","",null,null],[17,"XKB_KEY_Armenian_sha","","",null,null],[17,"XKB_KEY_Armenian_VO","","",null,null],[17,"XKB_KEY_Armenian_vo","","",null,null],[17,"XKB_KEY_Armenian_CHA","","",null,null],[17,"XKB_KEY_Armenian_cha","","",null,null],[17,"XKB_KEY_Armenian_PE","","",null,null],[17,"XKB_KEY_Armenian_pe","","",null,null],[17,"XKB_KEY_Armenian_JE","","",null,null],[17,"XKB_KEY_Armenian_je","","",null,null],[17,"XKB_KEY_Armenian_RA","","",null,null],[17,"XKB_KEY_Armenian_ra","","",null,null],[17,"XKB_KEY_Armenian_SE","","",null,null],[17,"XKB_KEY_Armenian_se","","",null,null],[17,"XKB_KEY_Armenian_VEV","","",null,null],[17,"XKB_KEY_Armenian_vev","","",null,null],[17,"XKB_KEY_Armenian_TYUN","","",null,null],[17,"XKB_KEY_Armenian_tyun","","",null,null],[17,"XKB_KEY_Armenian_RE","","",null,null],[17,"XKB_KEY_Armenian_re","","",null,null],[17,"XKB_KEY_Armenian_TSO","","",null,null],[17,"XKB_KEY_Armenian_tso","","",null,null],[17,"XKB_KEY_Armenian_VYUN","","",null,null],[17,"XKB_KEY_Armenian_vyun","","",null,null],[17,"XKB_KEY_Armenian_PYUR","","",null,null],[17,"XKB_KEY_Armenian_pyur","","",null,null],[17,"XKB_KEY_Armenian_KE","","",null,null],[17,"XKB_KEY_Armenian_ke","","",null,null],[17,"XKB_KEY_Armenian_O","","",null,null],[17,"XKB_KEY_Armenian_o","","",null,null],[17,"XKB_KEY_Armenian_FE","","",null,null],[17,"XKB_KEY_Armenian_fe","","",null,null],[17,"XKB_KEY_Armenian_apostrophe","","",null,null],[17,"XKB_KEY_Georgian_an","","",null,null],[17,"XKB_KEY_Georgian_ban","","",null,null],[17,"XKB_KEY_Georgian_gan","","",null,null],[17,"XKB_KEY_Georgian_don","","",null,null],[17,"XKB_KEY_Georgian_en","","",null,null],[17,"XKB_KEY_Georgian_vin","","",null,null],[17,"XKB_KEY_Georgian_zen","","",null,null],[17,"XKB_KEY_Georgian_tan","","",null,null],[17,"XKB_KEY_Georgian_in","","",null,null],[17,"XKB_KEY_Georgian_kan","","",null,null],[17,"XKB_KEY_Georgian_las","","",null,null],[17,"XKB_KEY_Georgian_man","","",null,null],[17,"XKB_KEY_Georgian_nar","","",null,null],[17,"XKB_KEY_Georgian_on","","",null,null],[17,"XKB_KEY_Georgian_par","","",null,null],[17,"XKB_KEY_Georgian_zhar","","",null,null],[17,"XKB_KEY_Georgian_rae","","",null,null],[17,"XKB_KEY_Georgian_san","","",null,null],[17,"XKB_KEY_Georgian_tar","","",null,null],[17,"XKB_KEY_Georgian_un","","",null,null],[17,"XKB_KEY_Georgian_phar","","",null,null],[17,"XKB_KEY_Georgian_khar","","",null,null],[17,"XKB_KEY_Georgian_ghan","","",null,null],[17,"XKB_KEY_Georgian_qar","","",null,null],[17,"XKB_KEY_Georgian_shin","","",null,null],[17,"XKB_KEY_Georgian_chin","","",null,null],[17,"XKB_KEY_Georgian_can","","",null,null],[17,"XKB_KEY_Georgian_jil","","",null,null],[17,"XKB_KEY_Georgian_cil","","",null,null],[17,"XKB_KEY_Georgian_char","","",null,null],[17,"XKB_KEY_Georgian_xan","","",null,null],[17,"XKB_KEY_Georgian_jhan","","",null,null],[17,"XKB_KEY_Georgian_hae","","",null,null],[17,"XKB_KEY_Georgian_he","","",null,null],[17,"XKB_KEY_Georgian_hie","","",null,null],[17,"XKB_KEY_Georgian_we","","",null,null],[17,"XKB_KEY_Georgian_har","","",null,null],[17,"XKB_KEY_Georgian_hoe","","",null,null],[17,"XKB_KEY_Georgian_fi","","",null,null],[17,"XKB_KEY_Xabovedot","","",null,null],[17,"XKB_KEY_Ibreve","","",null,null],[17,"XKB_KEY_Zstroke","","",null,null],[17,"XKB_KEY_Gcaron","","",null,null],[17,"XKB_KEY_Ocaron","","",null,null],[17,"XKB_KEY_Obarred","","",null,null],[17,"XKB_KEY_xabovedot","","",null,null],[17,"XKB_KEY_ibreve","","",null,null],[17,"XKB_KEY_zstroke","","",null,null],[17,"XKB_KEY_gcaron","","",null,null],[17,"XKB_KEY_ocaron","","",null,null],[17,"XKB_KEY_obarred","","",null,null],[17,"XKB_KEY_SCHWA","","",null,null],[17,"XKB_KEY_schwa","","",null,null],[17,"XKB_KEY_EZH","","",null,null],[17,"XKB_KEY_ezh","","",null,null],[17,"XKB_KEY_Lbelowdot","","",null,null],[17,"XKB_KEY_lbelowdot","","",null,null],[17,"XKB_KEY_Abelowdot","","",null,null],[17,"XKB_KEY_abelowdot","","",null,null],[17,"XKB_KEY_Ahook","","",null,null],[17,"XKB_KEY_ahook","","",null,null],[17,"XKB_KEY_Acircumflexacute","","",null,null],[17,"XKB_KEY_acircumflexacute","","",null,null],[17,"XKB_KEY_Acircumflexgrave","","",null,null],[17,"XKB_KEY_acircumflexgrave","","",null,null],[17,"XKB_KEY_Acircumflexhook","","",null,null],[17,"XKB_KEY_acircumflexhook","","",null,null],[17,"XKB_KEY_Acircumflextilde","","",null,null],[17,"XKB_KEY_acircumflextilde","","",null,null],[17,"XKB_KEY_Acircumflexbelowdot","","",null,null],[17,"XKB_KEY_acircumflexbelowdot","","",null,null],[17,"XKB_KEY_Abreveacute","","",null,null],[17,"XKB_KEY_abreveacute","","",null,null],[17,"XKB_KEY_Abrevegrave","","",null,null],[17,"XKB_KEY_abrevegrave","","",null,null],[17,"XKB_KEY_Abrevehook","","",null,null],[17,"XKB_KEY_abrevehook","","",null,null],[17,"XKB_KEY_Abrevetilde","","",null,null],[17,"XKB_KEY_abrevetilde","","",null,null],[17,"XKB_KEY_Abrevebelowdot","","",null,null],[17,"XKB_KEY_abrevebelowdot","","",null,null],[17,"XKB_KEY_Ebelowdot","","",null,null],[17,"XKB_KEY_ebelowdot","","",null,null],[17,"XKB_KEY_Ehook","","",null,null],[17,"XKB_KEY_ehook","","",null,null],[17,"XKB_KEY_Etilde","","",null,null],[17,"XKB_KEY_etilde","","",null,null],[17,"XKB_KEY_Ecircumflexacute","","",null,null],[17,"XKB_KEY_ecircumflexacute","","",null,null],[17,"XKB_KEY_Ecircumflexgrave","","",null,null],[17,"XKB_KEY_ecircumflexgrave","","",null,null],[17,"XKB_KEY_Ecircumflexhook","","",null,null],[17,"XKB_KEY_ecircumflexhook","","",null,null],[17,"XKB_KEY_Ecircumflextilde","","",null,null],[17,"XKB_KEY_ecircumflextilde","","",null,null],[17,"XKB_KEY_Ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ihook","","",null,null],[17,"XKB_KEY_ihook","","",null,null],[17,"XKB_KEY_Ibelowdot","","",null,null],[17,"XKB_KEY_ibelowdot","","",null,null],[17,"XKB_KEY_Obelowdot","","",null,null],[17,"XKB_KEY_obelowdot","","",null,null],[17,"XKB_KEY_Ohook","","",null,null],[17,"XKB_KEY_ohook","","",null,null],[17,"XKB_KEY_Ocircumflexacute","","",null,null],[17,"XKB_KEY_ocircumflexacute","","",null,null],[17,"XKB_KEY_Ocircumflexgrave","","",null,null],[17,"XKB_KEY_ocircumflexgrave","","",null,null],[17,"XKB_KEY_Ocircumflexhook","","",null,null],[17,"XKB_KEY_ocircumflexhook","","",null,null],[17,"XKB_KEY_Ocircumflextilde","","",null,null],[17,"XKB_KEY_ocircumflextilde","","",null,null],[17,"XKB_KEY_Ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ohornacute","","",null,null],[17,"XKB_KEY_ohornacute","","",null,null],[17,"XKB_KEY_Ohorngrave","","",null,null],[17,"XKB_KEY_ohorngrave","","",null,null],[17,"XKB_KEY_Ohornhook","","",null,null],[17,"XKB_KEY_ohornhook","","",null,null],[17,"XKB_KEY_Ohorntilde","","",null,null],[17,"XKB_KEY_ohorntilde","","",null,null],[17,"XKB_KEY_Ohornbelowdot","","",null,null],[17,"XKB_KEY_ohornbelowdot","","",null,null],[17,"XKB_KEY_Ubelowdot","","",null,null],[17,"XKB_KEY_ubelowdot","","",null,null],[17,"XKB_KEY_Uhook","","",null,null],[17,"XKB_KEY_uhook","","",null,null],[17,"XKB_KEY_Uhornacute","","",null,null],[17,"XKB_KEY_uhornacute","","",null,null],[17,"XKB_KEY_Uhorngrave","","",null,null],[17,"XKB_KEY_uhorngrave","","",null,null],[17,"XKB_KEY_Uhornhook","","",null,null],[17,"XKB_KEY_uhornhook","","",null,null],[17,"XKB_KEY_Uhorntilde","","",null,null],[17,"XKB_KEY_uhorntilde","","",null,null],[17,"XKB_KEY_Uhornbelowdot","","",null,null],[17,"XKB_KEY_uhornbelowdot","","",null,null],[17,"XKB_KEY_Ybelowdot","","",null,null],[17,"XKB_KEY_ybelowdot","","",null,null],[17,"XKB_KEY_Yhook","","",null,null],[17,"XKB_KEY_yhook","","",null,null],[17,"XKB_KEY_Ytilde","","",null,null],[17,"XKB_KEY_ytilde","","",null,null],[17,"XKB_KEY_Ohorn","","",null,null],[17,"XKB_KEY_ohorn","","",null,null],[17,"XKB_KEY_Uhorn","","",null,null],[17,"XKB_KEY_uhorn","","",null,null],[17,"XKB_KEY_EcuSign","","",null,null],[17,"XKB_KEY_ColonSign","","",null,null],[17,"XKB_KEY_CruzeiroSign","","",null,null],[17,"XKB_KEY_FFrancSign","","",null,null],[17,"XKB_KEY_LiraSign","","",null,null],[17,"XKB_KEY_MillSign","","",null,null],[17,"XKB_KEY_NairaSign","","",null,null],[17,"XKB_KEY_PesetaSign","","",null,null],[17,"XKB_KEY_RupeeSign","","",null,null],[17,"XKB_KEY_WonSign","","",null,null],[17,"XKB_KEY_NewSheqelSign","","",null,null],[17,"XKB_KEY_DongSign","","",null,null],[17,"XKB_KEY_EuroSign","","",null,null],[17,"XKB_KEY_zerosuperior","","",null,null],[17,"XKB_KEY_foursuperior","","",null,null],[17,"XKB_KEY_fivesuperior","","",null,null],[17,"XKB_KEY_sixsuperior","","",null,null],[17,"XKB_KEY_sevensuperior","","",null,null],[17,"XKB_KEY_eightsuperior","","",null,null],[17,"XKB_KEY_ninesuperior","","",null,null],[17,"XKB_KEY_zerosubscript","","",null,null],[17,"XKB_KEY_onesubscript","","",null,null],[17,"XKB_KEY_twosubscript","","",null,null],[17,"XKB_KEY_threesubscript","","",null,null],[17,"XKB_KEY_foursubscript","","",null,null],[17,"XKB_KEY_fivesubscript","","",null,null],[17,"XKB_KEY_sixsubscript","","",null,null],[17,"XKB_KEY_sevensubscript","","",null,null],[17,"XKB_KEY_eightsubscript","","",null,null],[17,"XKB_KEY_ninesubscript","","",null,null],[17,"XKB_KEY_partdifferential","","",null,null],[17,"XKB_KEY_emptyset","","",null,null],[17,"XKB_KEY_elementof","","",null,null],[17,"XKB_KEY_notelementof","","",null,null],[17,"XKB_KEY_containsas","","",null,null],[17,"XKB_KEY_squareroot","","",null,null],[17,"XKB_KEY_cuberoot","","",null,null],[17,"XKB_KEY_fourthroot","","",null,null],[17,"XKB_KEY_dintegral","","",null,null],[17,"XKB_KEY_tintegral","","",null,null],[17,"XKB_KEY_because","","",null,null],[17,"XKB_KEY_approxeq","","",null,null],[17,"XKB_KEY_notapproxeq","","",null,null],[17,"XKB_KEY_notidentical","","",null,null],[17,"XKB_KEY_stricteq","","",null,null],[17,"XKB_KEY_braille_dot_1","","",null,null],[17,"XKB_KEY_braille_dot_2","","",null,null],[17,"XKB_KEY_braille_dot_3","","",null,null],[17,"XKB_KEY_braille_dot_4","","",null,null],[17,"XKB_KEY_braille_dot_5","","",null,null],[17,"XKB_KEY_braille_dot_6","","",null,null],[17,"XKB_KEY_braille_dot_7","","",null,null],[17,"XKB_KEY_braille_dot_8","","",null,null],[17,"XKB_KEY_braille_dot_9","","",null,null],[17,"XKB_KEY_braille_dot_10","","",null,null],[17,"XKB_KEY_braille_blank","","",null,null],[17,"XKB_KEY_braille_dots_1","","",null,null],[17,"XKB_KEY_braille_dots_2","","",null,null],[17,"XKB_KEY_braille_dots_12","","",null,null],[17,"XKB_KEY_braille_dots_3","","",null,null],[17,"XKB_KEY_braille_dots_13","","",null,null],[17,"XKB_KEY_braille_dots_23","","",null,null],[17,"XKB_KEY_braille_dots_123","","",null,null],[17,"XKB_KEY_braille_dots_4","","",null,null],[17,"XKB_KEY_braille_dots_14","","",null,null],[17,"XKB_KEY_braille_dots_24","","",null,null],[17,"XKB_KEY_braille_dots_124","","",null,null],[17,"XKB_KEY_braille_dots_34","","",null,null],[17,"XKB_KEY_braille_dots_134","","",null,null],[17,"XKB_KEY_braille_dots_234","","",null,null],[17,"XKB_KEY_braille_dots_1234","","",null,null],[17,"XKB_KEY_braille_dots_5","","",null,null],[17,"XKB_KEY_braille_dots_15","","",null,null],[17,"XKB_KEY_braille_dots_25","","",null,null],[17,"XKB_KEY_braille_dots_125","","",null,null],[17,"XKB_KEY_braille_dots_35","","",null,null],[17,"XKB_KEY_braille_dots_135","","",null,null],[17,"XKB_KEY_braille_dots_235","","",null,null],[17,"XKB_KEY_braille_dots_1235","","",null,null],[17,"XKB_KEY_braille_dots_45","","",null,null],[17,"XKB_KEY_braille_dots_145","","",null,null],[17,"XKB_KEY_braille_dots_245","","",null,null],[17,"XKB_KEY_braille_dots_1245","","",null,null],[17,"XKB_KEY_braille_dots_345","","",null,null],[17,"XKB_KEY_braille_dots_1345","","",null,null],[17,"XKB_KEY_braille_dots_2345","","",null,null],[17,"XKB_KEY_braille_dots_12345","","",null,null],[17,"XKB_KEY_braille_dots_6","","",null,null],[17,"XKB_KEY_braille_dots_16","","",null,null],[17,"XKB_KEY_braille_dots_26","","",null,null],[17,"XKB_KEY_braille_dots_126","","",null,null],[17,"XKB_KEY_braille_dots_36","","",null,null],[17,"XKB_KEY_braille_dots_136","","",null,null],[17,"XKB_KEY_braille_dots_236","","",null,null],[17,"XKB_KEY_braille_dots_1236","","",null,null],[17,"XKB_KEY_braille_dots_46","","",null,null],[17,"XKB_KEY_braille_dots_146","","",null,null],[17,"XKB_KEY_braille_dots_246","","",null,null],[17,"XKB_KEY_braille_dots_1246","","",null,null],[17,"XKB_KEY_braille_dots_346","","",null,null],[17,"XKB_KEY_braille_dots_1346","","",null,null],[17,"XKB_KEY_braille_dots_2346","","",null,null],[17,"XKB_KEY_braille_dots_12346","","",null,null],[17,"XKB_KEY_braille_dots_56","","",null,null],[17,"XKB_KEY_braille_dots_156","","",null,null],[17,"XKB_KEY_braille_dots_256","","",null,null],[17,"XKB_KEY_braille_dots_1256","","",null,null],[17,"XKB_KEY_braille_dots_356","","",null,null],[17,"XKB_KEY_braille_dots_1356","","",null,null],[17,"XKB_KEY_braille_dots_2356","","",null,null],[17,"XKB_KEY_braille_dots_12356","","",null,null],[17,"XKB_KEY_braille_dots_456","","",null,null],[17,"XKB_KEY_braille_dots_1456","","",null,null],[17,"XKB_KEY_braille_dots_2456","","",null,null],[17,"XKB_KEY_braille_dots_12456","","",null,null],[17,"XKB_KEY_braille_dots_3456","","",null,null],[17,"XKB_KEY_braille_dots_13456","","",null,null],[17,"XKB_KEY_braille_dots_23456","","",null,null],[17,"XKB_KEY_braille_dots_123456","","",null,null],[17,"XKB_KEY_braille_dots_7","","",null,null],[17,"XKB_KEY_braille_dots_17","","",null,null],[17,"XKB_KEY_braille_dots_27","","",null,null],[17,"XKB_KEY_braille_dots_127","","",null,null],[17,"XKB_KEY_braille_dots_37","","",null,null],[17,"XKB_KEY_braille_dots_137","","",null,null],[17,"XKB_KEY_braille_dots_237","","",null,null],[17,"XKB_KEY_braille_dots_1237","","",null,null],[17,"XKB_KEY_braille_dots_47","","",null,null],[17,"XKB_KEY_braille_dots_147","","",null,null],[17,"XKB_KEY_braille_dots_247","","",null,null],[17,"XKB_KEY_braille_dots_1247","","",null,null],[17,"XKB_KEY_braille_dots_347","","",null,null],[17,"XKB_KEY_braille_dots_1347","","",null,null],[17,"XKB_KEY_braille_dots_2347","","",null,null],[17,"XKB_KEY_braille_dots_12347","","",null,null],[17,"XKB_KEY_braille_dots_57","","",null,null],[17,"XKB_KEY_braille_dots_157","","",null,null],[17,"XKB_KEY_braille_dots_257","","",null,null],[17,"XKB_KEY_braille_dots_1257","","",null,null],[17,"XKB_KEY_braille_dots_357","","",null,null],[17,"XKB_KEY_braille_dots_1357","","",null,null],[17,"XKB_KEY_braille_dots_2357","","",null,null],[17,"XKB_KEY_braille_dots_12357","","",null,null],[17,"XKB_KEY_braille_dots_457","","",null,null],[17,"XKB_KEY_braille_dots_1457","","",null,null],[17,"XKB_KEY_braille_dots_2457","","",null,null],[17,"XKB_KEY_braille_dots_12457","","",null,null],[17,"XKB_KEY_braille_dots_3457","","",null,null],[17,"XKB_KEY_braille_dots_13457","","",null,null],[17,"XKB_KEY_braille_dots_23457","","",null,null],[17,"XKB_KEY_braille_dots_123457","","",null,null],[17,"XKB_KEY_braille_dots_67","","",null,null],[17,"XKB_KEY_braille_dots_167","","",null,null],[17,"XKB_KEY_braille_dots_267","","",null,null],[17,"XKB_KEY_braille_dots_1267","","",null,null],[17,"XKB_KEY_braille_dots_367","","",null,null],[17,"XKB_KEY_braille_dots_1367","","",null,null],[17,"XKB_KEY_braille_dots_2367","","",null,null],[17,"XKB_KEY_braille_dots_12367","","",null,null],[17,"XKB_KEY_braille_dots_467","","",null,null],[17,"XKB_KEY_braille_dots_1467","","",null,null],[17,"XKB_KEY_braille_dots_2467","","",null,null],[17,"XKB_KEY_braille_dots_12467","","",null,null],[17,"XKB_KEY_braille_dots_3467","","",null,null],[17,"XKB_KEY_braille_dots_13467","","",null,null],[17,"XKB_KEY_braille_dots_23467","","",null,null],[17,"XKB_KEY_braille_dots_123467","","",null,null],[17,"XKB_KEY_braille_dots_567","","",null,null],[17,"XKB_KEY_braille_dots_1567","","",null,null],[17,"XKB_KEY_braille_dots_2567","","",null,null],[17,"XKB_KEY_braille_dots_12567","","",null,null],[17,"XKB_KEY_braille_dots_3567","","",null,null],[17,"XKB_KEY_braille_dots_13567","","",null,null],[17,"XKB_KEY_braille_dots_23567","","",null,null],[17,"XKB_KEY_braille_dots_123567","","",null,null],[17,"XKB_KEY_braille_dots_4567","","",null,null],[17,"XKB_KEY_braille_dots_14567","","",null,null],[17,"XKB_KEY_braille_dots_24567","","",null,null],[17,"XKB_KEY_braille_dots_124567","","",null,null],[17,"XKB_KEY_braille_dots_34567","","",null,null],[17,"XKB_KEY_braille_dots_134567","","",null,null],[17,"XKB_KEY_braille_dots_234567","","",null,null],[17,"XKB_KEY_braille_dots_1234567","","",null,null],[17,"XKB_KEY_braille_dots_8","","",null,null],[17,"XKB_KEY_braille_dots_18","","",null,null],[17,"XKB_KEY_braille_dots_28","","",null,null],[17,"XKB_KEY_braille_dots_128","","",null,null],[17,"XKB_KEY_braille_dots_38","","",null,null],[17,"XKB_KEY_braille_dots_138","","",null,null],[17,"XKB_KEY_braille_dots_238","","",null,null],[17,"XKB_KEY_braille_dots_1238","","",null,null],[17,"XKB_KEY_braille_dots_48","","",null,null],[17,"XKB_KEY_braille_dots_148","","",null,null],[17,"XKB_KEY_braille_dots_248","","",null,null],[17,"XKB_KEY_braille_dots_1248","","",null,null],[17,"XKB_KEY_braille_dots_348","","",null,null],[17,"XKB_KEY_braille_dots_1348","","",null,null],[17,"XKB_KEY_braille_dots_2348","","",null,null],[17,"XKB_KEY_braille_dots_12348","","",null,null],[17,"XKB_KEY_braille_dots_58","","",null,null],[17,"XKB_KEY_braille_dots_158","","",null,null],[17,"XKB_KEY_braille_dots_258","","",null,null],[17,"XKB_KEY_braille_dots_1258","","",null,null],[17,"XKB_KEY_braille_dots_358","","",null,null],[17,"XKB_KEY_braille_dots_1358","","",null,null],[17,"XKB_KEY_braille_dots_2358","","",null,null],[17,"XKB_KEY_braille_dots_12358","","",null,null],[17,"XKB_KEY_braille_dots_458","","",null,null],[17,"XKB_KEY_braille_dots_1458","","",null,null],[17,"XKB_KEY_braille_dots_2458","","",null,null],[17,"XKB_KEY_braille_dots_12458","","",null,null],[17,"XKB_KEY_braille_dots_3458","","",null,null],[17,"XKB_KEY_braille_dots_13458","","",null,null],[17,"XKB_KEY_braille_dots_23458","","",null,null],[17,"XKB_KEY_braille_dots_123458","","",null,null],[17,"XKB_KEY_braille_dots_68","","",null,null],[17,"XKB_KEY_braille_dots_168","","",null,null],[17,"XKB_KEY_braille_dots_268","","",null,null],[17,"XKB_KEY_braille_dots_1268","","",null,null],[17,"XKB_KEY_braille_dots_368","","",null,null],[17,"XKB_KEY_braille_dots_1368","","",null,null],[17,"XKB_KEY_braille_dots_2368","","",null,null],[17,"XKB_KEY_braille_dots_12368","","",null,null],[17,"XKB_KEY_braille_dots_468","","",null,null],[17,"XKB_KEY_braille_dots_1468","","",null,null],[17,"XKB_KEY_braille_dots_2468","","",null,null],[17,"XKB_KEY_braille_dots_12468","","",null,null],[17,"XKB_KEY_braille_dots_3468","","",null,null],[17,"XKB_KEY_braille_dots_13468","","",null,null],[17,"XKB_KEY_braille_dots_23468","","",null,null],[17,"XKB_KEY_braille_dots_123468","","",null,null],[17,"XKB_KEY_braille_dots_568","","",null,null],[17,"XKB_KEY_braille_dots_1568","","",null,null],[17,"XKB_KEY_braille_dots_2568","","",null,null],[17,"XKB_KEY_braille_dots_12568","","",null,null],[17,"XKB_KEY_braille_dots_3568","","",null,null],[17,"XKB_KEY_braille_dots_13568","","",null,null],[17,"XKB_KEY_braille_dots_23568","","",null,null],[17,"XKB_KEY_braille_dots_123568","","",null,null],[17,"XKB_KEY_braille_dots_4568","","",null,null],[17,"XKB_KEY_braille_dots_14568","","",null,null],[17,"XKB_KEY_braille_dots_24568","","",null,null],[17,"XKB_KEY_braille_dots_124568","","",null,null],[17,"XKB_KEY_braille_dots_34568","","",null,null],[17,"XKB_KEY_braille_dots_134568","","",null,null],[17,"XKB_KEY_braille_dots_234568","","",null,null],[17,"XKB_KEY_braille_dots_1234568","","",null,null],[17,"XKB_KEY_braille_dots_78","","",null,null],[17,"XKB_KEY_braille_dots_178","","",null,null],[17,"XKB_KEY_braille_dots_278","","",null,null],[17,"XKB_KEY_braille_dots_1278","","",null,null],[17,"XKB_KEY_braille_dots_378","","",null,null],[17,"XKB_KEY_braille_dots_1378","","",null,null],[17,"XKB_KEY_braille_dots_2378","","",null,null],[17,"XKB_KEY_braille_dots_12378","","",null,null],[17,"XKB_KEY_braille_dots_478","","",null,null],[17,"XKB_KEY_braille_dots_1478","","",null,null],[17,"XKB_KEY_braille_dots_2478","","",null,null],[17,"XKB_KEY_braille_dots_12478","","",null,null],[17,"XKB_KEY_braille_dots_3478","","",null,null],[17,"XKB_KEY_braille_dots_13478","","",null,null],[17,"XKB_KEY_braille_dots_23478","","",null,null],[17,"XKB_KEY_braille_dots_123478","","",null,null],[17,"XKB_KEY_braille_dots_578","","",null,null],[17,"XKB_KEY_braille_dots_1578","","",null,null],[17,"XKB_KEY_braille_dots_2578","","",null,null],[17,"XKB_KEY_braille_dots_12578","","",null,null],[17,"XKB_KEY_braille_dots_3578","","",null,null],[17,"XKB_KEY_braille_dots_13578","","",null,null],[17,"XKB_KEY_braille_dots_23578","","",null,null],[17,"XKB_KEY_braille_dots_123578","","",null,null],[17,"XKB_KEY_braille_dots_4578","","",null,null],[17,"XKB_KEY_braille_dots_14578","","",null,null],[17,"XKB_KEY_braille_dots_24578","","",null,null],[17,"XKB_KEY_braille_dots_124578","","",null,null],[17,"XKB_KEY_braille_dots_34578","","",null,null],[17,"XKB_KEY_braille_dots_134578","","",null,null],[17,"XKB_KEY_braille_dots_234578","","",null,null],[17,"XKB_KEY_braille_dots_1234578","","",null,null],[17,"XKB_KEY_braille_dots_678","","",null,null],[17,"XKB_KEY_braille_dots_1678","","",null,null],[17,"XKB_KEY_braille_dots_2678","","",null,null],[17,"XKB_KEY_braille_dots_12678","","",null,null],[17,"XKB_KEY_braille_dots_3678","","",null,null],[17,"XKB_KEY_braille_dots_13678","","",null,null],[17,"XKB_KEY_braille_dots_23678","","",null,null],[17,"XKB_KEY_braille_dots_123678","","",null,null],[17,"XKB_KEY_braille_dots_4678","","",null,null],[17,"XKB_KEY_braille_dots_14678","","",null,null],[17,"XKB_KEY_braille_dots_24678","","",null,null],[17,"XKB_KEY_braille_dots_124678","","",null,null],[17,"XKB_KEY_braille_dots_34678","","",null,null],[17,"XKB_KEY_braille_dots_134678","","",null,null],[17,"XKB_KEY_braille_dots_234678","","",null,null],[17,"XKB_KEY_braille_dots_1234678","","",null,null],[17,"XKB_KEY_braille_dots_5678","","",null,null],[17,"XKB_KEY_braille_dots_15678","","",null,null],[17,"XKB_KEY_braille_dots_25678","","",null,null],[17,"XKB_KEY_braille_dots_125678","","",null,null],[17,"XKB_KEY_braille_dots_35678","","",null,null],[17,"XKB_KEY_braille_dots_135678","","",null,null],[17,"XKB_KEY_braille_dots_235678","","",null,null],[17,"XKB_KEY_braille_dots_1235678","","",null,null],[17,"XKB_KEY_braille_dots_45678","","",null,null],[17,"XKB_KEY_braille_dots_145678","","",null,null],[17,"XKB_KEY_braille_dots_245678","","",null,null],[17,"XKB_KEY_braille_dots_1245678","","",null,null],[17,"XKB_KEY_braille_dots_345678","","",null,null],[17,"XKB_KEY_braille_dots_1345678","","",null,null],[17,"XKB_KEY_braille_dots_2345678","","",null,null],[17,"XKB_KEY_braille_dots_12345678","","",null,null],[17,"XKB_KEY_Sinh_ng","","",null,null],[17,"XKB_KEY_Sinh_h2","","",null,null],[17,"XKB_KEY_Sinh_a","","",null,null],[17,"XKB_KEY_Sinh_aa","","",null,null],[17,"XKB_KEY_Sinh_ae","","",null,null],[17,"XKB_KEY_Sinh_aee","","",null,null],[17,"XKB_KEY_Sinh_i","","",null,null],[17,"XKB_KEY_Sinh_ii","","",null,null],[17,"XKB_KEY_Sinh_u","","",null,null],[17,"XKB_KEY_Sinh_uu","","",null,null],[17,"XKB_KEY_Sinh_ri","","",null,null],[17,"XKB_KEY_Sinh_rii","","",null,null],[17,"XKB_KEY_Sinh_lu","","",null,null],[17,"XKB_KEY_Sinh_luu","","",null,null],[17,"XKB_KEY_Sinh_e","","",null,null],[17,"XKB_KEY_Sinh_ee","","",null,null],[17,"XKB_KEY_Sinh_ai","","",null,null],[17,"XKB_KEY_Sinh_o","","",null,null],[17,"XKB_KEY_Sinh_oo","","",null,null],[17,"XKB_KEY_Sinh_au","","",null,null],[17,"XKB_KEY_Sinh_ka","","",null,null],[17,"XKB_KEY_Sinh_kha","","",null,null],[17,"XKB_KEY_Sinh_ga","","",null,null],[17,"XKB_KEY_Sinh_gha","","",null,null],[17,"XKB_KEY_Sinh_ng2","","",null,null],[17,"XKB_KEY_Sinh_nga","","",null,null],[17,"XKB_KEY_Sinh_ca","","",null,null],[17,"XKB_KEY_Sinh_cha","","",null,null],[17,"XKB_KEY_Sinh_ja","","",null,null],[17,"XKB_KEY_Sinh_jha","","",null,null],[17,"XKB_KEY_Sinh_nya","","",null,null],[17,"XKB_KEY_Sinh_jnya","","",null,null],[17,"XKB_KEY_Sinh_nja","","",null,null],[17,"XKB_KEY_Sinh_tta","","",null,null],[17,"XKB_KEY_Sinh_ttha","","",null,null],[17,"XKB_KEY_Sinh_dda","","",null,null],[17,"XKB_KEY_Sinh_ddha","","",null,null],[17,"XKB_KEY_Sinh_nna","","",null,null],[17,"XKB_KEY_Sinh_ndda","","",null,null],[17,"XKB_KEY_Sinh_tha","","",null,null],[17,"XKB_KEY_Sinh_thha","","",null,null],[17,"XKB_KEY_Sinh_dha","","",null,null],[17,"XKB_KEY_Sinh_dhha","","",null,null],[17,"XKB_KEY_Sinh_na","","",null,null],[17,"XKB_KEY_Sinh_ndha","","",null,null],[17,"XKB_KEY_Sinh_pa","","",null,null],[17,"XKB_KEY_Sinh_pha","","",null,null],[17,"XKB_KEY_Sinh_ba","","",null,null],[17,"XKB_KEY_Sinh_bha","","",null,null],[17,"XKB_KEY_Sinh_ma","","",null,null],[17,"XKB_KEY_Sinh_mba","","",null,null],[17,"XKB_KEY_Sinh_ya","","",null,null],[17,"XKB_KEY_Sinh_ra","","",null,null],[17,"XKB_KEY_Sinh_la","","",null,null],[17,"XKB_KEY_Sinh_va","","",null,null],[17,"XKB_KEY_Sinh_sha","","",null,null],[17,"XKB_KEY_Sinh_ssha","","",null,null],[17,"XKB_KEY_Sinh_sa","","",null,null],[17,"XKB_KEY_Sinh_ha","","",null,null],[17,"XKB_KEY_Sinh_lla","","",null,null],[17,"XKB_KEY_Sinh_fa","","",null,null],[17,"XKB_KEY_Sinh_al","","",null,null],[17,"XKB_KEY_Sinh_aa2","","",null,null],[17,"XKB_KEY_Sinh_ae2","","",null,null],[17,"XKB_KEY_Sinh_aee2","","",null,null],[17,"XKB_KEY_Sinh_i2","","",null,null],[17,"XKB_KEY_Sinh_ii2","","",null,null],[17,"XKB_KEY_Sinh_u2","","",null,null],[17,"XKB_KEY_Sinh_uu2","","",null,null],[17,"XKB_KEY_Sinh_ru2","","",null,null],[17,"XKB_KEY_Sinh_e2","","",null,null],[17,"XKB_KEY_Sinh_ee2","","",null,null],[17,"XKB_KEY_Sinh_ai2","","",null,null],[17,"XKB_KEY_Sinh_o2","","",null,null],[17,"XKB_KEY_Sinh_oo2","","",null,null],[17,"XKB_KEY_Sinh_au2","","",null,null],[17,"XKB_KEY_Sinh_lu2","","",null,null],[17,"XKB_KEY_Sinh_ruu2","","",null,null],[17,"XKB_KEY_Sinh_luu2","","",null,null],[17,"XKB_KEY_Sinh_kunddaliya","","",null,null],[17,"XKB_KEY_XF86ModeLock","","",null,null],[17,"XKB_KEY_XF86MonBrightnessUp","","",null,null],[17,"XKB_KEY_XF86MonBrightnessDown","","",null,null],[17,"XKB_KEY_XF86KbdLightOnOff","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessUp","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessDown","","",null,null],[17,"XKB_KEY_XF86Standby","","",null,null],[17,"XKB_KEY_XF86AudioLowerVolume","","",null,null],[17,"XKB_KEY_XF86AudioMute","","",null,null],[17,"XKB_KEY_XF86AudioRaiseVolume","","",null,null],[17,"XKB_KEY_XF86AudioPlay","","",null,null],[17,"XKB_KEY_XF86AudioStop","","",null,null],[17,"XKB_KEY_XF86AudioPrev","","",null,null],[17,"XKB_KEY_XF86AudioNext","","",null,null],[17,"XKB_KEY_XF86HomePage","","",null,null],[17,"XKB_KEY_XF86Mail","","",null,null],[17,"XKB_KEY_XF86Start","","",null,null],[17,"XKB_KEY_XF86Search","","",null,null],[17,"XKB_KEY_XF86AudioRecord","","",null,null],[17,"XKB_KEY_XF86Calculator","","",null,null],[17,"XKB_KEY_XF86Memo","","",null,null],[17,"XKB_KEY_XF86ToDoList","","",null,null],[17,"XKB_KEY_XF86Calendar","","",null,null],[17,"XKB_KEY_XF86PowerDown","","",null,null],[17,"XKB_KEY_XF86ContrastAdjust","","",null,null],[17,"XKB_KEY_XF86RockerUp","","",null,null],[17,"XKB_KEY_XF86RockerDown","","",null,null],[17,"XKB_KEY_XF86RockerEnter","","",null,null],[17,"XKB_KEY_XF86Back","","",null,null],[17,"XKB_KEY_XF86Forward","","",null,null],[17,"XKB_KEY_XF86Stop","","",null,null],[17,"XKB_KEY_XF86Refresh","","",null,null],[17,"XKB_KEY_XF86PowerOff","","",null,null],[17,"XKB_KEY_XF86WakeUp","","",null,null],[17,"XKB_KEY_XF86Eject","","",null,null],[17,"XKB_KEY_XF86ScreenSaver","","",null,null],[17,"XKB_KEY_XF86WWW","","",null,null],[17,"XKB_KEY_XF86Sleep","","",null,null],[17,"XKB_KEY_XF86Favorites","","",null,null],[17,"XKB_KEY_XF86AudioPause","","",null,null],[17,"XKB_KEY_XF86AudioMedia","","",null,null],[17,"XKB_KEY_XF86MyComputer","","",null,null],[17,"XKB_KEY_XF86VendorHome","","",null,null],[17,"XKB_KEY_XF86LightBulb","","",null,null],[17,"XKB_KEY_XF86Shop","","",null,null],[17,"XKB_KEY_XF86History","","",null,null],[17,"XKB_KEY_XF86OpenURL","","",null,null],[17,"XKB_KEY_XF86AddFavorite","","",null,null],[17,"XKB_KEY_XF86HotLinks","","",null,null],[17,"XKB_KEY_XF86BrightnessAdjust","","",null,null],[17,"XKB_KEY_XF86Finance","","",null,null],[17,"XKB_KEY_XF86Community","","",null,null],[17,"XKB_KEY_XF86AudioRewind","","",null,null],[17,"XKB_KEY_XF86BackForward","","",null,null],[17,"XKB_KEY_XF86Launch0","","",null,null],[17,"XKB_KEY_XF86Launch1","","",null,null],[17,"XKB_KEY_XF86Launch2","","",null,null],[17,"XKB_KEY_XF86Launch3","","",null,null],[17,"XKB_KEY_XF86Launch4","","",null,null],[17,"XKB_KEY_XF86Launch5","","",null,null],[17,"XKB_KEY_XF86Launch6","","",null,null],[17,"XKB_KEY_XF86Launch7","","",null,null],[17,"XKB_KEY_XF86Launch8","","",null,null],[17,"XKB_KEY_XF86Launch9","","",null,null],[17,"XKB_KEY_XF86LaunchA","","",null,null],[17,"XKB_KEY_XF86LaunchB","","",null,null],[17,"XKB_KEY_XF86LaunchC","","",null,null],[17,"XKB_KEY_XF86LaunchD","","",null,null],[17,"XKB_KEY_XF86LaunchE","","",null,null],[17,"XKB_KEY_XF86LaunchF","","",null,null],[17,"XKB_KEY_XF86ApplicationLeft","","",null,null],[17,"XKB_KEY_XF86ApplicationRight","","",null,null],[17,"XKB_KEY_XF86Book","","",null,null],[17,"XKB_KEY_XF86CD","","",null,null],[17,"XKB_KEY_XF86Calculater","","",null,null],[17,"XKB_KEY_XF86Clear","","",null,null],[17,"XKB_KEY_XF86Close","","",null,null],[17,"XKB_KEY_XF86Copy","","",null,null],[17,"XKB_KEY_XF86Cut","","",null,null],[17,"XKB_KEY_XF86Display","","",null,null],[17,"XKB_KEY_XF86DOS","","",null,null],[17,"XKB_KEY_XF86Documents","","",null,null],[17,"XKB_KEY_XF86Excel","","",null,null],[17,"XKB_KEY_XF86Explorer","","",null,null],[17,"XKB_KEY_XF86Game","","",null,null],[17,"XKB_KEY_XF86Go","","",null,null],[17,"XKB_KEY_XF86iTouch","","",null,null],[17,"XKB_KEY_XF86LogOff","","",null,null],[17,"XKB_KEY_XF86Market","","",null,null],[17,"XKB_KEY_XF86Meeting","","",null,null],[17,"XKB_KEY_XF86MenuKB","","",null,null],[17,"XKB_KEY_XF86MenuPB","","",null,null],[17,"XKB_KEY_XF86MySites","","",null,null],[17,"XKB_KEY_XF86New","","",null,null],[17,"XKB_KEY_XF86News","","",null,null],[17,"XKB_KEY_XF86OfficeHome","","",null,null],[17,"XKB_KEY_XF86Open","","",null,null],[17,"XKB_KEY_XF86Option","","",null,null],[17,"XKB_KEY_XF86Paste","","",null,null],[17,"XKB_KEY_XF86Phone","","",null,null],[17,"XKB_KEY_XF86Q","","",null,null],[17,"XKB_KEY_XF86Reply","","",null,null],[17,"XKB_KEY_XF86Reload","","",null,null],[17,"XKB_KEY_XF86RotateWindows","","",null,null],[17,"XKB_KEY_XF86RotationPB","","",null,null],[17,"XKB_KEY_XF86RotationKB","","",null,null],[17,"XKB_KEY_XF86Save","","",null,null],[17,"XKB_KEY_XF86ScrollUp","","",null,null],[17,"XKB_KEY_XF86ScrollDown","","",null,null],[17,"XKB_KEY_XF86ScrollClick","","",null,null],[17,"XKB_KEY_XF86Send","","",null,null],[17,"XKB_KEY_XF86Spell","","",null,null],[17,"XKB_KEY_XF86SplitScreen","","",null,null],[17,"XKB_KEY_XF86Support","","",null,null],[17,"XKB_KEY_XF86TaskPane","","",null,null],[17,"XKB_KEY_XF86Terminal","","",null,null],[17,"XKB_KEY_XF86Tools","","",null,null],[17,"XKB_KEY_XF86Travel","","",null,null],[17,"XKB_KEY_XF86UserPB","","",null,null],[17,"XKB_KEY_XF86User1KB","","",null,null],[17,"XKB_KEY_XF86User2KB","","",null,null],[17,"XKB_KEY_XF86Video","","",null,null],[17,"XKB_KEY_XF86WheelButton","","",null,null],[17,"XKB_KEY_XF86Word","","",null,null],[17,"XKB_KEY_XF86Xfer","","",null,null],[17,"XKB_KEY_XF86ZoomIn","","",null,null],[17,"XKB_KEY_XF86ZoomOut","","",null,null],[17,"XKB_KEY_XF86Away","","",null,null],[17,"XKB_KEY_XF86Messenger","","",null,null],[17,"XKB_KEY_XF86WebCam","","",null,null],[17,"XKB_KEY_XF86MailForward","","",null,null],[17,"XKB_KEY_XF86Pictures","","",null,null],[17,"XKB_KEY_XF86Music","","",null,null],[17,"XKB_KEY_XF86Battery","","",null,null],[17,"XKB_KEY_XF86Bluetooth","","",null,null],[17,"XKB_KEY_XF86WLAN","","",null,null],[17,"XKB_KEY_XF86UWB","","",null,null],[17,"XKB_KEY_XF86AudioForward","","",null,null],[17,"XKB_KEY_XF86AudioRepeat","","",null,null],[17,"XKB_KEY_XF86AudioRandomPlay","","",null,null],[17,"XKB_KEY_XF86Subtitle","","",null,null],[17,"XKB_KEY_XF86AudioCycleTrack","","",null,null],[17,"XKB_KEY_XF86CycleAngle","","",null,null],[17,"XKB_KEY_XF86FrameBack","","",null,null],[17,"XKB_KEY_XF86FrameForward","","",null,null],[17,"XKB_KEY_XF86Time","","",null,null],[17,"XKB_KEY_XF86Select","","",null,null],[17,"XKB_KEY_XF86View","","",null,null],[17,"XKB_KEY_XF86TopMenu","","",null,null],[17,"XKB_KEY_XF86Red","","",null,null],[17,"XKB_KEY_XF86Green","","",null,null],[17,"XKB_KEY_XF86Yellow","","",null,null],[17,"XKB_KEY_XF86Blue","","",null,null],[17,"XKB_KEY_XF86Suspend","","",null,null],[17,"XKB_KEY_XF86Hibernate","","",null,null],[17,"XKB_KEY_XF86TouchpadToggle","","",null,null],[17,"XKB_KEY_XF86TouchpadOn","","",null,null],[17,"XKB_KEY_XF86TouchpadOff","","",null,null],[17,"XKB_KEY_XF86AudioMicMute","","",null,null],[17,"XKB_KEY_XF86Switch_VT_1","","",null,null],[17,"XKB_KEY_XF86Switch_VT_2","","",null,null],[17,"XKB_KEY_XF86Switch_VT_3","","",null,null],[17,"XKB_KEY_XF86Switch_VT_4","","",null,null],[17,"XKB_KEY_XF86Switch_VT_5","","",null,null],[17,"XKB_KEY_XF86Switch_VT_6","","",null,null],[17,"XKB_KEY_XF86Switch_VT_7","","",null,null],[17,"XKB_KEY_XF86Switch_VT_8","","",null,null],[17,"XKB_KEY_XF86Switch_VT_9","","",null,null],[17,"XKB_KEY_XF86Switch_VT_10","","",null,null],[17,"XKB_KEY_XF86Switch_VT_11","","",null,null],[17,"XKB_KEY_XF86Switch_VT_12","","",null,null],[17,"XKB_KEY_XF86Ungrab","","",null,null],[17,"XKB_KEY_XF86ClearGrab","","",null,null],[17,"XKB_KEY_XF86Next_VMode","","",null,null],[17,"XKB_KEY_XF86Prev_VMode","","",null,null],[17,"XKB_KEY_XF86LogWindowTree","","",null,null],[17,"XKB_KEY_XF86LogGrabInfo","","",null,null],[17,"XKB_KEY_SunFA_Grave","","",null,null],[17,"XKB_KEY_SunFA_Circum","","",null,null],[17,"XKB_KEY_SunFA_Tilde","","",null,null],[17,"XKB_KEY_SunFA_Acute","","",null,null],[17,"XKB_KEY_SunFA_Diaeresis","","",null,null],[17,"XKB_KEY_SunFA_Cedilla","","",null,null],[17,"XKB_KEY_SunF36","","",null,null],[17,"XKB_KEY_SunF37","","",null,null],[17,"XKB_KEY_SunSys_Req","","",null,null],[17,"XKB_KEY_SunPrint_Screen","","",null,null],[17,"XKB_KEY_SunCompose","","",null,null],[17,"XKB_KEY_SunAltGraph","","",null,null],[17,"XKB_KEY_SunPageUp","","",null,null],[17,"XKB_KEY_SunPageDown","","",null,null],[17,"XKB_KEY_SunUndo","","",null,null],[17,"XKB_KEY_SunAgain","","",null,null],[17,"XKB_KEY_SunFind","","",null,null],[17,"XKB_KEY_SunStop","","",null,null],[17,"XKB_KEY_SunProps","","",null,null],[17,"XKB_KEY_SunFront","","",null,null],[17,"XKB_KEY_SunCopy","","",null,null],[17,"XKB_KEY_SunOpen","","",null,null],[17,"XKB_KEY_SunPaste","","",null,null],[17,"XKB_KEY_SunCut","","",null,null],[17,"XKB_KEY_SunPowerSwitch","","",null,null],[17,"XKB_KEY_SunAudioLowerVolume","","",null,null],[17,"XKB_KEY_SunAudioMute","","",null,null],[17,"XKB_KEY_SunAudioRaiseVolume","","",null,null],[17,"XKB_KEY_SunVideoDegauss","","",null,null],[17,"XKB_KEY_SunVideoLowerBrightness","","",null,null],[17,"XKB_KEY_SunVideoRaiseBrightness","","",null,null],[17,"XKB_KEY_SunPowerSwitchShift","","",null,null],[17,"XKB_KEY_Dring_accent","","",null,null],[17,"XKB_KEY_Dcircumflex_accent","","",null,null],[17,"XKB_KEY_Dcedilla_accent","","",null,null],[17,"XKB_KEY_Dacute_accent","","",null,null],[17,"XKB_KEY_Dgrave_accent","","",null,null],[17,"XKB_KEY_Dtilde","","",null,null],[17,"XKB_KEY_Ddiaeresis","","",null,null],[17,"XKB_KEY_DRemove","","",null,null],[17,"XKB_KEY_hpClearLine","","",null,null],[17,"XKB_KEY_hpInsertLine","","",null,null],[17,"XKB_KEY_hpDeleteLine","","",null,null],[17,"XKB_KEY_hpInsertChar","","",null,null],[17,"XKB_KEY_hpDeleteChar","","",null,null],[17,"XKB_KEY_hpBackTab","","",null,null],[17,"XKB_KEY_hpKP_BackTab","","",null,null],[17,"XKB_KEY_hpModelock1","","",null,null],[17,"XKB_KEY_hpModelock2","","",null,null],[17,"XKB_KEY_hpReset","","",null,null],[17,"XKB_KEY_hpSystem","","",null,null],[17,"XKB_KEY_hpUser","","",null,null],[17,"XKB_KEY_hpmute_acute","","",null,null],[17,"XKB_KEY_hpmute_grave","","",null,null],[17,"XKB_KEY_hpmute_asciicircum","","",null,null],[17,"XKB_KEY_hpmute_diaeresis","","",null,null],[17,"XKB_KEY_hpmute_asciitilde","","",null,null],[17,"XKB_KEY_hplira","","",null,null],[17,"XKB_KEY_hpguilder","","",null,null],[17,"XKB_KEY_hpYdiaeresis","","",null,null],[17,"XKB_KEY_hpIO","","",null,null],[17,"XKB_KEY_hplongminus","","",null,null],[17,"XKB_KEY_hpblock","","",null,null],[17,"XKB_KEY_osfCopy","","",null,null],[17,"XKB_KEY_osfCut","","",null,null],[17,"XKB_KEY_osfPaste","","",null,null],[17,"XKB_KEY_osfBackTab","","",null,null],[17,"XKB_KEY_osfBackSpace","","",null,null],[17,"XKB_KEY_osfClear","","",null,null],[17,"XKB_KEY_osfEscape","","",null,null],[17,"XKB_KEY_osfAddMode","","",null,null],[17,"XKB_KEY_osfPrimaryPaste","","",null,null],[17,"XKB_KEY_osfQuickPaste","","",null,null],[17,"XKB_KEY_osfPageLeft","","",null,null],[17,"XKB_KEY_osfPageUp","","",null,null],[17,"XKB_KEY_osfPageDown","","",null,null],[17,"XKB_KEY_osfPageRight","","",null,null],[17,"XKB_KEY_osfActivate","","",null,null],[17,"XKB_KEY_osfMenuBar","","",null,null],[17,"XKB_KEY_osfLeft","","",null,null],[17,"XKB_KEY_osfUp","","",null,null],[17,"XKB_KEY_osfRight","","",null,null],[17,"XKB_KEY_osfDown","","",null,null],[17,"XKB_KEY_osfEndLine","","",null,null],[17,"XKB_KEY_osfBeginLine","","",null,null],[17,"XKB_KEY_osfEndData","","",null,null],[17,"XKB_KEY_osfBeginData","","",null,null],[17,"XKB_KEY_osfPrevMenu","","",null,null],[17,"XKB_KEY_osfNextMenu","","",null,null],[17,"XKB_KEY_osfPrevField","","",null,null],[17,"XKB_KEY_osfNextField","","",null,null],[17,"XKB_KEY_osfSelect","","",null,null],[17,"XKB_KEY_osfInsert","","",null,null],[17,"XKB_KEY_osfUndo","","",null,null],[17,"XKB_KEY_osfMenu","","",null,null],[17,"XKB_KEY_osfCancel","","",null,null],[17,"XKB_KEY_osfHelp","","",null,null],[17,"XKB_KEY_osfSelectAll","","",null,null],[17,"XKB_KEY_osfDeselectAll","","",null,null],[17,"XKB_KEY_osfReselect","","",null,null],[17,"XKB_KEY_osfExtend","","",null,null],[17,"XKB_KEY_osfRestore","","",null,null],[17,"XKB_KEY_osfDelete","","",null,null],[17,"XKB_KEY_Reset","","",null,null],[17,"XKB_KEY_System","","",null,null],[17,"XKB_KEY_User","","",null,null],[17,"XKB_KEY_ClearLine","","",null,null],[17,"XKB_KEY_InsertLine","","",null,null],[17,"XKB_KEY_DeleteLine","","",null,null],[17,"XKB_KEY_InsertChar","","",null,null],[17,"XKB_KEY_DeleteChar","","",null,null],[17,"XKB_KEY_BackTab","","",null,null],[17,"XKB_KEY_KP_BackTab","","",null,null],[17,"XKB_KEY_Ext16bit_L","","",null,null],[17,"XKB_KEY_Ext16bit_R","","",null,null],[17,"XKB_KEY_mute_acute","","",null,null],[17,"XKB_KEY_mute_grave","","",null,null],[17,"XKB_KEY_mute_asciicircum","","",null,null],[17,"XKB_KEY_mute_diaeresis","","",null,null],[17,"XKB_KEY_mute_asciitilde","","",null,null],[17,"XKB_KEY_lira","","",null,null],[17,"XKB_KEY_guilder","","",null,null],[17,"XKB_KEY_IO","","",null,null],[17,"XKB_KEY_longminus","","",null,null],[17,"XKB_KEY_block","","",null,null],[8,"Handler","wayland_kbd","",null,null],[11,"enter","","",2,null],[11,"leave","","",2,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"wlsurface"}],"output":null}],[11,"key","","",2,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"keystate"},{"name":"option"}],"output":null}],[11,"repeat_info","","",2,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"enter","","",2,null],[11,"leave","","",2,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"wlsurface"}],"output":null}],[11,"key","","",2,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"keystate"},{"name":"option"}],"output":null}],[11,"repeat_info","","",2,{"inputs":[{"name":"self"},{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"i32"},{"name":"i32"}],"output":null}]],"paths":[[4,"MappedKeyboardError"],[3,"MappedKeyboard"],[8,"Handler"]]};
searchIndex["wayland_sys"] = {"doc":"FFI bindings to the wayland system libraries.","items":[[0,"common","wayland_sys","Various types and functions that are used by both the client and the server libraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",0,null],[12,"signature","","",0,null],[12,"types","","",0,null],[3,"wl_interface","","",null,null],[12,"name","","",1,null],[12,"version","","",1,null],[12,"request_count","","",1,null],[12,"requests","","",1,null],[12,"event_count","","",1,null],[12,"events","","",1,null],[3,"wl_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[3,"wl_array","","",null,null],[12,"size","","",3,null],[12,"alloc","","",3,null],[12,"data","","",3,null],[3,"wl_argument","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",4,null],[12,"wl_display_connect","","",4,null],[12,"wl_display_disconnect","","",4,null],[12,"wl_display_get_fd","","",4,null],[12,"wl_display_roundtrip","","",4,null],[12,"wl_display_read_events","","",4,null],[12,"wl_display_prepare_read","","",4,null],[12,"wl_display_cancel_read","","",4,null],[12,"wl_display_dispatch","","",4,null],[12,"wl_display_dispatch_pending","","",4,null],[12,"wl_display_get_error","","",4,null],[12,"wl_display_get_protocol_error","","",4,null],[12,"wl_display_flush","","",4,null],[12,"wl_event_queue_destroy","","",4,null],[12,"wl_display_create_queue","","",4,null],[12,"wl_display_roundtrip_queue","","",4,null],[12,"wl_display_prepare_read_queue","","",4,null],[12,"wl_display_dispatch_queue","","",4,null],[12,"wl_display_dispatch_queue_pending","","",4,null],[12,"wl_proxy_create","","",4,null],[12,"wl_proxy_destroy","","",4,null],[12,"wl_proxy_add_listener","","",4,null],[12,"wl_proxy_get_listener","","",4,null],[12,"wl_proxy_add_dispatcher","","",4,null],[12,"wl_proxy_marshal_array_constructor","","",4,null],[12,"wl_proxy_marshal_array_constructor_versioned","","",4,null],[12,"wl_proxy_marshal_array","","",4,null],[12,"wl_proxy_set_user_data","","",4,null],[12,"wl_proxy_get_user_data","","",4,null],[12,"wl_proxy_get_id","","",4,null],[12,"wl_proxy_get_class","","",4,null],[12,"wl_proxy_set_queue","","",4,null],[12,"wl_proxy_get_version","","",4,null],[12,"wl_log_set_handler_client","","",4,null],[12,"wl_list_init","","",4,null],[12,"wl_list_insert","","",4,null],[12,"wl_list_remove","","",4,null],[12,"wl_list_length","","",4,null],[12,"wl_list_empty","","",4,null],[12,"wl_list_insert_list","","",4,null],[12,"wl_array_init","","",4,null],[12,"wl_array_release","","",4,null],[12,"wl_array_add","","",4,null],[12,"wl_array_copy","","",4,null],[12,"wl_proxy_marshal_constructor","","",4,null],[12,"wl_proxy_marshal_constructor_versioned","","",4,null],[12,"wl_proxy_marshal","","",4,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"waylandclient"}}],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",7,null],[12,"wl_egl_window_destroy","","",7,null],[12,"wl_egl_window_resize","","",7,null],[12,"wl_egl_window_get_attached_size","","",7,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"waylandegl"}}],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",10,null],[12,"height","","actual height",10,null],[12,"hotspot_x","","hot spot x (must be inside image)",10,null],[12,"hotspot_y","","hot spot y (must be inside image)",10,null],[12,"delay","","animation delay to next frame",10,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",11,null],[12,"images","","",11,null],[12,"name","","",11,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",12,null],[12,"wl_cursor_theme_destroy","","",12,null],[12,"wl_cursor_theme_get_cursor","","",12,null],[12,"wl_cursor_image_get_buffer","","",12,null],[12,"wl_cursor_frame","","",12,null],[12,"wl_cursor_frame_and_duration","","",12,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"waylandcursor"}}],[14,"ffi_dispatch","wayland_sys","",null,null]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[3,"WaylandClient"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
searchIndex["wayland_window"] = {"doc":"Wayland Window, a minimalistic decoration-drawing library for wayland applications.","items":[[3,"DecoratedSurface","wayland_window","A wrapper for a decorated surface.",null,null],[5,"substract_borders","","Substracts the border dimensions from the given dimensions.",null,null],[5,"add_borders","","Adds the border dimensions to the given dimensions.",null,null],[11,"resize","","Resizes the borders to given width and height.",0,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"new","","Creates a new decorated window around given surface.",0,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlcompositor"},{"name":"wlsubcompositor"},{"name":"wlshm"},{"name":"wlshell"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_title","","Set a short title for the surface.",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"set_class","","Set a class for the surface.",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"DecoratedSurface"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["winit"] = {"doc":"The purpose of this library is to provide an OpenGL context on as many  platforms as possible.","items":[[3,"Touch","winit","Represents touch event",null,null],[12,"phase","","",0,null],[12,"location","","",0,null],[12,"id","","unique identifier of a finger.",0,null],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called on a window. This structure can be safely cloned and sent between threads.",null,null],[3,"PollEventsIterator","","An iterator for the `poll_events` function.",null,null],[3,"WaitEventsIterator","","An iterator for the `wait_events` function.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"Window","","Represents an OpenGL context and the Window or environment around it.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",1,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",2,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",2,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",2,null],[12,"monitor","","If `Some`, the window will be in fullscreen mode with the given monitor.",2,null],[12,"title","","The title of the window in the title bar.",2,null],[12,"visible","","Whether the window should be immediately visible upon creation.",2,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",2,null],[12,"decorations","","Whether the window should have borders and bars.",2,null],[12,"multitouch","","[iOS only] Enable multitouch, see UIView#multipleTouchEnabled",2,null],[12,"resize_callback","","A function called upon resizing, necessary to receive resize events on Mac and possibly other systems.",2,null],[4,"Event","","",null,null],[13,"Resized","","The size of the window has changed.",3,null],[13,"Moved","","The position of the window has changed.",3,null],[13,"Closed","","The window has been closed.",3,null],[13,"DroppedFile","","A file has been dropped into the window.",3,null],[13,"ReceivedCharacter","","The window received a unicode character.",3,null],[13,"Focused","","The window gained or lost focus.",3,null],[13,"KeyboardInput","","An event from the keyboard has been received.",3,null],[13,"MouseMoved","","The cursor has moved on the window.",3,null],[13,"MouseEntered","","The cursor has entered the window.",3,null],[13,"MouseLeft","","The cursor has left the window.",3,null],[13,"MouseWheel","","A mouse wheel movement or touchpad scroll occurred.",3,null],[13,"MouseInput","","An event from the mouse has been received.",3,null],[13,"TouchpadPressure","","Touchpad pressure event.",3,null],[13,"Awakened","","The event loop was woken up by another thread.",3,null],[13,"Refresh","","The window needs to be redrawn.",3,null],[13,"Suspended","","App has been suspended or resumed.",3,null],[13,"Touch","","Touch event has been received",3,null],[4,"TouchPhase","","",null,null],[13,"Started","","",4,null],[13,"Moved","","",4,null],[13,"Ended","","",4,null],[13,"Cancelled","","",4,null],[4,"ElementState","","",null,null],[13,"Pressed","","",5,null],[13,"Released","","",5,null],[4,"MouseButton","","",null,null],[13,"Left","","",6,null],[13,"Right","","",6,null],[13,"Middle","","",6,null],[13,"Other","","",6,null],[4,"MouseScrollDelta","","",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",7,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",7,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",8,null],[13,"Key2","","The '2' key over the letters.",8,null],[13,"Key3","","The '3' key over the letters.",8,null],[13,"Key4","","The '4' key over the letters.",8,null],[13,"Key5","","The '5' key over the letters.",8,null],[13,"Key6","","The '6' key over the letters.",8,null],[13,"Key7","","The '7' key over the letters.",8,null],[13,"Key8","","The '8' key over the letters.",8,null],[13,"Key9","","The '9' key over the letters.",8,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",8,null],[13,"A","","",8,null],[13,"B","","",8,null],[13,"C","","",8,null],[13,"D","","",8,null],[13,"E","","",8,null],[13,"F","","",8,null],[13,"G","","",8,null],[13,"H","","",8,null],[13,"I","","",8,null],[13,"J","","",8,null],[13,"K","","",8,null],[13,"L","","",8,null],[13,"M","","",8,null],[13,"N","","",8,null],[13,"O","","",8,null],[13,"P","","",8,null],[13,"Q","","",8,null],[13,"R","","",8,null],[13,"S","","",8,null],[13,"T","","",8,null],[13,"U","","",8,null],[13,"V","","",8,null],[13,"W","","",8,null],[13,"X","","",8,null],[13,"Y","","",8,null],[13,"Z","","",8,null],[13,"Escape","","The Escape key, next to F1.",8,null],[13,"F1","","",8,null],[13,"F2","","",8,null],[13,"F3","","",8,null],[13,"F4","","",8,null],[13,"F5","","",8,null],[13,"F6","","",8,null],[13,"F7","","",8,null],[13,"F8","","",8,null],[13,"F9","","",8,null],[13,"F10","","",8,null],[13,"F11","","",8,null],[13,"F12","","",8,null],[13,"F13","","",8,null],[13,"F14","","",8,null],[13,"F15","","",8,null],[13,"Snapshot","","Print Screen/SysRq.",8,null],[13,"Scroll","","Scroll Lock.",8,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",8,null],[13,"Insert","","`Insert`, next to Backspace.",8,null],[13,"Home","","",8,null],[13,"Delete","","",8,null],[13,"End","","",8,null],[13,"PageDown","","",8,null],[13,"PageUp","","",8,null],[13,"Left","","",8,null],[13,"Up","","",8,null],[13,"Right","","",8,null],[13,"Down","","",8,null],[13,"Back","","The Backspace key, right over Enter.",8,null],[13,"Return","","The Enter key.",8,null],[13,"Space","","The space bar.",8,null],[13,"Compose","","The \"Compose\" key on Linux.",8,null],[13,"Numlock","","",8,null],[13,"Numpad0","","",8,null],[13,"Numpad1","","",8,null],[13,"Numpad2","","",8,null],[13,"Numpad3","","",8,null],[13,"Numpad4","","",8,null],[13,"Numpad5","","",8,null],[13,"Numpad6","","",8,null],[13,"Numpad7","","",8,null],[13,"Numpad8","","",8,null],[13,"Numpad9","","",8,null],[13,"AbntC1","","",8,null],[13,"AbntC2","","",8,null],[13,"Add","","",8,null],[13,"Apostrophe","","",8,null],[13,"Apps","","",8,null],[13,"At","","",8,null],[13,"Ax","","",8,null],[13,"Backslash","","",8,null],[13,"Calculator","","",8,null],[13,"Capital","","",8,null],[13,"Colon","","",8,null],[13,"Comma","","",8,null],[13,"Convert","","",8,null],[13,"Decimal","","",8,null],[13,"Divide","","",8,null],[13,"Equals","","",8,null],[13,"Grave","","",8,null],[13,"Kana","","",8,null],[13,"Kanji","","",8,null],[13,"LAlt","","",8,null],[13,"LBracket","","",8,null],[13,"LControl","","",8,null],[13,"LMenu","","",8,null],[13,"LShift","","",8,null],[13,"LWin","","",8,null],[13,"Mail","","",8,null],[13,"MediaSelect","","",8,null],[13,"MediaStop","","",8,null],[13,"Minus","","",8,null],[13,"Multiply","","",8,null],[13,"Mute","","",8,null],[13,"MyComputer","","",8,null],[13,"NavigateForward","","",8,null],[13,"NavigateBackward","","",8,null],[13,"NextTrack","","",8,null],[13,"NoConvert","","",8,null],[13,"NumpadComma","","",8,null],[13,"NumpadEnter","","",8,null],[13,"NumpadEquals","","",8,null],[13,"OEM102","","",8,null],[13,"Period","","",8,null],[13,"PlayPause","","",8,null],[13,"Power","","",8,null],[13,"PrevTrack","","",8,null],[13,"RAlt","","",8,null],[13,"RBracket","","",8,null],[13,"RControl","","",8,null],[13,"RMenu","","",8,null],[13,"RShift","","",8,null],[13,"RWin","","",8,null],[13,"Semicolon","","",8,null],[13,"Slash","","",8,null],[13,"Sleep","","",8,null],[13,"Stop","","",8,null],[13,"Subtract","","",8,null],[13,"Sysrq","","",8,null],[13,"Tab","","",8,null],[13,"Underline","","",8,null],[13,"Unlabeled","","",8,null],[13,"VolumeDown","","",8,null],[13,"VolumeUp","","",8,null],[13,"Wake","","",8,null],[13,"WebBack","","",8,null],[13,"WebFavorites","","",8,null],[13,"WebForward","","",8,null],[13,"WebHome","","",8,null],[13,"WebRefresh","","",8,null],[13,"WebSearch","","",8,null],[13,"WebStop","","",8,null],[13,"Yen","","",8,null],[4,"NativeMonitorId","","Native platform identifier for a monitor. Different platforms use fundamentally different types to represent a monitor ID.",null,null],[13,"Numeric","","Cocoa and X11 use a numeric identifier to represent a monitor.",9,null],[13,"Name","","Win32 uses a Unicode string to represent a monitor.",9,null],[13,"Unavailable","","Other platforms (Android) don't support monitor identification.",9,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",10,null],[13,"NotSupported","","TODO: remove this error",10,null],[4,"MouseCursor","","",null,null],[13,"Default","","The platform-dependent default cursor.",11,null],[13,"Crosshair","","A simple crosshair.",11,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",11,null],[13,"Arrow","","Self explanatory.",11,null],[13,"Move","","Indicates something is to be moved.",11,null],[13,"Text","","Indicates text that may be selected or edited.",11,null],[13,"Wait","","Program busy indicator.",11,null],[13,"Help","","Help indicator (often rendered as a \"?\")",11,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",11,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",11,null],[13,"ContextMenu","","",11,null],[13,"NoneCursor","","",11,null],[13,"Cell","","",11,null],[13,"VerticalText","","",11,null],[13,"Alias","","",11,null],[13,"Copy","","",11,null],[13,"NoDrop","","",11,null],[13,"Grab","","",11,null],[13,"Grabbing","","",11,null],[13,"AllScroll","","",11,null],[13,"ZoomIn","","",11,null],[13,"ZoomOut","","",11,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",11,null],[13,"NResize","","",11,null],[13,"NeResize","","",11,null],[13,"NwResize","","",11,null],[13,"SResize","","",11,null],[13,"SeResize","","",11,null],[13,"SwResize","","",11,null],[13,"WResize","","",11,null],[13,"EwResize","","",11,null],[13,"NsResize","","",11,null],[13,"NeswResize","","",11,null],[13,"NwseResize","","",11,null],[13,"ColResize","","",11,null],[13,"RowResize","","",11,null],[4,"CursorState","","Describes how glutin handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",12,null],[13,"Hide","","The cursor will be invisible when over the window.",12,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",12,null],[5,"get_available_monitors","","Returns the list of all available monitors.",null,{"inputs":[],"output":{"name":"availablemonitorsiter"}}],[5,"get_primary_monitor","","Returns the primary monitor of the system.",null,{"inputs":[],"output":{"name":"monitorid"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",1,{"inputs":[],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",1,{"inputs":[{"name":"self"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch",1,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"with_window_resize_callback","","Provides a resize callback that is called by Mac (and potentially other operating systems) during resize operations. This can be used to repaint during window resizing.",1,null],[11,"build","","Builds the window.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"window"}}],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",13,{"inputs":[],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"show","","Shows the window if it was hidden.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"hide","","Hides the window if it was visible.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",13,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_inner_size","","Returns the size in points of the client area of the window.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue. Returns `None` if there is no event in the queue.",13,{"inputs":[{"name":"self"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is available.",13,{"inputs":[{"name":"self"}],"output":{"name":"waiteventsiterator"}}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",13,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",13,null],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely passed to different threads.",13,{"inputs":[{"name":"self"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other operating systems) during resize operations. This can be used to repaint during window resizing.",13,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",13,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":null}],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",13,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",13,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",13,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is typically called when another thread wants to wake up the blocked rendering thread to cause a refresh.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"get_name","","Returns a human-readable name of the monitor.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",18,{"inputs":[{"name":"self"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",18,null],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[0,"unix","winit::os","",null,null],[5,"get_x11_xconnection","winit::os::unix","",null,{"inputs":[],"output":{"name":"option"}}],[0,"x11","","",null,null],[3,"MonitorId","winit::os::unix::x11","",null,null],[12,"0","","",19,null],[12,"1","","",19,null],[3,"Window","","",null,null],[12,"x","","",20,null],[3,"XWindow","","",null,null],[3,"PollEventsIterator","","",null,null],[3,"WaitEventsIterator","","",null,null],[3,"WindowProxy","","",null,null],[3,"XConnection","","A connection to an X server.",null,null],[12,"xlib","","",21,null],[12,"xf86vmode","","",21,null],[12,"xcursor","","",21,null],[12,"xinput2","","",21,null],[12,"xlib_xcb","","",21,null],[12,"display","","",21,null],[12,"latest_error","","",21,null],[3,"XError","","Error triggered by xlib.",null,null],[12,"description","","",22,null],[12,"error_code","","",22,null],[12,"request_code","","",22,null],[12,"minor_code","","",22,null],[4,"XNotSupported","","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",23,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",23,null],[5,"get_available_monitors","","",null,{"inputs":[{"name":"arc"}],"output":{"name":"vecdeque"}}],[5,"get_primary_monitor","","",null,{"inputs":[{"name":"arc"}],"output":{"name":"monitorid"}}],[0,"ffi","","",null,null],[3,"OpenError","winit::os::unix::x11::ffi","",null,null],[8,"WindowExt","winit::os::unix","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns a pointer to the `Window` object of xlib that is used by this window.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_screen_id","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_xconnection","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_client_surface","","Returns a reference to the `WlSurface` object of wayland that is used by this window.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_client_display","","Returns a pointer to the `WlDisplay` object of wayland that is used by this window.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",25,null],[10,"with_x11_screen","","",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"get_xlib_window","winit","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_display","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_screen_id","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_xconnection","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xcb_connection","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_surface","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_display","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_client_surface","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_client_display","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_x11_visual","","",1,null],[11,"with_x11_screen","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"nativemonitorid"}}],[6,"ScanCode","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"cursorstate"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"windowattributes"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"windowattributes"}}],[11,"detail","winit::os::unix::x11::ffi","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"kind","","",26,{"inputs":[{"name":"self"}],"output":{"name":"openerrorkind"}}],[11,"new","","",26,{"inputs":[{"name":"openerrorkind"},{"name":"string"}],"output":{"name":"openerror"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"openerror"}}],[11,"description","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","winit::os::unix::x11","",19,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"get_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_native_identifier","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","",19,null],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",20,{"inputs":[{"name":"arc"},{"name":"windowattributes"},{"name":"platformspecificwindowbuilderattributes"}],"output":{"name":"result"}}],[11,"set_title","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"show","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"hide","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"get_position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_position","","",20,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_inner_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_outer_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_inner_size","","",20,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"create_window_proxy","","",20,{"inputs":[{"name":"self"}],"output":{"name":"windowproxy"}}],[11,"poll_events","","",20,{"inputs":[{"name":"self"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","",20,{"inputs":[{"name":"self"}],"output":{"name":"waiteventsiterator"}}],[11,"get_xlib_display","","",20,null],[11,"get_xlib_screen_id","","",20,null],[11,"get_xlib_xconnection","","",20,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"platform_display","","",20,null],[11,"get_xlib_window","","",20,null],[11,"platform_window","","",20,null],[11,"get_xcb_connection","","",20,null],[11,"set_window_resize_callback","","",20,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_cursor","","",20,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":null}],[11,"set_cursor_state","","",20,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"hidpi_factor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","",20,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"check_errors","","Checks whether an error has been triggered by the previous function calls.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ignore_error","","Ignores any previous error.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"xerror"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"xnotsupported"}}],[11,"from","","",23,{"inputs":[{"name":"openerror"}],"output":{"name":"xnotsupported"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Touch"],[3,"WindowBuilder"],[3,"WindowAttributes"],[4,"Event"],[4,"TouchPhase"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"NativeMonitorId"],[4,"CreationError"],[4,"MouseCursor"],[4,"CursorState"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[3,"MonitorId"],[3,"Window"],[3,"XConnection"],[3,"XError"],[4,"XNotSupported"],[8,"WindowExt"],[8,"WindowBuilderExt"],[3,"OpenError"],[3,"XWindow"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"]]};
searchIndex["x11_dl"] = {"doc":"","items":[[0,"error","x11_dl","",null,null],[3,"OpenError","x11_dl::error","",null,null],[4,"OpenErrorKind","","",null,null],[13,"Library","","",0,null],[13,"Symbol","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"openerror"}}],[11,"detail","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"kind","","",1,{"inputs":[{"name":"self"}],"output":{"name":"openerrorkind"}}],[11,"new","","",1,{"inputs":[{"name":"openerrorkind"},{"name":"string"}],"output":{"name":"openerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"openerrorkind"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"openerrorkind"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"xlib","x11_dl","",null,null],[3,"Xlib","x11_dl::xlib","",null,null],[12,"XActivateScreenSaver","","",2,null],[12,"XAddConnectionWatch","","",2,null],[12,"XAddExtension","","",2,null],[12,"XAddHost","","",2,null],[12,"XAddHosts","","",2,null],[12,"XAddPixel","","",2,null],[12,"XAddToExtensionList","","",2,null],[12,"XAddToSaveSet","","",2,null],[12,"XAllocClassHint","","",2,null],[12,"XAllocColor","","",2,null],[12,"XAllocColorCells","","",2,null],[12,"XAllocColorPlanes","","",2,null],[12,"XAllocIconSize","","",2,null],[12,"XAllocNamedColor","","",2,null],[12,"XAllocSizeHints","","",2,null],[12,"XAllocStandardColormap","","",2,null],[12,"XAllocWMHints","","",2,null],[12,"XAllowEvents","","",2,null],[12,"XAllPlanes","","",2,null],[12,"XAutoRepeatOff","","",2,null],[12,"XAutoRepeatOn","","",2,null],[12,"XBaseFontNameListOfFontSet","","",2,null],[12,"XBell","","",2,null],[12,"XBitmapBitOrder","","",2,null],[12,"XBitmapPad","","",2,null],[12,"XBitmapUnit","","",2,null],[12,"XBlackPixel","","",2,null],[12,"XBlackPixelOfScreen","","",2,null],[12,"XCellsOfScreen","","",2,null],[12,"XChangeActivePointerGrab","","",2,null],[12,"XChangeGC","","",2,null],[12,"XChangeKeyboardControl","","",2,null],[12,"XChangeKeyboardMapping","","",2,null],[12,"XChangePointerControl","","",2,null],[12,"XChangeProperty","","",2,null],[12,"XChangeSaveSet","","",2,null],[12,"XChangeWindowAttributes","","",2,null],[12,"XCheckIfEvent","","",2,null],[12,"XCheckMaskEvent","","",2,null],[12,"XCheckTypedEvent","","",2,null],[12,"XCheckTypedWindowEvent","","",2,null],[12,"XCheckWindowEvent","","",2,null],[12,"XCirculateSubwindows","","",2,null],[12,"XCirculateSubwindowsDown","","",2,null],[12,"XCirculateSubwindowsUp","","",2,null],[12,"XClearArea","","",2,null],[12,"XClearWindow","","",2,null],[12,"XClipBox","","",2,null],[12,"XCloseDisplay","","",2,null],[12,"XCloseIM","","",2,null],[12,"XCloseOM","","",2,null],[12,"XcmsAddColorSpace","","",2,null],[12,"XcmsAddFunctionSet","","",2,null],[12,"XcmsAllocColor","","",2,null],[12,"XcmsAllocNamedColor","","",2,null],[12,"XcmsCCCOfColormap","","",2,null],[12,"XcmsCIELabClipab","","",2,null],[12,"XcmsCIELabClipL","","",2,null],[12,"XcmsCIELabClipLab","","",2,null],[12,"XcmsCIELabQueryMaxC","","",2,null],[12,"XcmsCIELabQueryMaxL","","",2,null],[12,"XcmsCIELabQueryMaxLC","","",2,null],[12,"XcmsCIELabQueryMinL","","",2,null],[12,"XcmsCIELabToCIEXYZ","","",2,null],[12,"XcmsCIELabWhiteShiftColors","","",2,null],[12,"XcmsCIELuvClipL","","",2,null],[12,"XcmsCIELuvClipLuv","","",2,null],[12,"XcmsCIELuvClipuv","","",2,null],[12,"XcmsCIELuvQueryMaxC","","",2,null],[12,"XcmsCIELuvQueryMaxL","","",2,null],[12,"XcmsCIELuvQueryMaxLC","","",2,null],[12,"XcmsCIELuvQueryMinL","","",2,null],[12,"XcmsCIELuvToCIEuvY","","",2,null],[12,"XcmsCIELuvWhiteShiftColors","","",2,null],[12,"XcmsCIEuvYToCIELuv","","",2,null],[12,"XcmsCIEuvYToCIEXYZ","","",2,null],[12,"XcmsCIEuvYToTekHVC","","",2,null],[12,"XcmsCIExyYToCIEXYZ","","",2,null],[12,"XcmsCIEXYZToCIELab","","",2,null],[12,"XcmsCIEXYZToCIEuvY","","",2,null],[12,"XcmsCIEXYZToCIExyY","","",2,null],[12,"XcmsCIEXYZToRGBi","","",2,null],[12,"XcmsClientWhitePointOfCCC","","",2,null],[12,"XcmsConvertColors","","",2,null],[12,"XcmsCreateCCC","","",2,null],[12,"XcmsDefaultCCC","","",2,null],[12,"XcmsDisplayOfCCC","","",2,null],[12,"XcmsFormatOfPrefix","","",2,null],[12,"XcmsFreeCCC","","",2,null],[12,"XcmsLookupColor","","",2,null],[12,"XcmsPrefixOfFormat","","",2,null],[12,"XcmsQueryBlack","","",2,null],[12,"XcmsQueryBlue","","",2,null],[12,"XcmsQueryColor","","",2,null],[12,"XcmsQueryColors","","",2,null],[12,"XcmsQueryGreen","","",2,null],[12,"XcmsQueryRed","","",2,null],[12,"XcmsQueryWhite","","",2,null],[12,"XcmsRGBiToCIEXYZ","","",2,null],[12,"XcmsRGBiToRGB","","",2,null],[12,"XcmsRGBToRGBi","","",2,null],[12,"XcmsScreenNumberOfCCC","","",2,null],[12,"XcmsScreenWhitePointOfCCC","","",2,null],[12,"XcmsSetCCCOfColormap","","",2,null],[12,"XcmsSetCompressionProc","","",2,null],[12,"XcmsSetWhiteAdjustProc","","",2,null],[12,"XcmsSetWhitePoint","","",2,null],[12,"XcmsStoreColor","","",2,null],[12,"XcmsStoreColors","","",2,null],[12,"XcmsTekHVCClipC","","",2,null],[12,"XcmsTekHVCClipV","","",2,null],[12,"XcmsTekHVCClipVC","","",2,null],[12,"XcmsTekHVCQueryMaxC","","",2,null],[12,"XcmsTekHVCQueryMaxV","","",2,null],[12,"XcmsTekHVCQueryMaxVC","","",2,null],[12,"XcmsTekHVCQueryMaxVSamples","","",2,null],[12,"XcmsTekHVCQueryMinV","","",2,null],[12,"XcmsTekHVCToCIEuvY","","",2,null],[12,"XcmsTekHVCWhiteShiftColors","","",2,null],[12,"XcmsVisualOfCCC","","",2,null],[12,"XConfigureWindow","","",2,null],[12,"XConnectionNumber","","",2,null],[12,"XContextDependentDrawing","","",2,null],[12,"XContextualDrawing","","",2,null],[12,"XConvertCase","","",2,null],[12,"XConvertSelection","","",2,null],[12,"XCopyArea","","",2,null],[12,"XCopyColormapAndFree","","",2,null],[12,"XCopyGC","","",2,null],[12,"XCopyPlane","","",2,null],[12,"XCreateBitmapFromData","","",2,null],[12,"XCreateColormap","","",2,null],[12,"XCreateFontCursor","","",2,null],[12,"XCreateFontSet","","",2,null],[12,"XCreateGC","","",2,null],[12,"XCreateGlyphCursor","","",2,null],[12,"XCreateImage","","",2,null],[12,"XCreatePixmap","","",2,null],[12,"XCreatePixmapCursor","","",2,null],[12,"XCreatePixmapFromBitmapData","","",2,null],[12,"XCreateRegion","","",2,null],[12,"XCreateSimpleWindow","","",2,null],[12,"XCreateWindow","","",2,null],[12,"XDefaultColormap","","",2,null],[12,"XDefaultColormapOfScreen","","",2,null],[12,"XDefaultDepth","","",2,null],[12,"XDefaultDepthOfScreen","","",2,null],[12,"XDefaultGC","","",2,null],[12,"XDefaultGCOfScreen","","",2,null],[12,"XDefaultRootWindow","","",2,null],[12,"XDefaultScreen","","",2,null],[12,"XDefaultScreenOfDisplay","","",2,null],[12,"XDefaultString","","",2,null],[12,"XDefaultVisual","","",2,null],[12,"XDefaultVisualOfScreen","","",2,null],[12,"XDefineCursor","","",2,null],[12,"XDeleteContext","","",2,null],[12,"XDeleteModifiermapEntry","","",2,null],[12,"XDeleteProperty","","",2,null],[12,"XDestroyIC","","",2,null],[12,"XDestroyImage","","",2,null],[12,"XDestroyOC","","",2,null],[12,"XDestroyRegion","","",2,null],[12,"XDestroySubwindows","","",2,null],[12,"XDestroyWindow","","",2,null],[12,"XDirectionalDependentDrawing","","",2,null],[12,"XDisableAccessControl","","",2,null],[12,"XDisplayCells","","",2,null],[12,"XDisplayHeight","","",2,null],[12,"XDisplayHeightMM","","",2,null],[12,"XDisplayKeycodes","","",2,null],[12,"XDisplayMotionBufferSize","","",2,null],[12,"XDisplayName","","",2,null],[12,"XDisplayOfIM","","",2,null],[12,"XDisplayOfOM","","",2,null],[12,"XDisplayOfScreen","","",2,null],[12,"XDisplayPlanes","","",2,null],[12,"XDisplayString","","",2,null],[12,"XDisplayWidth","","",2,null],[12,"XDisplayWidthMM","","",2,null],[12,"XDoesBackingStore","","",2,null],[12,"XDoesSaveUnders","","",2,null],[12,"XDrawArc","","",2,null],[12,"XDrawArcs","","",2,null],[12,"XDrawImageString","","",2,null],[12,"XDrawImageString16","","",2,null],[12,"XDrawLine","","",2,null],[12,"XDrawLines","","",2,null],[12,"XDrawPoint","","",2,null],[12,"XDrawPoints","","",2,null],[12,"XDrawRectangle","","",2,null],[12,"XDrawRectangles","","",2,null],[12,"XDrawSegments","","",2,null],[12,"XDrawString","","",2,null],[12,"XDrawString16","","",2,null],[12,"XDrawText","","",2,null],[12,"XDrawText16","","",2,null],[12,"XEHeadOfExtensionList","","",2,null],[12,"XEmptyRegion","","",2,null],[12,"XEnableAccessControl","","",2,null],[12,"XEqualRegion","","",2,null],[12,"XESetBeforeFlush","","",2,null],[12,"XESetCloseDisplay","","",2,null],[12,"XESetCopyEventCookie","","",2,null],[12,"XESetCopyGC","","",2,null],[12,"XESetCreateFont","","",2,null],[12,"XESetCreateGC","","",2,null],[12,"XESetError","","",2,null],[12,"XESetErrorString","","",2,null],[12,"XESetEventToWire","","",2,null],[12,"XESetFlushGC","","",2,null],[12,"XESetFreeFont","","",2,null],[12,"XESetFreeGC","","",2,null],[12,"XESetPrintErrorValues","","",2,null],[12,"XESetWireToError","","",2,null],[12,"XESetWireToEvent","","",2,null],[12,"XESetWireToEventCookie","","",2,null],[12,"XEventMaskOfScreen","","",2,null],[12,"XEventsQueued","","",2,null],[12,"XExtendedMaxRequestSize","","",2,null],[12,"XExtentsOfFontSet","","",2,null],[12,"XFetchBuffer","","",2,null],[12,"XFetchBytes","","",2,null],[12,"XFetchName","","",2,null],[12,"XFillArc","","",2,null],[12,"XFillArcs","","",2,null],[12,"XFillPolygon","","",2,null],[12,"XFillRectangle","","",2,null],[12,"XFillRectangles","","",2,null],[12,"XFilterEvent","","",2,null],[12,"XFindContext","","",2,null],[12,"XFindOnExtensionList","","",2,null],[12,"XFlush","","",2,null],[12,"XFlushGC","","",2,null],[12,"XFontsOfFontSet","","",2,null],[12,"XForceScreenSaver","","",2,null],[12,"XFree","","",2,null],[12,"XFreeColormap","","",2,null],[12,"XFreeColors","","",2,null],[12,"XFreeCursor","","",2,null],[12,"XFreeEventData","","",2,null],[12,"XFreeExtensionList","","",2,null],[12,"XFreeFont","","",2,null],[12,"XFreeFontInfo","","",2,null],[12,"XFreeFontNames","","",2,null],[12,"XFreeFontPath","","",2,null],[12,"XFreeFontSet","","",2,null],[12,"XFreeGC","","",2,null],[12,"XFreeModifiermap","","",2,null],[12,"XFreePixmap","","",2,null],[12,"XFreeStringList","","",2,null],[12,"XGContextFromGC","","",2,null],[12,"XGeometry","","",2,null],[12,"XGetAtomName","","",2,null],[12,"XGetAtomNames","","",2,null],[12,"XGetClassHint","","",2,null],[12,"XGetCommand","","",2,null],[12,"XGetDefault","","",2,null],[12,"XGetErrorDatabaseText","","",2,null],[12,"XGetErrorText","","",2,null],[12,"XGetEventData","","",2,null],[12,"XGetFontPath","","",2,null],[12,"XGetFontProperty","","",2,null],[12,"XGetGCValues","","",2,null],[12,"XGetGeometry","","",2,null],[12,"XGetIconName","","",2,null],[12,"XGetIconSizes","","",2,null],[12,"XGetImage","","",2,null],[12,"XGetInputFocus","","",2,null],[12,"XGetKeyboardControl","","",2,null],[12,"XGetKeyboardMapping","","",2,null],[12,"XGetModifierMapping","","",2,null],[12,"XGetMotionEvents","","",2,null],[12,"XGetNormalHints","","",2,null],[12,"XGetPixel","","",2,null],[12,"XGetPointerControl","","",2,null],[12,"XGetPointerMapping","","",2,null],[12,"XGetRGBColormaps","","",2,null],[12,"XGetScreenSaver","","",2,null],[12,"XGetSelectionOwner","","",2,null],[12,"XGetSizeHints","","",2,null],[12,"XGetStandardColormap","","",2,null],[12,"XGetSubImage","","",2,null],[12,"XGetTextProperty","","",2,null],[12,"XGetTransientForHint","","",2,null],[12,"XGetVisualInfo","","",2,null],[12,"XGetWindowAttributes","","",2,null],[12,"XGetWindowProperty","","",2,null],[12,"XGetWMClientMachine","","",2,null],[12,"XGetWMColormapWindows","","",2,null],[12,"XGetWMHints","","",2,null],[12,"XGetWMIconName","","",2,null],[12,"XGetWMName","","",2,null],[12,"XGetWMNormalHints","","",2,null],[12,"XGetWMProtocols","","",2,null],[12,"XGetWMSizeHints","","",2,null],[12,"XGetZoomHints","","",2,null],[12,"XGrabButton","","",2,null],[12,"XGrabKey","","",2,null],[12,"XGrabKeyboard","","",2,null],[12,"XGrabPointer","","",2,null],[12,"XGrabServer","","",2,null],[12,"XHeightMMOfScreen","","",2,null],[12,"XHeightOfScreen","","",2,null],[12,"XIconifyWindow","","",2,null],[12,"XIfEvent","","",2,null],[12,"XImageByteOrder","","",2,null],[12,"XIMOfIC","","",2,null],[12,"XInitExtension","","",2,null],[12,"XInitImage","","",2,null],[12,"XInitThreads","","",2,null],[12,"XInsertModifiermapEntry","","",2,null],[12,"XInstallColormap","","",2,null],[12,"XInternalConnectionNumbers","","",2,null],[12,"XInternAtom","","",2,null],[12,"XInternAtoms","","",2,null],[12,"XIntersectRegion","","",2,null],[12,"XkbAddDeviceLedInfo","","",2,null],[12,"XkbAddGeomColor","","",2,null],[12,"XkbAddGeomDoodad","","",2,null],[12,"XkbAddGeomKey","","",2,null],[12,"XkbAddGeomKeyAlias","","",2,null],[12,"XkbAddGeomOutline","","",2,null],[12,"XkbAddGeomOverlay","","",2,null],[12,"XkbAddGeomOverlayKey","","",2,null],[12,"XkbAddGeomOverlayRow","","",2,null],[12,"XkbAddGeomProperty","","",2,null],[12,"XkbAddGeomRow","","",2,null],[12,"XkbAddGeomSection","","",2,null],[12,"XkbAddGeomShape","","",2,null],[12,"XkbAddKeyType","","",2,null],[12,"XkbAllocClientMap","","",2,null],[12,"XkbAllocCompatMap","","",2,null],[12,"XkbAllocControls","","",2,null],[12,"XkbAllocDeviceInfo","","",2,null],[12,"XkbAllocGeomColors","","",2,null],[12,"XkbAllocGeomDoodads","","",2,null],[12,"XkbAllocGeometry","","",2,null],[12,"XkbAllocGeomKeyAliases","","",2,null],[12,"XkbAllocGeomKeys","","",2,null],[12,"XkbAllocGeomOutlines","","",2,null],[12,"XkbAllocGeomOverlayKeys","","",2,null],[12,"XkbAllocGeomOverlayRows","","",2,null],[12,"XkbAllocGeomOverlays","","",2,null],[12,"XkbAllocGeomPoints","","",2,null],[12,"XkbAllocGeomProps","","",2,null],[12,"XkbAllocGeomRows","","",2,null],[12,"XkbAllocGeomSectionDoodads","","",2,null],[12,"XkbAllocGeomSections","","",2,null],[12,"XkbAllocGeomShapes","","",2,null],[12,"XkbAllocIndicatorMaps","","",2,null],[12,"XkbAllocKeyboard","","",2,null],[12,"XkbAllocNames","","",2,null],[12,"XkbAllocServerMap","","",2,null],[12,"XkbApplyCompatMapToKey","","",2,null],[12,"XkbApplyVirtualModChanges","","",2,null],[12,"XkbBell","","",2,null],[12,"XkbBellEvent","","",2,null],[12,"XkbChangeDeviceInfo","","",2,null],[12,"XkbChangeEnabledControls","","",2,null],[12,"XkbChangeKeycodeRange","","",2,null],[12,"XkbChangeMap","","",2,null],[12,"XkbChangeNames","","",2,null],[12,"XkbChangeTypesOfKey","","",2,null],[12,"XkbComputeEffectiveMap","","",2,null],[12,"XkbComputeRowBounds","","",2,null],[12,"XkbComputeSectionBounds","","",2,null],[12,"XkbComputeShapeBounds","","",2,null],[12,"XkbComputeShapeTop","","",2,null],[12,"XkbCopyKeyType","","",2,null],[12,"XkbCopyKeyTypes","","",2,null],[12,"XkbDeviceBell","","",2,null],[12,"XkbDeviceBellEvent","","",2,null],[12,"XkbFindOverlayForKey","","",2,null],[12,"XkbForceBell","","",2,null],[12,"XkbForceDeviceBell","","",2,null],[12,"XkbFreeClientMap","","",2,null],[12,"XkbFreeCompatMap","","",2,null],[12,"XkbFreeComponentList","","",2,null],[12,"XkbFreeControls","","",2,null],[12,"XkbFreeDeviceInfo","","",2,null],[12,"XkbFreeGeomColors","","",2,null],[12,"XkbFreeGeomDoodads","","",2,null],[12,"XkbFreeGeometry","","",2,null],[12,"XkbFreeGeomKeyAliases","","",2,null],[12,"XkbFreeGeomKeys","","",2,null],[12,"XkbFreeGeomOutlines","","",2,null],[12,"XkbFreeGeomOverlayKeys","","",2,null],[12,"XkbFreeGeomOverlayRows","","",2,null],[12,"XkbFreeGeomOverlays","","",2,null],[12,"XkbFreeGeomPoints","","",2,null],[12,"XkbFreeGeomProperties","","",2,null],[12,"XkbFreeGeomRows","","",2,null],[12,"XkbFreeGeomSections","","",2,null],[12,"XkbFreeGeomShapes","","",2,null],[12,"XkbFreeIndicatorMaps","","",2,null],[12,"XkbFreeKeyboard","","",2,null],[12,"XkbFreeNames","","",2,null],[12,"XkbFreeServerMap","","",2,null],[12,"XkbGetAutoRepeatRate","","",2,null],[12,"XkbGetAutoResetControls","","",2,null],[12,"XkbGetCompatMap","","",2,null],[12,"XkbGetControls","","",2,null],[12,"XkbGetDetectableAutoRepeat","","",2,null],[12,"XkbGetDeviceButtonActions","","",2,null],[12,"XkbGetDeviceInfo","","",2,null],[12,"XkbGetDeviceInfoChanges","","",2,null],[12,"XkbGetDeviceLedInfo","","",2,null],[12,"XkbGetGeometry","","",2,null],[12,"XkbGetIndicatorMap","","",2,null],[12,"XkbGetIndicatorState","","",2,null],[12,"XkbGetKeyActions","","",2,null],[12,"XkbGetKeyBehaviors","","",2,null],[12,"XkbGetKeyboard","","",2,null],[12,"XkbGetKeyboardByName","","",2,null],[12,"XkbGetKeyExplicitComponents","","",2,null],[12,"XkbGetKeyModifierMap","","",2,null],[12,"XkbGetKeySyms","","",2,null],[12,"XkbGetKeyTypes","","",2,null],[12,"XkbGetKeyVirtualModMap","","",2,null],[12,"XkbGetMap","","",2,null],[12,"XkbGetMapChanges","","",2,null],[12,"XkbGetNamedDeviceIndicator","","",2,null],[12,"XkbGetNamedGeometry","","",2,null],[12,"XkbGetNamedIndicator","","",2,null],[12,"XkbGetNames","","",2,null],[12,"XkbGetPerClientControls","","",2,null],[12,"XkbGetState","","",2,null],[12,"XkbGetUpdatedMap","","",2,null],[12,"XkbGetVirtualMods","","",2,null],[12,"XkbGetXlibControls","","",2,null],[12,"XkbIgnoreExtension","","",2,null],[12,"XkbInitCanonicalKeyTypes","","",2,null],[12,"XkbKeycodeToKeysym","","",2,null],[12,"XkbKeysymToModifiers","","",2,null],[12,"XkbKeyTypesForCoreSymbols","","",2,null],[12,"XkbLatchGroup","","",2,null],[12,"XkbLatchModifiers","","",2,null],[12,"XkbLibraryVersion","","",2,null],[12,"XkbListComponents","","",2,null],[12,"XkbLockGroup","","",2,null],[12,"XkbLockModifiers","","",2,null],[12,"XkbLookupKeyBinding","","",2,null],[12,"XkbLookupKeySym","","",2,null],[12,"XkbNoteControlsChanges","","",2,null],[12,"XkbNoteDeviceChanges","","",2,null],[12,"XkbNoteMapChanges","","",2,null],[12,"XkbNoteNameChanges","","",2,null],[12,"XkbOpenDisplay","","",2,null],[12,"XkbQueryExtension","","",2,null],[12,"XkbRefreshKeyboardMapping","","",2,null],[12,"XkbResizeDeviceButtonActions","","",2,null],[12,"XkbResizeKeyActions","","",2,null],[12,"XkbResizeKeySyms","","",2,null],[12,"XkbResizeKeyType","","",2,null],[12,"XkbSelectEventDetails","","",2,null],[12,"XkbSelectEvents","","",2,null],[12,"XkbSetAtomFuncs","","",2,null],[12,"XkbSetAutoRepeatRate","","",2,null],[12,"XkbSetAutoResetControls","","",2,null],[12,"XkbSetCompatMap","","",2,null],[12,"XkbSetControls","","",2,null],[12,"XkbSetDebuggingFlags","","",2,null],[12,"XkbSetDetectableAutoRepeat","","",2,null],[12,"XkbSetDeviceButtonActions","","",2,null],[12,"XkbSetDeviceInfo","","",2,null],[12,"XkbSetDeviceLedInfo","","",2,null],[12,"XkbSetGeometry","","",2,null],[12,"XkbSetIgnoreLockMods","","",2,null],[12,"XkbSetIndicatorMap","","",2,null],[12,"XkbSetMap","","",2,null],[12,"XkbSetNamedDeviceIndicator","","",2,null],[12,"XkbSetNamedIndicator","","",2,null],[12,"XkbSetNames","","",2,null],[12,"XkbSetPerClientControls","","",2,null],[12,"XkbSetServerInternalMods","","",2,null],[12,"XkbSetXlibControls","","",2,null],[12,"XkbToControl","","",2,null],[12,"XkbTranslateKeyCode","","",2,null],[12,"XkbTranslateKeySym","","",2,null],[12,"XkbUpdateActionVirtualMods","","",2,null],[12,"XkbUpdateKeyTypeVirtualMods","","",2,null],[12,"XkbUpdateMapFromCore","","",2,null],[12,"XkbUseExtension","","",2,null],[12,"XkbVirtualModsToReal","","",2,null],[12,"XkbXlibControlsImplemented","","",2,null],[12,"XKeycodeToKeysym","","",2,null],[12,"XKeysymToKeycode","","",2,null],[12,"XKeysymToString","","",2,null],[12,"XKillClient","","",2,null],[12,"XLastKnownRequestProcessed","","",2,null],[12,"XListDepths","","",2,null],[12,"XListExtensions","","",2,null],[12,"XListFonts","","",2,null],[12,"XListFontsWithInfo","","",2,null],[12,"XListHosts","","",2,null],[12,"XListInstalledColormaps","","",2,null],[12,"XListPixmapFormats","","",2,null],[12,"XListProperties","","",2,null],[12,"XLoadFont","","",2,null],[12,"XLoadQueryFont","","",2,null],[12,"XLocaleOfFontSet","","",2,null],[12,"XLocaleOfIM","","",2,null],[12,"XLocaleOfOM","","",2,null],[12,"XLockDisplay","","",2,null],[12,"XLookupColor","","",2,null],[12,"XLookupKeysym","","",2,null],[12,"XLookupString","","",2,null],[12,"XLowerWindow","","",2,null],[12,"XMapRaised","","",2,null],[12,"XMapSubwindows","","",2,null],[12,"XMapWindow","","",2,null],[12,"XMaskEvent","","",2,null],[12,"XMatchVisualInfo","","",2,null],[12,"XMaxCmapsOfScreen","","",2,null],[12,"XMaxRequestSize","","",2,null],[12,"XmbDrawImageString","","",2,null],[12,"XmbDrawString","","",2,null],[12,"XmbDrawText","","",2,null],[12,"XmbLookupString","","",2,null],[12,"XmbResetIC","","",2,null],[12,"XmbSetWMProperties","","",2,null],[12,"XmbTextEscapement","","",2,null],[12,"XmbTextExtents","","",2,null],[12,"XmbTextListToTextProperty","","",2,null],[12,"XmbTextPerCharExtents","","",2,null],[12,"XmbTextPropertyToTextList","","",2,null],[12,"XMinCmapsOfScreen","","",2,null],[12,"XMoveResizeWindow","","",2,null],[12,"XMoveWindow","","",2,null],[12,"XNewModifiermap","","",2,null],[12,"XNextEvent","","",2,null],[12,"XNextRequest","","",2,null],[12,"XNoOp","","",2,null],[12,"XOffsetRegion","","",2,null],[12,"XOMOfOC","","",2,null],[12,"XOpenDisplay","","",2,null],[12,"XOpenIM","","",2,null],[12,"XOpenOM","","",2,null],[12,"XParseColor","","",2,null],[12,"XParseGeometry","","",2,null],[12,"XPeekEvent","","",2,null],[12,"XPeekIfEvent","","",2,null],[12,"XPending","","",2,null],[12,"Xpermalloc","","",2,null],[12,"XPlanesOfScreen","","",2,null],[12,"XPointInRegion","","",2,null],[12,"XPolygonRegion","","",2,null],[12,"XProcessInternalConnection","","",2,null],[12,"XProtocolRevision","","",2,null],[12,"XProtocolVersion","","",2,null],[12,"XPutBackEvent","","",2,null],[12,"XPutImage","","",2,null],[12,"XPutPixel","","",2,null],[12,"XQLength","","",2,null],[12,"XQueryBestCursor","","",2,null],[12,"XQueryBestSize","","",2,null],[12,"XQueryBestStipple","","",2,null],[12,"XQueryBestTile","","",2,null],[12,"XQueryColor","","",2,null],[12,"XQueryColors","","",2,null],[12,"XQueryExtension","","",2,null],[12,"XQueryFont","","",2,null],[12,"XQueryKeymap","","",2,null],[12,"XQueryPointer","","",2,null],[12,"XQueryTextExtents","","",2,null],[12,"XQueryTextExtents16","","",2,null],[12,"XQueryTree","","",2,null],[12,"XRaiseWindow","","",2,null],[12,"XReadBitmapFile","","",2,null],[12,"XReadBitmapFileData","","",2,null],[12,"XRebindKeysym","","",2,null],[12,"XRecolorCursor","","",2,null],[12,"XReconfigureWMWindow","","",2,null],[12,"XRectInRegion","","",2,null],[12,"XRefreshKeyboardMapping","","",2,null],[12,"XRegisterIMInstantiateCallback","","",2,null],[12,"XRemoveConnectionWatch","","",2,null],[12,"XRemoveFromSaveSet","","",2,null],[12,"XRemoveHost","","",2,null],[12,"XRemoveHosts","","",2,null],[12,"XReparentWindow","","",2,null],[12,"XResetScreenSaver","","",2,null],[12,"XResizeWindow","","",2,null],[12,"XResourceManagerString","","",2,null],[12,"XRestackWindows","","",2,null],[12,"XrmCombineDatabase","","",2,null],[12,"XrmCombineFileDatabase","","",2,null],[12,"XrmDestroyDatabase","","",2,null],[12,"XrmEnumerateDatabase","","",2,null],[12,"XrmGetDatabase","","",2,null],[12,"XrmGetFileDatabase","","",2,null],[12,"XrmGetResource","","",2,null],[12,"XrmGetStringDatabase","","",2,null],[12,"XrmInitialize","","",2,null],[12,"XrmLocaleOfDatabase","","",2,null],[12,"XrmMergeDatabases","","",2,null],[12,"XrmParseCommand","","",2,null],[12,"XrmPermStringToQuark","","",2,null],[12,"XrmPutFileDatabase","","",2,null],[12,"XrmPutLineResource","","",2,null],[12,"XrmPutResource","","",2,null],[12,"XrmPutStringResource","","",2,null],[12,"XrmQGetResource","","",2,null],[12,"XrmQGetSearchList","","",2,null],[12,"XrmQGetSearchResource","","",2,null],[12,"XrmQPutResource","","",2,null],[12,"XrmQPutStringResource","","",2,null],[12,"XrmQuarkToString","","",2,null],[12,"XrmSetDatabase","","",2,null],[12,"XrmStringToBindingQuarkList","","",2,null],[12,"XrmStringToQuark","","",2,null],[12,"XrmStringToQuarkList","","",2,null],[12,"XrmUniqueQuark","","",2,null],[12,"XRootWindow","","",2,null],[12,"XRootWindowOfScreen","","",2,null],[12,"XRotateBuffers","","",2,null],[12,"XRotateWindowProperties","","",2,null],[12,"XSaveContext","","",2,null],[12,"XScreenCount","","",2,null],[12,"XScreenNumberOfScreen","","",2,null],[12,"XScreenOfDisplay","","",2,null],[12,"XScreenResourceString","","",2,null],[12,"XSelectInput","","",2,null],[12,"XSendEvent","","",2,null],[12,"XServerVendor","","",2,null],[12,"XSetAccessControl","","",2,null],[12,"XSetAfterFunction","","",2,null],[12,"XSetArcMode","","",2,null],[12,"XSetAuthorization","","",2,null],[12,"XSetBackground","","",2,null],[12,"XSetClassHint","","",2,null],[12,"XSetClipMask","","",2,null],[12,"XSetClipOrigin","","",2,null],[12,"XSetClipRectangles","","",2,null],[12,"XSetCloseDownMode","","",2,null],[12,"XSetCommand","","",2,null],[12,"XSetDashes","","",2,null],[12,"XSetErrorHandler","","",2,null],[12,"XSetFillRule","","",2,null],[12,"XSetFillStyle","","",2,null],[12,"XSetFont","","",2,null],[12,"XSetFontPath","","",2,null],[12,"XSetForeground","","",2,null],[12,"XSetFunction","","",2,null],[12,"XSetGraphicsExposures","","",2,null],[12,"XSetICFocus","","",2,null],[12,"XSetIconName","","",2,null],[12,"XSetIconSizes","","",2,null],[12,"XSetInputFocus","","",2,null],[12,"XSetIOErrorHandler","","",2,null],[12,"XSetLineAttributes","","",2,null],[12,"XSetLocaleModifiers","","",2,null],[12,"XSetModifierMapping","","",2,null],[12,"XSetNormalHints","","",2,null],[12,"XSetPlaneMask","","",2,null],[12,"XSetPointerMapping","","",2,null],[12,"XSetRegion","","",2,null],[12,"XSetRGBColormaps","","",2,null],[12,"XSetScreenSaver","","",2,null],[12,"XSetSelectionOwner","","",2,null],[12,"XSetSizeHints","","",2,null],[12,"XSetStandardColormap","","",2,null],[12,"XSetStandardProperties","","",2,null],[12,"XSetState","","",2,null],[12,"XSetStipple","","",2,null],[12,"XSetSubwindowMode","","",2,null],[12,"XSetTextProperty","","",2,null],[12,"XSetTile","","",2,null],[12,"XSetTransientForHint","","",2,null],[12,"XSetTSOrigin","","",2,null],[12,"XSetWindowBackground","","",2,null],[12,"XSetWindowBackgroundPixmap","","",2,null],[12,"XSetWindowBorder","","",2,null],[12,"XSetWindowBorderPixmap","","",2,null],[12,"XSetWindowBorderWidth","","",2,null],[12,"XSetWindowColormap","","",2,null],[12,"XSetWMClientMachine","","",2,null],[12,"XSetWMColormapWindows","","",2,null],[12,"XSetWMHints","","",2,null],[12,"XSetWMIconName","","",2,null],[12,"XSetWMName","","",2,null],[12,"XSetWMNormalHints","","",2,null],[12,"XSetWMProperties","","",2,null],[12,"XSetWMProtocols","","",2,null],[12,"XSetWMSizeHints","","",2,null],[12,"XSetZoomHints","","",2,null],[12,"XShrinkRegion","","",2,null],[12,"XStoreBuffer","","",2,null],[12,"XStoreBytes","","",2,null],[12,"XStoreColor","","",2,null],[12,"XStoreColors","","",2,null],[12,"XStoreName","","",2,null],[12,"XStoreNamedColor","","",2,null],[12,"XStringListToTextProperty","","",2,null],[12,"XStringToKeysym","","",2,null],[12,"XSubImage","","",2,null],[12,"XSubtractRegion","","",2,null],[12,"XSupportsLocale","","",2,null],[12,"XSync","","",2,null],[12,"XSynchronize","","",2,null],[12,"XTextExtents","","",2,null],[12,"XTextExtents16","","",2,null],[12,"XTextPropertyToStringList","","",2,null],[12,"XTextWidth","","",2,null],[12,"XTextWidth16","","",2,null],[12,"XTranslateCoordinates","","",2,null],[12,"XUndefineCursor","","",2,null],[12,"XUngrabButton","","",2,null],[12,"XUngrabKey","","",2,null],[12,"XUngrabKeyboard","","",2,null],[12,"XUngrabPointer","","",2,null],[12,"XUngrabServer","","",2,null],[12,"XUninstallColormap","","",2,null],[12,"XUnionRectWithRegion","","",2,null],[12,"XUnionRegion","","",2,null],[12,"XUnloadFont","","",2,null],[12,"XUnlockDisplay","","",2,null],[12,"XUnmapSubwindows","","",2,null],[12,"XUnmapWindow","","",2,null],[12,"XUnregisterIMInstantiateCallback","","",2,null],[12,"XUnsetICFocus","","",2,null],[12,"Xutf8DrawImageString","","",2,null],[12,"Xutf8DrawString","","",2,null],[12,"Xutf8DrawText","","",2,null],[12,"Xutf8LookupString","","",2,null],[12,"Xutf8ResetIC","","",2,null],[12,"Xutf8SetWMProperties","","",2,null],[12,"Xutf8TextEscapement","","",2,null],[12,"Xutf8TextExtents","","",2,null],[12,"Xutf8TextListToTextProperty","","",2,null],[12,"Xutf8TextPerCharExtents","","",2,null],[12,"Xutf8TextPropertyToTextList","","",2,null],[12,"XVendorRelease","","",2,null],[12,"XVisualIDFromVisual","","",2,null],[12,"XWarpPointer","","",2,null],[12,"XwcDrawImageString","","",2,null],[12,"XwcDrawString","","",2,null],[12,"XwcDrawText","","",2,null],[12,"XwcFreeStringList","","",2,null],[12,"XwcLookupString","","",2,null],[12,"XwcResetIC","","",2,null],[12,"XwcTextEscapement","","",2,null],[12,"XwcTextExtents","","",2,null],[12,"XwcTextListToTextProperty","","",2,null],[12,"XwcTextPerCharExtents","","",2,null],[12,"XwcTextPropertyToTextList","","",2,null],[12,"XWhitePixel","","",2,null],[12,"XWhitePixelOfScreen","","",2,null],[12,"XWidthMMOfScreen","","",2,null],[12,"XWidthOfScreen","","",2,null],[12,"XWindowEvent","","",2,null],[12,"XWithdrawWindow","","",2,null],[12,"XWMGeometry","","",2,null],[12,"XWriteBitmapFile","","",2,null],[12,"XXorRegion","","",2,null],[12,"XCreateIC","","",2,null],[12,"XCreateOC","","",2,null],[12,"XGetICValues","","",2,null],[12,"XGetIMValues","","",2,null],[12,"XGetOCValues","","",2,null],[12,"XGetOMValues","","",2,null],[12,"XSetICValues","","",2,null],[12,"XSetIMValues","","",2,null],[12,"XSetOCValues","","",2,null],[12,"XSetOMValues","","",2,null],[12,"XVaCreateNestedList","","",2,null],[3,"_XcmsCCC","","",null,null],[3,"XcmsColor","","",null,null],[3,"_XcmsColorSpace","","",null,null],[3,"_XcmsFunctionSet","","",null,null],[3,"_XkbAction","","",null,null],[3,"_XkbBounds","","",null,null],[3,"_XkbChanges","","",null,null],[3,"_XkbClientMapRec","","",null,null],[3,"_XkbColor","","",null,null],[3,"_XkbComponentList","","",null,null],[3,"_XkbComponentNames","","",null,null],[3,"_XkbControls","","",null,null],[3,"_XkbControlsChanges","","",null,null],[3,"_XkbControlsNotify","","",null,null],[3,"_XkbDeviceChanges","","",null,null],[3,"_XkbDeviceInfo","","",null,null],[3,"_XkbDeviceLedInfo","","",null,null],[3,"_XkbDoodad","","",null,null],[3,"_XkbExtensionDeviceNotify","","",null,null],[3,"_XkbGeometry","","",null,null],[3,"_XkbGeometrySizes","","",null,null],[3,"_XkbIndicatorMapRec","","",null,null],[3,"_XkbKey","","",null,null],[3,"_XkbKeyType","","",null,null],[3,"_XkbMapChanges","","",null,null],[3,"_XkbMods","","",null,null],[3,"_XkbNameChanges","","",null,null],[3,"_XkbNamesNotify","","",null,null],[3,"_XkbOutline","","",null,null],[3,"_XkbOverlay","","",null,null],[3,"_XkbOverlayKey","","",null,null],[3,"_XkbOverlayRow","","",null,null],[3,"_XkbProperty","","",null,null],[3,"_XkbRow","","",null,null],[3,"_XkbSection","","",null,null],[3,"_XkbServerMapRec","","",null,null],[3,"_XkbShape","","",null,null],[3,"_XkbStateRec","","",null,null],[3,"_XkbSymInterpretRec","","",null,null],[3,"XEvent","","",null,null],[12,"pad","","",3,null],[3,"XAnyEvent","","",null,null],[12,"type_","","",4,null],[12,"serial","","",4,null],[12,"send_event","","",4,null],[12,"display","","",4,null],[12,"window","","",4,null],[3,"XButtonEvent","","",null,null],[12,"type_","","",5,null],[12,"serial","","",5,null],[12,"send_event","","",5,null],[12,"display","","",5,null],[12,"window","","",5,null],[12,"root","","",5,null],[12,"subwindow","","",5,null],[12,"time","","",5,null],[12,"x","","",5,null],[12,"y","","",5,null],[12,"x_root","","",5,null],[12,"y_root","","",5,null],[12,"state","","",5,null],[12,"button","","",5,null],[12,"same_screen","","",5,null],[3,"XCirculateEvent","","",null,null],[12,"type_","","",6,null],[12,"serial","","",6,null],[12,"send_event","","",6,null],[12,"display","","",6,null],[12,"event","","",6,null],[12,"window","","",6,null],[12,"place","","",6,null],[3,"XCirculateRequestEvent","","",null,null],[12,"type_","","",7,null],[12,"serial","","",7,null],[12,"send_event","","",7,null],[12,"display","","",7,null],[12,"parent","","",7,null],[12,"window","","",7,null],[12,"place","","",7,null],[3,"XClientMessageEvent","","",null,null],[12,"type_","","",8,null],[12,"serial","","",8,null],[12,"send_event","","",8,null],[12,"display","","",8,null],[12,"window","","",8,null],[12,"message_type","","",8,null],[12,"format","","",8,null],[12,"data","","",8,null],[3,"XColormapEvent","","",null,null],[12,"type_","","",9,null],[12,"serial","","",9,null],[12,"send_event","","",9,null],[12,"display","","",9,null],[12,"window","","",9,null],[12,"colormap","","",9,null],[12,"new","","",9,null],[12,"state","","",9,null],[3,"XConfigureEvent","","",null,null],[12,"type_","","",10,null],[12,"serial","","",10,null],[12,"send_event","","",10,null],[12,"display","","",10,null],[12,"event","","",10,null],[12,"window","","",10,null],[12,"x","","",10,null],[12,"y","","",10,null],[12,"width","","",10,null],[12,"height","","",10,null],[12,"border_width","","",10,null],[12,"above","","",10,null],[12,"override_redirect","","",10,null],[3,"XConfigureRequestEvent","","",null,null],[12,"type_","","",11,null],[12,"serial","","",11,null],[12,"send_event","","",11,null],[12,"display","","",11,null],[12,"parent","","",11,null],[12,"window","","",11,null],[12,"x","","",11,null],[12,"y","","",11,null],[12,"width","","",11,null],[12,"height","","",11,null],[12,"border_width","","",11,null],[12,"above","","",11,null],[12,"detail","","",11,null],[12,"value_mask","","",11,null],[3,"XCreateWindowEvent","","",null,null],[12,"type_","","",12,null],[12,"serial","","",12,null],[12,"send_event","","",12,null],[12,"display","","",12,null],[12,"parent","","",12,null],[12,"window","","",12,null],[12,"x","","",12,null],[12,"y","","",12,null],[12,"width","","",12,null],[12,"height","","",12,null],[12,"border_width","","",12,null],[12,"override_redirect","","",12,null],[3,"XCrossingEvent","","",null,null],[12,"type_","","",13,null],[12,"serial","","",13,null],[12,"send_event","","",13,null],[12,"display","","",13,null],[12,"window","","",13,null],[12,"root","","",13,null],[12,"subwindow","","",13,null],[12,"time","","",13,null],[12,"x","","",13,null],[12,"y","","",13,null],[12,"x_root","","",13,null],[12,"y_root","","",13,null],[12,"mode","","",13,null],[12,"detail","","",13,null],[12,"same_screen","","",13,null],[12,"focus","","",13,null],[12,"state","","",13,null],[3,"XDestroyWindowEvent","","",null,null],[12,"type_","","",14,null],[12,"serial","","",14,null],[12,"send_event","","",14,null],[12,"display","","",14,null],[12,"event","","",14,null],[12,"window","","",14,null],[3,"XErrorEvent","","",null,null],[12,"type_","","",15,null],[12,"display","","",15,null],[12,"resourceid","","",15,null],[12,"serial","","",15,null],[12,"error_code","","",15,null],[12,"request_code","","",15,null],[12,"minor_code","","",15,null],[3,"XExposeEvent","","",null,null],[12,"type_","","",16,null],[12,"serial","","",16,null],[12,"send_event","","",16,null],[12,"display","","",16,null],[12,"window","","",16,null],[12,"x","","",16,null],[12,"y","","",16,null],[12,"width","","",16,null],[12,"height","","",16,null],[12,"count","","",16,null],[3,"XFocusChangeEvent","","",null,null],[12,"type_","","",17,null],[12,"serial","","",17,null],[12,"send_event","","",17,null],[12,"display","","",17,null],[12,"window","","",17,null],[12,"mode","","",17,null],[12,"detail","","",17,null],[3,"XGraphicsExposeEvent","","",null,null],[12,"type_","","",18,null],[12,"serial","","",18,null],[12,"send_event","","",18,null],[12,"display","","",18,null],[12,"drawable","","",18,null],[12,"x","","",18,null],[12,"y","","",18,null],[12,"width","","",18,null],[12,"height","","",18,null],[12,"count","","",18,null],[12,"major_code","","",18,null],[12,"minor_code","","",18,null],[3,"XGravityEvent","","",null,null],[12,"type_","","",19,null],[12,"serial","","",19,null],[12,"send_event","","",19,null],[12,"display","","",19,null],[12,"event","","",19,null],[12,"window","","",19,null],[12,"x","","",19,null],[12,"y","","",19,null],[3,"XKeyEvent","","",null,null],[12,"type_","","",20,null],[12,"serial","","",20,null],[12,"send_event","","",20,null],[12,"display","","",20,null],[12,"window","","",20,null],[12,"root","","",20,null],[12,"subwindow","","",20,null],[12,"time","","",20,null],[12,"x","","",20,null],[12,"y","","",20,null],[12,"x_root","","",20,null],[12,"y_root","","",20,null],[12,"state","","",20,null],[12,"keycode","","",20,null],[12,"same_screen","","",20,null],[3,"XKeymapEvent","","",null,null],[12,"type_","","",21,null],[12,"serial","","",21,null],[12,"send_event","","",21,null],[12,"display","","",21,null],[12,"window","","",21,null],[12,"key_vector","","",21,null],[3,"XMapEvent","","",null,null],[12,"type_","","",22,null],[12,"serial","","",22,null],[12,"send_event","","",22,null],[12,"display","","",22,null],[12,"event","","",22,null],[12,"window","","",22,null],[12,"override_redirect","","",22,null],[3,"XMappingEvent","","",null,null],[12,"type_","","",23,null],[12,"serial","","",23,null],[12,"send_event","","",23,null],[12,"display","","",23,null],[12,"event","","",23,null],[12,"request","","",23,null],[12,"first_keycode","","",23,null],[12,"count","","",23,null],[3,"XMapRequestEvent","","",null,null],[12,"type_","","",24,null],[12,"serial","","",24,null],[12,"send_event","","",24,null],[12,"display","","",24,null],[12,"parent","","",24,null],[12,"window","","",24,null],[3,"XMotionEvent","","",null,null],[12,"type_","","",25,null],[12,"serial","","",25,null],[12,"send_event","","",25,null],[12,"display","","",25,null],[12,"window","","",25,null],[12,"root","","",25,null],[12,"subwindow","","",25,null],[12,"time","","",25,null],[12,"x","","",25,null],[12,"y","","",25,null],[12,"x_root","","",25,null],[12,"y_root","","",25,null],[12,"state","","",25,null],[12,"is_hint","","",25,null],[12,"same_screen","","",25,null],[3,"XNoExposeEvent","","",null,null],[12,"type_","","",26,null],[12,"serial","","",26,null],[12,"send_event","","",26,null],[12,"display","","",26,null],[12,"drawable","","",26,null],[12,"major_code","","",26,null],[12,"minor_code","","",26,null],[3,"XPropertyEvent","","",null,null],[12,"type_","","",27,null],[12,"serial","","",27,null],[12,"send_event","","",27,null],[12,"display","","",27,null],[12,"window","","",27,null],[12,"atom","","",27,null],[12,"time","","",27,null],[12,"state","","",27,null],[3,"XReparentEvent","","",null,null],[12,"type_","","",28,null],[12,"serial","","",28,null],[12,"send_event","","",28,null],[12,"display","","",28,null],[12,"event","","",28,null],[12,"window","","",28,null],[12,"parent","","",28,null],[12,"x","","",28,null],[12,"y","","",28,null],[12,"override_redirect","","",28,null],[3,"XResizeRequestEvent","","",null,null],[12,"type_","","",29,null],[12,"serial","","",29,null],[12,"send_event","","",29,null],[12,"display","","",29,null],[12,"window","","",29,null],[12,"width","","",29,null],[12,"height","","",29,null],[3,"XSelectionClearEvent","","",null,null],[12,"type_","","",30,null],[12,"serial","","",30,null],[12,"send_event","","",30,null],[12,"display","","",30,null],[12,"window","","",30,null],[12,"selection","","",30,null],[12,"time","","",30,null],[3,"XSelectionEvent","","",null,null],[12,"type_","","",31,null],[12,"serial","","",31,null],[12,"send_event","","",31,null],[12,"display","","",31,null],[12,"requestor","","",31,null],[12,"selection","","",31,null],[12,"target","","",31,null],[12,"property","","",31,null],[12,"time","","",31,null],[3,"XSelectionRequestEvent","","",null,null],[12,"type_","","",32,null],[12,"serial","","",32,null],[12,"send_event","","",32,null],[12,"display","","",32,null],[12,"owner","","",32,null],[12,"requestor","","",32,null],[12,"selection","","",32,null],[12,"target","","",32,null],[12,"property","","",32,null],[12,"time","","",32,null],[3,"XUnmapEvent","","",null,null],[12,"type_","","",33,null],[12,"serial","","",33,null],[12,"send_event","","",33,null],[12,"display","","",33,null],[12,"event","","",33,null],[12,"window","","",33,null],[12,"from_configure","","",33,null],[3,"XVisibilityEvent","","",null,null],[12,"type_","","",34,null],[12,"serial","","",34,null],[12,"send_event","","",34,null],[12,"display","","",34,null],[12,"window","","",34,null],[12,"state","","",34,null],[3,"_XkbCompatMapRec","","",null,null],[12,"sym_interpret","","",35,null],[12,"groups","","",35,null],[12,"num_si","","",35,null],[12,"size_si","","",35,null],[3,"_XkbDesc","","",null,null],[12,"dpy","","",36,null],[12,"flags","","",36,null],[12,"device_spec","","",36,null],[12,"min_key_code","","",36,null],[12,"max_key_code","","",36,null],[12,"ctrls","","",36,null],[12,"server","","",36,null],[12,"map","","",36,null],[12,"indicators","","",36,null],[12,"names","","",36,null],[12,"compat","","",36,null],[12,"geom","","",36,null],[3,"_XkbIndicatorRec","","",null,null],[12,"phys_indicators","","",37,null],[12,"maps","","",37,null],[3,"_XkbKeyAliasRec","","",null,null],[12,"real","","",38,null],[12,"alias","","",38,null],[3,"_XkbKeyNameRec","","",null,null],[12,"name","","",39,null],[3,"_XkbNamesRec","","",null,null],[12,"keycodes","","",40,null],[12,"geometry","","",40,null],[12,"symbols","","",40,null],[12,"types","","",40,null],[12,"compat","","",40,null],[12,"vmods","","",40,null],[12,"indicators","","",40,null],[12,"groups","","",40,null],[12,"keys","","",40,null],[12,"key_aliases","","",40,null],[12,"radio_groups","","",40,null],[12,"phys_symbols","","",40,null],[12,"num_keys","","",40,null],[12,"num_key_aliases","","",40,null],[12,"num_rg","","",40,null],[3,"XkbAnyEvent","","",null,null],[12,"type_","","",41,null],[12,"serial","","",41,null],[12,"send_event","","",41,null],[12,"display","","",41,null],[12,"time","","",41,null],[12,"xkb_type","","",41,null],[12,"device","","",41,null],[3,"XkbNewKeyboardNotifyEvent","","",null,null],[12,"type_","","",42,null],[12,"serial","","",42,null],[12,"send_event","","",42,null],[12,"display","","",42,null],[12,"time","","",42,null],[12,"xkb_type","","",42,null],[12,"device","","",42,null],[12,"old_device","","",42,null],[12,"min_key_code","","",42,null],[12,"max_key_code","","",42,null],[12,"old_min_key_code","","",42,null],[12,"old_max_key_code","","",42,null],[12,"changed","","",42,null],[12,"req_major","","",42,null],[12,"req_minor","","",42,null],[3,"_XkbMapNotifyEvent","","",null,null],[12,"type_","","",43,null],[12,"serial","","",43,null],[12,"send_event","","",43,null],[12,"display","","",43,null],[12,"time","","",43,null],[12,"xkb_type","","",43,null],[12,"device","","",43,null],[12,"changed","","",43,null],[12,"flags","","",43,null],[12,"first_type","","",43,null],[12,"num_types","","",43,null],[12,"min_key_code","","",43,null],[12,"max_key_code","","",43,null],[12,"first_key_sym","","",43,null],[12,"first_key_act","","",43,null],[12,"first_key_bahavior","","",43,null],[12,"first_key_explicit","","",43,null],[12,"first_modmap_key","","",43,null],[12,"first_vmodmap_key","","",43,null],[12,"num_key_syms","","",43,null],[12,"num_key_acts","","",43,null],[12,"num_key_behaviors","","",43,null],[12,"num_key_explicit","","",43,null],[12,"num_modmap_keys","","",43,null],[12,"num_vmodmap_keys","","",43,null],[12,"vmods","","",43,null],[3,"XkbStateNotifyEvent","","",null,null],[12,"type_","","",44,null],[12,"serial","","",44,null],[12,"send_event","","",44,null],[12,"display","","",44,null],[12,"time","","",44,null],[12,"xkb_type","","",44,null],[12,"device","","",44,null],[12,"changed","","",44,null],[12,"group","","",44,null],[12,"base_group","","",44,null],[12,"latched_group","","",44,null],[12,"locked_group","","",44,null],[12,"mods","","",44,null],[12,"base_mods","","",44,null],[12,"latched_mods","","",44,null],[12,"locked_mods","","",44,null],[12,"compat_state","","",44,null],[12,"grab_mods","","",44,null],[12,"compat_grab_mods","","",44,null],[12,"lookup_mods","","",44,null],[12,"compat_lookup_mods","","",44,null],[12,"ptr_buttons","","",44,null],[12,"keycode","","",44,null],[12,"event_type","","",44,null],[12,"req_major","","",44,null],[12,"req_minor","","",44,null],[3,"_XkbControlsNotifyEvent","","",null,null],[12,"type_","","",45,null],[12,"serial","","",45,null],[12,"send_event","","",45,null],[12,"display","","",45,null],[12,"time","","",45,null],[12,"xkb_type","","",45,null],[12,"device","","",45,null],[12,"changed_ctrls","","",45,null],[12,"enabled_ctrls","","",45,null],[12,"enabled_ctrl_changes","","",45,null],[12,"num_groups","","",45,null],[12,"keycode","","",45,null],[12,"event_type","","",45,null],[12,"req_major","","",45,null],[12,"req_minor","","",45,null],[3,"XkbIndicatorNotifyEvent","","",null,null],[12,"type_","","",46,null],[12,"serial","","",46,null],[12,"send_event","","",46,null],[12,"display","","",46,null],[12,"time","","",46,null],[12,"xkb_type","","",46,null],[12,"device","","",46,null],[12,"changed","","",46,null],[12,"state","","",46,null],[3,"_XkbNamesNotifyEvent","","",null,null],[12,"type_","","",47,null],[12,"serial","","",47,null],[12,"send_event","","",47,null],[12,"display","","",47,null],[12,"time","","",47,null],[12,"xkb_type","","",47,null],[12,"device","","",47,null],[12,"changed","","",47,null],[12,"first_type","","",47,null],[12,"num_types","","",47,null],[12,"first_lvl","","",47,null],[12,"num_lvls","","",47,null],[12,"num_aliases","","",47,null],[12,"num_radio_groups","","",47,null],[12,"changed_vmods","","",47,null],[12,"changed_groups","","",47,null],[12,"changed_indicators","","",47,null],[12,"first_key","","",47,null],[12,"num_keys","","",47,null],[3,"XkbCompatMapNotifyEvent","","",null,null],[12,"type_","","",48,null],[12,"serial","","",48,null],[12,"send_event","","",48,null],[12,"display","","",48,null],[12,"time","","",48,null],[12,"xkb_type","","",48,null],[12,"device","","",48,null],[12,"changed_groups","","",48,null],[12,"first_si","","",48,null],[12,"num_si","","",48,null],[12,"num_total_si","","",48,null],[3,"XkbBellNotifyEvent","","",null,null],[12,"type_","","",49,null],[12,"serial","","",49,null],[12,"send_event","","",49,null],[12,"display","","",49,null],[12,"time","","",49,null],[12,"xkb_type","","",49,null],[12,"device","","",49,null],[12,"percent","","",49,null],[12,"pitch","","",49,null],[12,"duration","","",49,null],[12,"bell_class","","",49,null],[12,"bell_id","","",49,null],[12,"name","","",49,null],[12,"window","","",49,null],[12,"event_only","","",49,null],[3,"XkbActionMessageEvent","","",null,null],[12,"type_","","",50,null],[12,"serial","","",50,null],[12,"send_event","","",50,null],[12,"display","","",50,null],[12,"time","","",50,null],[12,"xkb_type","","",50,null],[12,"device","","",50,null],[12,"keycode","","",50,null],[12,"press","","",50,null],[12,"key_event_follows","","",50,null],[12,"group","","",50,null],[12,"mods","","",50,null],[12,"message","","",50,null],[3,"XkbAccessXNotifyEvent","","",null,null],[12,"type_","","",51,null],[12,"serial","","",51,null],[12,"send_event","","",51,null],[12,"display","","",51,null],[12,"time","","",51,null],[12,"xkb_type","","",51,null],[12,"device","","",51,null],[12,"detail","","",51,null],[12,"keycode","","",51,null],[12,"sk_delay","","",51,null],[12,"debounce_delay","","",51,null],[3,"_XkbExtensionDeviceNotifyEvent","","",null,null],[12,"type_","","",52,null],[12,"serial","","",52,null],[12,"send_event","","",52,null],[12,"display","","",52,null],[12,"time","","",52,null],[12,"xkb_type","","",52,null],[12,"device","","",52,null],[12,"reason","","",52,null],[12,"supported","","",52,null],[12,"unsupported","","",52,null],[12,"first_btn","","",52,null],[12,"num_btns","","",52,null],[12,"leds_defined","","",52,null],[12,"led_state","","",52,null],[12,"led_class","","",52,null],[12,"led_id","","",52,null],[3,"XkbEvent","","",null,null],[3,"Depth","","",null,null],[12,"depth","","",53,null],[12,"nvisuals","","",53,null],[12,"visuals","","",53,null],[3,"Screen","","",null,null],[12,"ext_data","","",54,null],[12,"display","","",54,null],[12,"root","","",54,null],[12,"width","","",54,null],[12,"height","","",54,null],[12,"mwidth","","",54,null],[12,"mheight","","",54,null],[12,"ndepths","","",54,null],[12,"depths","","",54,null],[12,"root_depth","","",54,null],[12,"root_visual","","",54,null],[12,"default_gc","","",54,null],[12,"cmap","","",54,null],[12,"white_pixel","","",54,null],[12,"black_pixel","","",54,null],[12,"max_maps","","",54,null],[12,"min_maps","","",54,null],[12,"backing_store","","",54,null],[12,"save_unders","","",54,null],[12,"root_input_mask","","",54,null],[3,"ScreenFormat","","",null,null],[12,"ext_data","","",55,null],[12,"depth","","",55,null],[12,"bits_per_pixel","","",55,null],[12,"scanline_pad","","",55,null],[3,"Visual","","",null,null],[12,"ext_data","","",56,null],[12,"visualid","","",56,null],[12,"class","","",56,null],[12,"red_mask","","",56,null],[12,"green_mask","","",56,null],[12,"blue_mask","","",56,null],[12,"bits_per_rgb","","",56,null],[12,"map_entries","","",56,null],[3,"XArc","","",null,null],[12,"x","","",57,null],[12,"y","","",57,null],[12,"width","","",57,null],[12,"height","","",57,null],[12,"angle1","","",57,null],[12,"angle2","","",57,null],[3,"XChar2b","","",null,null],[12,"byte1","","",58,null],[12,"byte2","","",58,null],[3,"XCharStruct","","",null,null],[12,"lbearing","","",59,null],[12,"rbearing","","",59,null],[12,"width","","",59,null],[12,"ascent","","",59,null],[12,"descent","","",59,null],[12,"attributes","","",59,null],[3,"XClassHint","","",null,null],[12,"res_name","","",60,null],[12,"res_class","","",60,null],[3,"XColor","","",null,null],[12,"pixel","","",61,null],[12,"red","","",61,null],[12,"green","","",61,null],[12,"blue","","",61,null],[12,"flags","","",61,null],[12,"pad","","",61,null],[3,"XComposeStatus","","",null,null],[12,"compose_ptr","","",62,null],[12,"chars_matched","","",62,null],[3,"XExtCodes","","",null,null],[12,"extension","","",63,null],[12,"major_opcode","","",63,null],[12,"first_event","","",63,null],[12,"first_error","","",63,null],[3,"XExtData","","",null,null],[12,"number","","",64,null],[12,"next","","",64,null],[12,"free_private","","",64,null],[12,"private_data","","",64,null],[3,"XFontProp","","",null,null],[12,"name","","",65,null],[12,"card32","","",65,null],[3,"XFontSetExtents","","",null,null],[12,"max_ink_extent","","",66,null],[12,"max_logical_extent","","",66,null],[3,"XFontStruct","","",null,null],[12,"ext_data","","",67,null],[12,"fid","","",67,null],[12,"direction","","",67,null],[12,"min_char_or_byte2","","",67,null],[12,"max_char_or_byte2","","",67,null],[12,"min_byte1","","",67,null],[12,"max_byte1","","",67,null],[12,"all_chars_exist","","",67,null],[12,"default_char","","",67,null],[12,"n_properties","","",67,null],[12,"properties","","",67,null],[12,"min_bounds","","",67,null],[12,"max_bounds","","",67,null],[12,"per_char","","",67,null],[12,"ascent","","",67,null],[12,"descent","","",67,null],[3,"XGCValues","","",null,null],[12,"function","","",68,null],[12,"plane_mask","","",68,null],[12,"foreground","","",68,null],[12,"background","","",68,null],[12,"line_width","","",68,null],[12,"line_style","","",68,null],[12,"cap_style","","",68,null],[12,"join_style","","",68,null],[12,"fill_style","","",68,null],[12,"fill_rule","","",68,null],[12,"arc_mode","","",68,null],[12,"tile","","",68,null],[12,"stipple","","",68,null],[12,"ts_x_origin","","",68,null],[12,"ts_y_origin","","",68,null],[12,"font","","",68,null],[12,"subwindow_mode","","",68,null],[12,"graphics_exposures","","",68,null],[12,"clip_x_origin","","",68,null],[12,"clip_y_origin","","",68,null],[12,"clip_mask","","",68,null],[12,"dash_offset","","",68,null],[12,"dashes","","",68,null],[3,"XGenericEventCookie","","",null,null],[12,"type_","","",69,null],[12,"serial","","",69,null],[12,"send_event","","",69,null],[12,"display","","",69,null],[12,"extension","","",69,null],[12,"evtype","","",69,null],[12,"cookie","","",69,null],[12,"data","","",69,null],[3,"XHostAddress","","",null,null],[12,"family","","",70,null],[12,"length","","",70,null],[12,"address","","",70,null],[3,"XIconSize","","",null,null],[12,"min_width","","",71,null],[12,"min_height","","",71,null],[12,"max_width","","",71,null],[12,"max_height","","",71,null],[12,"width_inc","","",71,null],[12,"height_inc","","",71,null],[3,"XImage","","",null,null],[12,"width","","",72,null],[12,"height","","",72,null],[12,"xoffset","","",72,null],[12,"format","","",72,null],[12,"data","","",72,null],[12,"byte_order","","",72,null],[12,"bitmap_unit","","",72,null],[12,"bitmap_bit_order","","",72,null],[12,"bitmap_pad","","",72,null],[12,"depth","","",72,null],[12,"bytes_per_line","","",72,null],[12,"bits_per_pixel","","",72,null],[12,"red_mask","","",72,null],[12,"green_mask","","",72,null],[12,"blue_mask","","",72,null],[12,"obdata","","",72,null],[12,"funcs","","",72,null],[3,"XKeyboardControl","","",null,null],[12,"key_click_percent","","",73,null],[12,"bell_percent","","",73,null],[12,"bell_pitch","","",73,null],[12,"bell_duration","","",73,null],[12,"led","","",73,null],[12,"led_mode","","",73,null],[12,"key","","",73,null],[12,"auto_repeat_mode","","",73,null],[3,"XKeyboardState","","",null,null],[12,"key_click_percent","","",74,null],[12,"bell_percent","","",74,null],[12,"bell_pitch","","",74,null],[12,"bell_duration","","",74,null],[12,"led_mask","","",74,null],[12,"global_auto_repeat","","",74,null],[12,"auto_repeats","","",74,null],[3,"XmbTextItem","","",null,null],[12,"chars","","",75,null],[12,"nchars","","",75,null],[12,"delta","","",75,null],[12,"font_set","","",75,null],[3,"XModifierKeymap","","",null,null],[12,"max_keypermod","","",76,null],[12,"modifiermap","","",76,null],[3,"XOMCharSetList","","",null,null],[12,"charset_count","","",77,null],[12,"charset_list","","",77,null],[3,"XPixmapFormatValues","","",null,null],[12,"depth","","",78,null],[12,"bits_per_pixel","","",78,null],[12,"scanline_pad","","",78,null],[3,"XPoint","","",null,null],[12,"x","","",79,null],[12,"y","","",79,null],[3,"XRectangle","","",null,null],[12,"x","","",80,null],[12,"y","","",80,null],[12,"width","","",80,null],[12,"height","","",80,null],[3,"XrmOptionDescRec","","",null,null],[12,"option","","",81,null],[12,"specifier","","",81,null],[12,"argKind","","",81,null],[12,"value","","",81,null],[3,"XrmValue","","",null,null],[12,"size","","",82,null],[12,"addr","","",82,null],[3,"XSegment","","",null,null],[12,"x1","","",83,null],[12,"y1","","",83,null],[12,"x2","","",83,null],[12,"y2","","",83,null],[3,"XSetWindowAttributes","","",null,null],[12,"background_pixmap","","",84,null],[12,"background_pixel","","",84,null],[12,"border_pixmap","","",84,null],[12,"border_pixel","","",84,null],[12,"bit_gravity","","",84,null],[12,"win_gravity","","",84,null],[12,"backing_store","","",84,null],[12,"backing_planes","","",84,null],[12,"backing_pixel","","",84,null],[12,"save_under","","",84,null],[12,"event_mask","","",84,null],[12,"do_not_propagate_mask","","",84,null],[12,"override_redirect","","",84,null],[12,"colormap","","",84,null],[12,"cursor","","",84,null],[3,"XSizeHints","","",null,null],[12,"flags","","",85,null],[12,"x","","",85,null],[12,"y","","",85,null],[12,"width","","",85,null],[12,"height","","",85,null],[12,"min_width","","",85,null],[12,"min_height","","",85,null],[12,"max_width","","",85,null],[12,"max_height","","",85,null],[12,"width_inc","","",85,null],[12,"height_inc","","",85,null],[12,"min_aspect","","",85,null],[12,"max_aspect","","",85,null],[12,"base_width","","",85,null],[12,"base_height","","",85,null],[12,"win_gravity","","",85,null],[3,"XStandardColormap","","",null,null],[12,"colormap","","",86,null],[12,"red_max","","",86,null],[12,"red_mult","","",86,null],[12,"green_max","","",86,null],[12,"green_mult","","",86,null],[12,"blue_max","","",86,null],[12,"blue_mult","","",86,null],[12,"base_pixel","","",86,null],[12,"visualid","","",86,null],[12,"killid","","",86,null],[3,"XTextItem","","",null,null],[12,"chars","","",87,null],[12,"nchars","","",87,null],[12,"delta","","",87,null],[12,"font","","",87,null],[3,"XTextItem16","","",null,null],[12,"chars","","",88,null],[12,"nchars","","",88,null],[12,"delta","","",88,null],[12,"font","","",88,null],[3,"XTextProperty","","",null,null],[12,"value","","",89,null],[12,"encoding","","",89,null],[12,"format","","",89,null],[12,"nitems","","",89,null],[3,"XTimeCoord","","",null,null],[12,"time","","",90,null],[12,"x","","",90,null],[12,"y","","",90,null],[3,"XVisualInfo","","",null,null],[12,"visual","","",91,null],[12,"visualid","","",91,null],[12,"screen","","",91,null],[12,"depth","","",91,null],[12,"class","","",91,null],[12,"red_mask","","",91,null],[12,"green_mask","","",91,null],[12,"blue_mask","","",91,null],[12,"colormap_size","","",91,null],[12,"bits_per_rgb","","",91,null],[3,"XwcTextItem","","",null,null],[12,"chars","","",92,null],[12,"nchars","","",92,null],[12,"delta","","",92,null],[12,"font_set","","",92,null],[3,"XWindowAttributes","","",null,null],[12,"x","","",93,null],[12,"y","","",93,null],[12,"width","","",93,null],[12,"height","","",93,null],[12,"border_width","","",93,null],[12,"depth","","",93,null],[12,"visual","","",93,null],[12,"root","","",93,null],[12,"class","","",93,null],[12,"bit_gravity","","",93,null],[12,"win_gravity","","",93,null],[12,"backing_store","","",93,null],[12,"backing_planes","","",93,null],[12,"backing_pixel","","",93,null],[12,"save_under","","",93,null],[12,"colormap","","",93,null],[12,"map_installed","","",93,null],[12,"map_state","","",93,null],[12,"all_event_masks","","",93,null],[12,"your_event_mask","","",93,null],[12,"do_not_propagate_mask","","",93,null],[12,"override_redirect","","",93,null],[12,"screen","","",93,null],[3,"XWindowChanges","","",null,null],[12,"x","","",94,null],[12,"y","","",94,null],[12,"width","","",94,null],[12,"height","","",94,null],[12,"border_width","","",94,null],[12,"sibling","","",94,null],[12,"stack_mode","","",94,null],[3,"XWMHints","","",null,null],[12,"flags","","",95,null],[12,"input","","",95,null],[12,"initial_state","","",95,null],[12,"icon_pixmap","","",95,null],[12,"icon_window","","",95,null],[12,"icon_x","","",95,null],[12,"icon_y","","",95,null],[12,"icon_mask","","",95,null],[12,"window_group","","",95,null],[3,"AspectRatio","","",null,null],[12,"x","","",96,null],[12,"y","","",96,null],[3,"ClientMessageData","","",null,null],[3,"ImageFns","","",null,null],[12,"create_image","","",97,null],[12,"destroy_image","","",97,null],[12,"get_pixel","","",97,null],[12,"put_pixel","","",97,null],[12,"sub_image","","",97,null],[12,"add_pixel","","",97,null],[4,"_XDisplay","","",null,null],[4,"xError","","",null,null],[4,"xEvent","","",null,null],[4,"_XGC","","",null,null],[4,"_XIC","","",null,null],[4,"_XIM","","",null,null],[4,"_XRegion","","",null,null],[4,"_XOC","","",null,null],[4,"_XOM","","",null,null],[4,"_XrmHashBucketRec","","",null,null],[4,"XkbKbdDpyStateRec","","",null,null],[6,"Atom","","",null,null],[6,"Bool","","",null,null],[6,"Colormap","","",null,null],[6,"Cursor","","",null,null],[6,"Drawable","","",null,null],[6,"Font","","",null,null],[6,"GContext","","",null,null],[6,"KeyCode","","",null,null],[6,"KeySym","","",null,null],[6,"Mask","","",null,null],[6,"Pixmap","","",null,null],[6,"Status","","",null,null],[6,"Time","","",null,null],[6,"VisualID","","",null,null],[6,"Window","","",null,null],[6,"XID","","",null,null],[6,"XPointer","","",null,null],[6,"XEDataObject","","",null,null],[6,"Display","","",null,null],[6,"GC","","",null,null],[6,"Region","","",null,null],[6,"XcmsCCC","","",null,null],[6,"XcmsColorSpace","","",null,null],[6,"XcmsFunctionSet","","",null,null],[6,"XFontSet","","",null,null],[6,"XIC","","",null,null],[6,"XIM","","",null,null],[6,"XkbAction","","",null,null],[6,"XkbBoundsPtr","","",null,null],[6,"XkbChangesPtr","","",null,null],[6,"XkbClientMapPtr","","",null,null],[6,"XkbColorPtr","","",null,null],[6,"XkbCompatMapPtr","","",null,null],[6,"XkbComponentListPtr","","",null,null],[6,"XkbComponentNamesPtr","","",null,null],[6,"XkbControlsChangesPtr","","",null,null],[6,"XkbControlsNotifyEvent","","",null,null],[6,"XkbControlsPtr","","",null,null],[6,"XkbDescPtr","","",null,null],[6,"XkbDeviceChangesPtr","","",null,null],[6,"XkbDeviceInfoPtr","","",null,null],[6,"XkbDeviceLedInfoPtr","","",null,null],[6,"XkbDoodadPtr","","",null,null],[6,"XkbExtensionDeviceNotifyEvent","","",null,null],[6,"XkbGeometryPtr","","",null,null],[6,"XkbGeometrySizesPtr","","",null,null],[6,"XkbIndicatorMapPtr","","",null,null],[6,"XkbIndicatorMapRec","","",null,null],[6,"XkbIndicatorPtr","","",null,null],[6,"XkbKeyTypePtr","","",null,null],[6,"XkbMapChangesPtr","","",null,null],[6,"XkbMapNotifyEvent","","",null,null],[6,"XkbModsPtr","","",null,null],[6,"XkbModsRec","","",null,null],[6,"XkbNameChangesPtr","","",null,null],[6,"XkbNamesNotifyEvent","","",null,null],[6,"XkbNamesPtr","","",null,null],[6,"XkbKeyAliasPtr","","",null,null],[6,"XkbKeyNamePtr","","",null,null],[6,"XkbKeyPtr","","",null,null],[6,"XkbOutlinePtr","","",null,null],[6,"XkbOverlayKeyPtr","","",null,null],[6,"XkbOverlayPtr","","",null,null],[6,"XkbOverlayRowPtr","","",null,null],[6,"XkbPropertyPtr","","",null,null],[6,"XkbRowPtr","","",null,null],[6,"XkbSectionPtr","","",null,null],[6,"XkbServerMapPtr","","",null,null],[6,"XkbShapePtr","","",null,null],[6,"XkbStatePtr","","",null,null],[6,"XkbSymInterpretPtr","","",null,null],[6,"XOM","","",null,null],[6,"XrmDatabase","","",null,null],[6,"XrmOptionDescList","","",null,null],[6,"XConnectionWatchProc","","",null,null],[6,"XICCEncodingStyle","","",null,null],[6,"XOrientation","","",null,null],[6,"XrmBinding","","",null,null],[6,"XrmOptionKind","","",null,null],[6,"XButtonPressedEvent","","",null,null],[6,"XButtonReleasedEvent","","",null,null],[6,"XEnterWindowEvent","","",null,null],[6,"XLeaveWindowEvent","","",null,null],[6,"XFocusInEvent","","",null,null],[6,"XFocusOutEvent","","",null,null],[6,"XKeyPressedEvent","","",null,null],[6,"XKeyReleasedEvent","","",null,null],[6,"XPointerMovedEvent","","",null,null],[6,"XkbKbdDpyStatePtr","","",null,null],[17,"AllocNone","","",null,null],[17,"AllocAll","","",null,null],[17,"XkbKeyNameLength","","",null,null],[17,"XkbNumIndicators","","",null,null],[17,"XkbNumKbdGroups","","",null,null],[17,"XkbNumVirtualMods","","",null,null],[17,"XA_PRIMARY","","",null,null],[17,"XA_SECONDARY","","",null,null],[17,"XA_ARC","","",null,null],[17,"XA_ATOM","","",null,null],[17,"XA_BITMAP","","",null,null],[17,"XA_CARDINAL","","",null,null],[17,"XA_COLORMAP","","",null,null],[17,"XA_CURSOR","","",null,null],[17,"XA_CUT_BUFFER0","","",null,null],[17,"XA_CUT_BUFFER1","","",null,null],[17,"XA_CUT_BUFFER2","","",null,null],[17,"XA_CUT_BUFFER3","","",null,null],[17,"XA_CUT_BUFFER4","","",null,null],[17,"XA_CUT_BUFFER5","","",null,null],[17,"XA_CUT_BUFFER6","","",null,null],[17,"XA_CUT_BUFFER7","","",null,null],[17,"XA_DRAWABLE","","",null,null],[17,"XA_FONT","","",null,null],[17,"XA_INTEGER","","",null,null],[17,"XA_PIXMAP","","",null,null],[17,"XA_POINT","","",null,null],[17,"XA_RECTANGLE","","",null,null],[17,"XA_RESOURCE_MANAGER","","",null,null],[17,"XA_RGB_COLOR_MAP","","",null,null],[17,"XA_RGB_BEST_MAP","","",null,null],[17,"XA_RGB_BLUE_MAP","","",null,null],[17,"XA_RGB_DEFAULT_MAP","","",null,null],[17,"XA_RGB_GRAY_MAP","","",null,null],[17,"XA_RGB_GREEN_MAP","","",null,null],[17,"XA_RGB_RED_MAP","","",null,null],[17,"XA_STRING","","",null,null],[17,"XA_VISUALID","","",null,null],[17,"XA_WINDOW","","",null,null],[17,"XA_WM_COMMAND","","",null,null],[17,"XA_WM_HINTS","","",null,null],[17,"XA_WM_CLIENT_MACHINE","","",null,null],[17,"XA_WM_ICON_NAME","","",null,null],[17,"XA_WM_ICON_SIZE","","",null,null],[17,"XA_WM_NAME","","",null,null],[17,"XA_WM_NORMAL_HINTS","","",null,null],[17,"XA_WM_SIZE_HINTS","","",null,null],[17,"XA_WM_ZOOM_HINTS","","",null,null],[17,"XA_MIN_SPACE","","",null,null],[17,"XA_NORM_SPACE","","",null,null],[17,"XA_MAX_SPACE","","",null,null],[17,"XA_END_SPACE","","",null,null],[17,"XA_SUPERSCRIPT_X","","",null,null],[17,"XA_SUPERSCRIPT_Y","","",null,null],[17,"XA_SUBSCRIPT_X","","",null,null],[17,"XA_SUBSCRIPT_Y","","",null,null],[17,"XA_UNDERLINE_POSITION","","",null,null],[17,"XA_UNDERLINE_THICKNESS","","",null,null],[17,"XA_STRIKEOUT_ASCENT","","",null,null],[17,"XA_STRIKEOUT_DESCENT","","",null,null],[17,"XA_ITALIC_ANGLE","","",null,null],[17,"XA_X_HEIGHT","","",null,null],[17,"XA_QUAD_WIDTH","","",null,null],[17,"XA_WEIGHT","","",null,null],[17,"XA_POINT_SIZE","","",null,null],[17,"XA_RESOLUTION","","",null,null],[17,"XA_COPYRIGHT","","",null,null],[17,"XA_NOTICE","","",null,null],[17,"XA_FONT_NAME","","",null,null],[17,"XA_FAMILY_NAME","","",null,null],[17,"XA_FULL_NAME","","",null,null],[17,"XA_CAP_HEIGHT","","",null,null],[17,"XA_WM_CLASS","","",null,null],[17,"XA_WM_TRANSIENT_FOR","","",null,null],[17,"False","","",null,null],[17,"True","","",null,null],[17,"Unsorted","","",null,null],[17,"YSorted","","",null,null],[17,"YXSorted","","",null,null],[17,"YXBanded","","",null,null],[17,"DoRed","","",null,null],[17,"DoGreen","","",null,null],[17,"DoBlue","","",null,null],[17,"Success","","",null,null],[17,"BadRequest","","",null,null],[17,"BadValue","","",null,null],[17,"BadWindow","","",null,null],[17,"BadPixmap","","",null,null],[17,"BadAtom","","",null,null],[17,"BadCursor","","",null,null],[17,"BadFont","","",null,null],[17,"BadMatch","","",null,null],[17,"BadDrawable","","",null,null],[17,"BadAccess","","",null,null],[17,"BadAlloc","","",null,null],[17,"BadColor","","",null,null],[17,"BadGC","","",null,null],[17,"BadIDChoice","","",null,null],[17,"BadName","","",null,null],[17,"BadLength","","",null,null],[17,"BadImplementation","","",null,null],[17,"FirstExtensionError","","",null,null],[17,"LastExtensionError","","",null,null],[17,"KeyPress","","",null,null],[17,"KeyRelease","","",null,null],[17,"ButtonPress","","",null,null],[17,"ButtonRelease","","",null,null],[17,"MotionNotify","","",null,null],[17,"EnterNotify","","",null,null],[17,"LeaveNotify","","",null,null],[17,"FocusIn","","",null,null],[17,"FocusOut","","",null,null],[17,"KeymapNotify","","",null,null],[17,"Expose","","",null,null],[17,"GraphicsExpose","","",null,null],[17,"NoExpose","","",null,null],[17,"VisibilityNotify","","",null,null],[17,"CreateNotify","","",null,null],[17,"DestroyNotify","","",null,null],[17,"UnmapNotify","","",null,null],[17,"MapNotify","","",null,null],[17,"MapRequest","","",null,null],[17,"ReparentNotify","","",null,null],[17,"ConfigureNotify","","",null,null],[17,"ConfigureRequest","","",null,null],[17,"GravityNotify","","",null,null],[17,"ResizeRequest","","",null,null],[17,"CirculateNotify","","",null,null],[17,"CirculateRequest","","",null,null],[17,"PropertyNotify","","",null,null],[17,"SelectionClear","","",null,null],[17,"SelectionRequest","","",null,null],[17,"SelectionNotify","","",null,null],[17,"ColormapNotify","","",null,null],[17,"ClientMessage","","",null,null],[17,"MappingNotify","","",null,null],[17,"GenericEvent","","",null,null],[17,"LASTEvent","","",null,null],[17,"NoEventMask","","",null,null],[17,"KeyPressMask","","",null,null],[17,"KeyReleaseMask","","",null,null],[17,"ButtonPressMask","","",null,null],[17,"ButtonReleaseMask","","",null,null],[17,"EnterWindowMask","","",null,null],[17,"LeaveWindowMask","","",null,null],[17,"PointerMotionMask","","",null,null],[17,"PointerMotionHintMask","","",null,null],[17,"Button1MotionMask","","",null,null],[17,"Button2MotionMask","","",null,null],[17,"Button3MotionMask","","",null,null],[17,"Button4MotionMask","","",null,null],[17,"Button5MotionMask","","",null,null],[17,"ButtonMotionMask","","",null,null],[17,"KeymapStateMask","","",null,null],[17,"ExposureMask","","",null,null],[17,"VisibilityChangeMask","","",null,null],[17,"StructureNotifyMask","","",null,null],[17,"ResizeRedirectMask","","",null,null],[17,"SubstructureNotifyMask","","",null,null],[17,"SubstructureRedirectMask","","",null,null],[17,"FocusChangeMask","","",null,null],[17,"PropertyChangeMask","","",null,null],[17,"ColormapChangeMask","","",null,null],[17,"OwnerGrabButtonMask","","",null,null],[17,"PropModeReplace","","",null,null],[17,"PropModePrepend","","",null,null],[17,"PropModeAppend","","",null,null],[17,"ShiftMapIndex","","",null,null],[17,"LockMapIndex","","",null,null],[17,"ControlMapIndex","","",null,null],[17,"Mod1MapIndex","","",null,null],[17,"Mod2MapIndex","","",null,null],[17,"Mod3MapIndex","","",null,null],[17,"Mod4MapIndex","","",null,null],[17,"Mod5MapIndex","","",null,null],[17,"Button1Mask","","",null,null],[17,"Button2Mask","","",null,null],[17,"Button3Mask","","",null,null],[17,"Button4Mask","","",null,null],[17,"Button5Mask","","",null,null],[17,"AnyModifier","","",null,null],[17,"NotifyNormal","","",null,null],[17,"NotifyGrab","","",null,null],[17,"NotifyUngrab","","",null,null],[17,"NotifyWhileGrabbed","","",null,null],[17,"NotifyHint","","",null,null],[17,"NotifyAncestor","","",null,null],[17,"NotifyVirtual","","",null,null],[17,"NotifyInferior","","",null,null],[17,"NotifyNonlinear","","",null,null],[17,"NotifyNonlinearVirtual","","",null,null],[17,"NotifyPointer","","",null,null],[17,"NotifyPointerRoot","","",null,null],[17,"NotifyDetailNone","","",null,null],[17,"VisibilityUnobscured","","",null,null],[17,"VisibilityPartiallyObscured","","",null,null],[17,"VisibilityFullyObscured","","",null,null],[17,"PlaceOnTop","","",null,null],[17,"PlaceOnBottom","","",null,null],[17,"FamilyInternet","","",null,null],[17,"FamilyDECnet","","",null,null],[17,"FamilyChaos","","",null,null],[17,"FamilyInternet6","","",null,null],[17,"FamilyServerInterpreted","","",null,null],[17,"PropertyNewValue","","",null,null],[17,"PropertyDelete","","",null,null],[17,"ColormapUninstalled","","",null,null],[17,"ColormapInstalled","","",null,null],[17,"GrabModeSync","","",null,null],[17,"GrabModeAsync","","",null,null],[17,"GrabSuccess","","",null,null],[17,"AlreadyGrabbed","","",null,null],[17,"GrabInvalidTime","","",null,null],[17,"GrabNotViewable","","",null,null],[17,"GrabFrozen","","",null,null],[17,"AsyncPointer","","",null,null],[17,"SyncPointer","","",null,null],[17,"ReplayPointer","","",null,null],[17,"AsyncKeyboard","","",null,null],[17,"SyncKeyboard","","",null,null],[17,"ReplayKeyboard","","",null,null],[17,"AsyncBoth","","",null,null],[17,"SyncBoth","","",null,null],[17,"RevertToNone","","",null,null],[17,"RevertToPointerRoot","","",null,null],[17,"RevertToParent","","",null,null],[17,"CWX","","",null,null],[17,"CWY","","",null,null],[17,"CWWidth","","",null,null],[17,"CWHeight","","",null,null],[17,"CWBorderWidth","","",null,null],[17,"CWSibling","","",null,null],[17,"CWStackMode","","",null,null],[17,"ForgetGravity","","",null,null],[17,"UnmapGravity","","",null,null],[17,"NorthWestGravity","","",null,null],[17,"NorthGravity","","",null,null],[17,"NorthEastGravity","","",null,null],[17,"WestGravity","","",null,null],[17,"CenterGravity","","",null,null],[17,"EastGravity","","",null,null],[17,"SouthWestGravity","","",null,null],[17,"SouthGravity","","",null,null],[17,"SouthEastGravity","","",null,null],[17,"StaticGravity","","",null,null],[17,"XYBitmap","","",null,null],[17,"XYPixmap","","",null,null],[17,"ZPixmap","","",null,null],[17,"NotUseful","","",null,null],[17,"WhenMapped","","",null,null],[17,"Always","","",null,null],[17,"IsUnmapped","","",null,null],[17,"IsUnviewable","","",null,null],[17,"IsViewable","","",null,null],[17,"ShiftMask","","",null,null],[17,"LockMask","","",null,null],[17,"ControlMask","","",null,null],[17,"Mod1Mask","","",null,null],[17,"Mod2Mask","","",null,null],[17,"Mod3Mask","","",null,null],[17,"Mod4Mask","","",null,null],[17,"Mod5Mask","","",null,null],[17,"Button1","","",null,null],[17,"Button2","","",null,null],[17,"Button3","","",null,null],[17,"Button4","","",null,null],[17,"Button5","","",null,null],[17,"USPosition","","",null,null],[17,"USSize","","",null,null],[17,"PPosition","","",null,null],[17,"PSize","","",null,null],[17,"PMinSize","","",null,null],[17,"PMaxSize","","",null,null],[17,"PResizeInc","","",null,null],[17,"PAspect","","",null,null],[17,"PBaseSize","","",null,null],[17,"PWinGravity","","",null,null],[17,"PAllHints","","",null,null],[17,"SetModeInsert","","",null,null],[17,"SetModeDelete","","",null,null],[17,"DestroyAll","","",null,null],[17,"RetainPermanent","","",null,null],[17,"RetainTemporary","","",null,null],[17,"Above","","",null,null],[17,"Below","","",null,null],[17,"TopIf","","",null,null],[17,"BottomIf","","",null,null],[17,"Opposite","","",null,null],[17,"RaiseLowest","","",null,null],[17,"LowerHighest","","",null,null],[17,"GXclear","","",null,null],[17,"GXand","","",null,null],[17,"GXandReverse","","",null,null],[17,"GXcopy","","",null,null],[17,"GXandInverted","","",null,null],[17,"GXnoop","","",null,null],[17,"GXxor","","",null,null],[17,"GXor","","",null,null],[17,"GXnor","","",null,null],[17,"GXequiv","","",null,null],[17,"GXinvert","","",null,null],[17,"GXorReverse","","",null,null],[17,"GXcopyInverted","","",null,null],[17,"GXorInverted","","",null,null],[17,"GXnand","","",null,null],[17,"GXset","","",null,null],[17,"LineSolid","","",null,null],[17,"LineOnOffDash","","",null,null],[17,"LineDoubleDash","","",null,null],[17,"CapNotLast","","",null,null],[17,"CapButt","","",null,null],[17,"CapRound","","",null,null],[17,"CapProjecting","","",null,null],[17,"JoinMiter","","",null,null],[17,"JoinRound","","",null,null],[17,"JoinBevel","","",null,null],[17,"FillSolid","","",null,null],[17,"FillTiled","","",null,null],[17,"FillStippled","","",null,null],[17,"FillOpaqueStippled","","",null,null],[17,"EvenOddRule","","",null,null],[17,"WindingRule","","",null,null],[17,"ClipByChildren","","",null,null],[17,"IncludeInferiors","","",null,null],[17,"CoordModeOrigin","","",null,null],[17,"CoordModePrevious","","",null,null],[17,"Complex","","",null,null],[17,"Nonconvex","","",null,null],[17,"Convex","","",null,null],[17,"ArcChord","","",null,null],[17,"ArcPieSlice","","",null,null],[17,"GCFunction","","",null,null],[17,"GCPlaneMask","","",null,null],[17,"GCForeground","","",null,null],[17,"GCBackground","","",null,null],[17,"GCLineWidth","","",null,null],[17,"GCLineStyle","","",null,null],[17,"GCCapStyle","","",null,null],[17,"GCJoinStyle","","",null,null],[17,"GCFillStyle","","",null,null],[17,"GCFillRule","","",null,null],[17,"GCTile","","",null,null],[17,"GCStipple","","",null,null],[17,"GCTileStipXOrigin","","",null,null],[17,"GCTileStipYOrigin","","",null,null],[17,"GCFont","","",null,null],[17,"GCSubwindowMode","","",null,null],[17,"GCGraphicsExposures","","",null,null],[17,"GCClipXOrigin","","",null,null],[17,"GCClipYOrigin","","",null,null],[17,"GCClipMask","","",null,null],[17,"GCDashOffset","","",null,null],[17,"GCDashList","","",null,null],[17,"GCArcMode","","",null,null],[17,"GCLastBit","","",null,null],[17,"FontLeftToRight","","",null,null],[17,"FontRightToLeft","","",null,null],[17,"FontChange","","",null,null],[17,"CursorShape","","",null,null],[17,"TileShape","","",null,null],[17,"StippleShape","","",null,null],[17,"AutoRepeatModeOff","","",null,null],[17,"AutoRepeatModeOn","","",null,null],[17,"AutoRepeatModeDefault","","",null,null],[17,"LedModeOff","","",null,null],[17,"LedModeOn","","",null,null],[17,"KBKeyClickPercent","","",null,null],[17,"KBBellPercent","","",null,null],[17,"KBBellPitch","","",null,null],[17,"KBBellDuration","","",null,null],[17,"KBLed","","",null,null],[17,"KBLedMode","","",null,null],[17,"KBKey","","",null,null],[17,"KBAutoRepeatMode","","",null,null],[17,"MappingSuccess","","",null,null],[17,"MappingBusy","","",null,null],[17,"MappingFailed","","",null,null],[17,"MappingModifier","","",null,null],[17,"MappingKeyboard","","",null,null],[17,"MappingPointer","","",null,null],[17,"DontPreferBlanking","","",null,null],[17,"PreferBlanking","","",null,null],[17,"DefaultBlanking","","",null,null],[17,"DisableScreenSaver","","",null,null],[17,"DisableScreenInterval","","",null,null],[17,"DontAllowExposures","","",null,null],[17,"AllowExposures","","",null,null],[17,"DefaultExposures","","",null,null],[17,"ScreenSaverReset","","",null,null],[17,"ScreenSaverActive","","",null,null],[17,"HostInsert","","",null,null],[17,"HostDelete","","",null,null],[17,"EnableAccess","","",null,null],[17,"DisableAccess","","",null,null],[17,"StaticGray","","",null,null],[17,"GrayScale","","",null,null],[17,"StaticColor","","",null,null],[17,"PseudoColor","","",null,null],[17,"TrueColor","","",null,null],[17,"DirectColor","","",null,null],[17,"VisualNoMask","","",null,null],[17,"VisualIDMask","","",null,null],[17,"VisualScreenMask","","",null,null],[17,"VisualDepthMask","","",null,null],[17,"VisualClassMask","","",null,null],[17,"VisualRedMaskMask","","",null,null],[17,"VisualGreenMaskMask","","",null,null],[17,"VisualBlueMaskMask","","",null,null],[17,"VisualColormapSizeMask","","",null,null],[17,"VisualBitsPerRGBMask","","",null,null],[17,"VisualAllMask","","",null,null],[17,"CWBackPixmap","","",null,null],[17,"CWBackPixel","","",null,null],[17,"CWBorderPixmap","","",null,null],[17,"CWBorderPixel","","",null,null],[17,"CWBitGravity","","",null,null],[17,"CWWinGravity","","",null,null],[17,"CWBackingStore","","",null,null],[17,"CWBackingPlanes","","",null,null],[17,"CWBackingPixel","","",null,null],[17,"CWOverrideRedirect","","",null,null],[17,"CWSaveUnder","","",null,null],[17,"CWEventMask","","",null,null],[17,"CWDontPropagate","","",null,null],[17,"CWColormap","","",null,null],[17,"CWCursor","","",null,null],[17,"InputOutput","","",null,null],[17,"InputOnly","","",null,null],[17,"XIMPreeditArea","","",null,null],[17,"XIMPreeditCallbacks","","",null,null],[17,"XIMPreeditPosition","","",null,null],[17,"XIMPreeditNothing","","",null,null],[17,"XIMPreeditNone","","",null,null],[17,"XIMStatusArea","","",null,null],[17,"XIMStatusCallbacks","","",null,null],[17,"XIMStatusNothing","","",null,null],[17,"XIMStatusNone","","",null,null],[17,"LSBFirst","","",null,null],[17,"MSBFirst","","",null,null],[17,"ParentRelative","","",null,null],[17,"CopyFromParent","","",null,null],[17,"PointerWindow","","",null,null],[17,"InputFocus","","",null,null],[17,"PointerRoot","","",null,null],[17,"AnyPropertyType","","",null,null],[17,"AnyKey","","",null,null],[17,"AnyButton","","",null,null],[17,"AllTemporary","","",null,null],[17,"CurrentTime","","",null,null],[17,"NoSymbol","","",null,null],[17,"X_PROTOCOL","","",null,null],[17,"X_PROTOCOL_REVISION","","",null,null],[17,"XNVaNestedList","","",null,null],[17,"XNQueryInputStyle","","",null,null],[17,"XNClientWindow","","",null,null],[17,"XNInputStyle","","",null,null],[17,"XNFocusWindow","","",null,null],[17,"XNResourceName","","",null,null],[17,"XNResourceClass","","",null,null],[17,"XNGeometryCallback","","",null,null],[17,"XNDestroyCallback","","",null,null],[17,"XNFilterEvents","","",null,null],[17,"XNPreeditStartCallback","","",null,null],[17,"XNPreeditDoneCallback","","",null,null],[17,"XNPreeditDrawCallback","","",null,null],[17,"XNPreeditCaretCallback","","",null,null],[17,"XNPreeditStateNotifyCallback","","",null,null],[17,"XNPreeditAttributes","","",null,null],[17,"XNStatusStartCallback","","",null,null],[17,"XNStatusDoneCallback","","",null,null],[17,"XNStatusDrawCallback","","",null,null],[17,"XNStatusAttributes","","",null,null],[17,"XNArea","","",null,null],[17,"XNAreaNeeded","","",null,null],[17,"XNSpotLocation","","",null,null],[17,"XNColormap","","",null,null],[17,"XNStdColormap","","",null,null],[17,"XNForeground","","",null,null],[17,"XNBackground","","",null,null],[17,"XNBackgroundPixmap","","",null,null],[17,"XNFontSet","","",null,null],[17,"XNLineSpace","","",null,null],[17,"XNCursor","","",null,null],[17,"XNQueryIMValuesList","","",null,null],[17,"XNQueryICValuesList","","",null,null],[17,"XNVisiblePosition","","",null,null],[17,"XNR6PreeditCallback","","",null,null],[17,"XNStringConversionCallback","","",null,null],[17,"XNStringConversion","","",null,null],[17,"XNResetState","","",null,null],[17,"XNHotKey","","",null,null],[17,"XNHotKeyState","","",null,null],[17,"XNPreeditState","","",null,null],[17,"XNSeparatorofNestedList","","",null,null],[17,"XBufferOverflow","","",null,null],[17,"XLookupNone","","",null,null],[17,"XLookupChars","","",null,null],[17,"XLookupKeySym","","",null,null],[17,"XLookupBoth","","",null,null],[17,"XkbActionMessageLength","","",null,null],[17,"XkbOD_Success","","",null,null],[17,"XkbOD_BadLibraryVersion","","",null,null],[17,"XkbOD_ConnectionRefused","","",null,null],[17,"XkbOD_NonXkbServer","","",null,null],[17,"XkbOD_BadServerVersion","","",null,null],[17,"XkbLC_ForceLatinLookup","","",null,null],[17,"XkbLC_ConsumeLookupMods","","",null,null],[17,"XkbLC_AlwaysConsumeShiftAndLock","","",null,null],[17,"XkbLC_IgnoreNewKeyboards","","",null,null],[17,"XkbLC_ControlFallback","","",null,null],[17,"XkbLC_ConsumeKeysOnComposeFail","","",null,null],[17,"XkbLC_ComposeLED","","",null,null],[17,"XkbLC_BeepOnComposeFail","","",null,null],[17,"XkbLC_AllComposeControls","","",null,null],[17,"XkbLC_AllControls","","",null,null],[17,"XkbNewKeyboardNotify","","",null,null],[17,"XkbMapNotify","","",null,null],[17,"XkbStateNotify","","",null,null],[17,"XkbControlsNotify","","",null,null],[17,"XkbIndicatorStateNotify","","",null,null],[17,"XkbIndicatorMapNotify","","",null,null],[17,"XkbNamesNotify","","",null,null],[17,"XkbCompatMapNotify","","",null,null],[17,"XkbBellNotify","","",null,null],[17,"XkbActionMessage","","",null,null],[17,"XkbAccessXNotify","","",null,null],[17,"XkbExtensionDeviceNotify","","",null,null],[17,"XkbNewKeyboardNotifyMask","","",null,null],[17,"XkbMapNotifyMask","","",null,null],[17,"XkbStateNotifyMask","","",null,null],[17,"XkbControlsNotifyMask","","",null,null],[17,"XkbIndicatorStateNotifyMask","","",null,null],[17,"XkbIndicatorMapNotifyMask","","",null,null],[17,"XkbNamesNotifyMask","","",null,null],[17,"XkbCompatMapNotifyMask","","",null,null],[17,"XkbBellNotifyMask","","",null,null],[17,"XkbActionMessageMask","","",null,null],[17,"XkbAccessXNotifyMask","","",null,null],[17,"XkbExtensionDeviceNotifyMask","","",null,null],[17,"XkbAllEventsMask","","",null,null],[11,"open","","",2,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"xevent"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"xevent"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xevent"}}],[11,"get_type","","",3,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xanyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xanyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xanyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xanyevent"}],"output":{"name":"xevent"}}],[11,"from","","",4,{"inputs":[{"name":"xevent"}],"output":{"name":"xanyevent"}}],[11,"from","","",4,{"inputs":[{"name":"xevent"}],"output":{"name":"xanyevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xbuttonevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xbuttonevent"}}],[11,"from","","",3,{"inputs":[{"name":"xbuttonevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xbuttonevent"}],"output":{"name":"xevent"}}],[11,"from","","",5,{"inputs":[{"name":"xevent"}],"output":{"name":"xbuttonevent"}}],[11,"from","","",5,{"inputs":[{"name":"xevent"}],"output":{"name":"xbuttonevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcirculateevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcirculateevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcirculateevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcirculateevent"}],"output":{"name":"xevent"}}],[11,"from","","",6,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculateevent"}}],[11,"from","","",6,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculateevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcirculaterequestevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcirculaterequestevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcirculaterequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcirculaterequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",7,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculaterequestevent"}}],[11,"from","","",7,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculaterequestevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xclientmessageevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xclientmessageevent"}}],[11,"from","","",3,{"inputs":[{"name":"xclientmessageevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xclientmessageevent"}],"output":{"name":"xevent"}}],[11,"from","","",8,{"inputs":[{"name":"xevent"}],"output":{"name":"xclientmessageevent"}}],[11,"from","","",8,{"inputs":[{"name":"xevent"}],"output":{"name":"xclientmessageevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcolormapevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcolormapevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcolormapevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcolormapevent"}],"output":{"name":"xevent"}}],[11,"from","","",9,{"inputs":[{"name":"xevent"}],"output":{"name":"xcolormapevent"}}],[11,"from","","",9,{"inputs":[{"name":"xevent"}],"output":{"name":"xcolormapevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xconfigureevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xconfigureevent"}}],[11,"from","","",3,{"inputs":[{"name":"xconfigureevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xconfigureevent"}],"output":{"name":"xevent"}}],[11,"from","","",10,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigureevent"}}],[11,"from","","",10,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigureevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xconfigurerequestevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xconfigurerequestevent"}}],[11,"from","","",3,{"inputs":[{"name":"xconfigurerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xconfigurerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",11,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigurerequestevent"}}],[11,"from","","",11,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigurerequestevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcreatewindowevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcreatewindowevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcreatewindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcreatewindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",12,{"inputs":[{"name":"xevent"}],"output":{"name":"xcreatewindowevent"}}],[11,"from","","",12,{"inputs":[{"name":"xevent"}],"output":{"name":"xcreatewindowevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcrossingevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xcrossingevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcrossingevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xcrossingevent"}],"output":{"name":"xevent"}}],[11,"from","","",13,{"inputs":[{"name":"xevent"}],"output":{"name":"xcrossingevent"}}],[11,"from","","",13,{"inputs":[{"name":"xevent"}],"output":{"name":"xcrossingevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xdestroywindowevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xdestroywindowevent"}}],[11,"from","","",3,{"inputs":[{"name":"xdestroywindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xdestroywindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",14,{"inputs":[{"name":"xevent"}],"output":{"name":"xdestroywindowevent"}}],[11,"from","","",14,{"inputs":[{"name":"xevent"}],"output":{"name":"xdestroywindowevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xerrorevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xerrorevent"}}],[11,"from","","",3,{"inputs":[{"name":"xerrorevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xerrorevent"}],"output":{"name":"xevent"}}],[11,"from","","",15,{"inputs":[{"name":"xevent"}],"output":{"name":"xerrorevent"}}],[11,"from","","",15,{"inputs":[{"name":"xevent"}],"output":{"name":"xerrorevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xexposeevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xexposeevent"}}],[11,"from","","",3,{"inputs":[{"name":"xexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",16,{"inputs":[{"name":"xevent"}],"output":{"name":"xexposeevent"}}],[11,"from","","",16,{"inputs":[{"name":"xevent"}],"output":{"name":"xexposeevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xfocuschangeevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xfocuschangeevent"}}],[11,"from","","",3,{"inputs":[{"name":"xfocuschangeevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xfocuschangeevent"}],"output":{"name":"xevent"}}],[11,"from","","",17,{"inputs":[{"name":"xevent"}],"output":{"name":"xfocuschangeevent"}}],[11,"from","","",17,{"inputs":[{"name":"xevent"}],"output":{"name":"xfocuschangeevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xgenericeventcookie"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xgenericeventcookie"}}],[11,"from","","",3,{"inputs":[{"name":"xgenericeventcookie"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xgenericeventcookie"}],"output":{"name":"xevent"}}],[11,"from","","",69,{"inputs":[{"name":"xevent"}],"output":{"name":"xgenericeventcookie"}}],[11,"from","","",69,{"inputs":[{"name":"xevent"}],"output":{"name":"xgenericeventcookie"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"from","","",3,{"inputs":[{"name":"xgraphicsexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xgraphicsexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",18,{"inputs":[{"name":"xevent"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"from","","",18,{"inputs":[{"name":"xevent"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xgravityevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xgravityevent"}}],[11,"from","","",3,{"inputs":[{"name":"xgravityevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xgravityevent"}],"output":{"name":"xevent"}}],[11,"from","","",19,{"inputs":[{"name":"xevent"}],"output":{"name":"xgravityevent"}}],[11,"from","","",19,{"inputs":[{"name":"xevent"}],"output":{"name":"xgravityevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xkeyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xkeyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xkeyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xkeyevent"}],"output":{"name":"xevent"}}],[11,"from","","",20,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeyevent"}}],[11,"from","","",20,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeyevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xkeymapevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xkeymapevent"}}],[11,"from","","",3,{"inputs":[{"name":"xkeymapevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xkeymapevent"}],"output":{"name":"xevent"}}],[11,"from","","",21,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeymapevent"}}],[11,"from","","",21,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeymapevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmapevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmapevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",22,{"inputs":[{"name":"xevent"}],"output":{"name":"xmapevent"}}],[11,"from","","",22,{"inputs":[{"name":"xevent"}],"output":{"name":"xmapevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmappingevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmappingevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmappingevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmappingevent"}],"output":{"name":"xevent"}}],[11,"from","","",23,{"inputs":[{"name":"xevent"}],"output":{"name":"xmappingevent"}}],[11,"from","","",23,{"inputs":[{"name":"xevent"}],"output":{"name":"xmappingevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmaprequestevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmaprequestevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmaprequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmaprequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",24,{"inputs":[{"name":"xevent"}],"output":{"name":"xmaprequestevent"}}],[11,"from","","",24,{"inputs":[{"name":"xevent"}],"output":{"name":"xmaprequestevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmotionevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xmotionevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmotionevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xmotionevent"}],"output":{"name":"xevent"}}],[11,"from","","",25,{"inputs":[{"name":"xevent"}],"output":{"name":"xmotionevent"}}],[11,"from","","",25,{"inputs":[{"name":"xevent"}],"output":{"name":"xmotionevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xnoexposeevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xnoexposeevent"}}],[11,"from","","",3,{"inputs":[{"name":"xnoexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xnoexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",26,{"inputs":[{"name":"xevent"}],"output":{"name":"xnoexposeevent"}}],[11,"from","","",26,{"inputs":[{"name":"xevent"}],"output":{"name":"xnoexposeevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xpropertyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xpropertyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xpropertyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xpropertyevent"}],"output":{"name":"xevent"}}],[11,"from","","",27,{"inputs":[{"name":"xevent"}],"output":{"name":"xpropertyevent"}}],[11,"from","","",27,{"inputs":[{"name":"xevent"}],"output":{"name":"xpropertyevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xreparentevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xreparentevent"}}],[11,"from","","",3,{"inputs":[{"name":"xreparentevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xreparentevent"}],"output":{"name":"xevent"}}],[11,"from","","",28,{"inputs":[{"name":"xevent"}],"output":{"name":"xreparentevent"}}],[11,"from","","",28,{"inputs":[{"name":"xevent"}],"output":{"name":"xreparentevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xresizerequestevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xresizerequestevent"}}],[11,"from","","",3,{"inputs":[{"name":"xresizerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xresizerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",29,{"inputs":[{"name":"xevent"}],"output":{"name":"xresizerequestevent"}}],[11,"from","","",29,{"inputs":[{"name":"xevent"}],"output":{"name":"xresizerequestevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xselectionclearevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xselectionclearevent"}}],[11,"from","","",3,{"inputs":[{"name":"xselectionclearevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xselectionclearevent"}],"output":{"name":"xevent"}}],[11,"from","","",30,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionclearevent"}}],[11,"from","","",30,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionclearevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xselectionevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xselectionevent"}}],[11,"from","","",3,{"inputs":[{"name":"xselectionevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xselectionevent"}],"output":{"name":"xevent"}}],[11,"from","","",31,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionevent"}}],[11,"from","","",31,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xselectionrequestevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xselectionrequestevent"}}],[11,"from","","",3,{"inputs":[{"name":"xselectionrequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xselectionrequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",32,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionrequestevent"}}],[11,"from","","",32,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionrequestevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xunmapevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xunmapevent"}}],[11,"from","","",3,{"inputs":[{"name":"xunmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xunmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",33,{"inputs":[{"name":"xevent"}],"output":{"name":"xunmapevent"}}],[11,"from","","",33,{"inputs":[{"name":"xevent"}],"output":{"name":"xunmapevent"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xvisibilityevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xvisibilityevent"}}],[11,"from","","",3,{"inputs":[{"name":"xvisibilityevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xvisibilityevent"}],"output":{"name":"xevent"}}],[11,"from","","",34,{"inputs":[{"name":"xevent"}],"output":{"name":"xvisibilityevent"}}],[11,"from","","",34,{"inputs":[{"name":"xevent"}],"output":{"name":"xvisibilityevent"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"xanyevent"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"xanyevent"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"xanyevent"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"xbuttonevent"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"xbuttonevent"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"xbuttonevent"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"xcirculateevent"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"xcirculateevent"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"xcirculateevent"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"xcirculaterequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"xcirculaterequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"xcirculaterequestevent"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"xclientmessageevent"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"xclientmessageevent"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"xclientmessageevent"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"xcolormapevent"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"xcolormapevent"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"xcolormapevent"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"xconfigureevent"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"xconfigureevent"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"xconfigureevent"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"xconfigurerequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"xconfigurerequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"xconfigurerequestevent"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"xcreatewindowevent"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"xcreatewindowevent"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"xcreatewindowevent"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"xcrossingevent"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"xcrossingevent"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"xcrossingevent"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"xdestroywindowevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"xdestroywindowevent"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"xdestroywindowevent"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"xerrorevent"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"xerrorevent"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"xerrorevent"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"xexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"xexposeevent"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"xexposeevent"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"xfocuschangeevent"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"xfocuschangeevent"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"xfocuschangeevent"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"xgraphicsexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"xgraphicsexposeevent"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"xgravityevent"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"xgravityevent"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"xgravityevent"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"xkeyevent"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"xkeyevent"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"xkeyevent"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"xkeymapevent"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"xkeymapevent"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"xkeymapevent"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"xmapevent"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"xmapevent"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"xmapevent"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"xmappingevent"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"xmappingevent"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"xmappingevent"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"xmaprequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"xmaprequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"xmaprequestevent"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"xmotionevent"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"xmotionevent"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"xmotionevent"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"xnoexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"xnoexposeevent"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"xnoexposeevent"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"xpropertyevent"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"xpropertyevent"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"xpropertyevent"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"xreparentevent"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"xreparentevent"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"xreparentevent"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"xresizerequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"xresizerequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"xresizerequestevent"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"xselectionclearevent"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"xselectionclearevent"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"xselectionclearevent"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"xselectionevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"xselectionevent"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xselectionevent"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"xselectionrequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"xselectionrequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"xselectionrequestevent"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"xunmapevent"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"xunmapevent"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"xunmapevent"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"xvisibilityevent"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"xvisibilityevent"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"xvisibilityevent"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"_xkbdesc"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"_xkbdesc"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"_xkbdesc"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"_xkbkeyaliasrec"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"_xkbkeyaliasrec"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"_xkbkeyaliasrec"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"_xkbkeynamerec"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"_xkbkeynamerec"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"_xkbkeynamerec"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"_xkbnamesrec"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"_xkbnamesrec"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"_xkbnamesrec"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"xkbanyevent"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"xkbanyevent"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"xkbanyevent"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"xkbnewkeyboardnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"xkbnewkeyboardnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"xkbnewkeyboardnotifyevent"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"_xkbmapnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"_xkbmapnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"_xkbmapnotifyevent"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"xkbstatenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"xkbstatenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"xkbstatenotifyevent"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"_xkbcontrolsnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"_xkbcontrolsnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"_xkbcontrolsnotifyevent"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"xkbindicatornotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"xkbindicatornotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"xkbindicatornotifyevent"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"_xkbnamesnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"_xkbnamesnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"_xkbnamesnotifyevent"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"xkbcompatmapnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"xkbcompatmapnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"xkbcompatmapnotifyevent"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"xkbbellnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"xkbbellnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"xkbbellnotifyevent"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"xkbactionmessageevent"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"xkbactionmessageevent"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"xkbactionmessageevent"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"xkbaccessxnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"xkbaccessxnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"xkbaccessxnotifyevent"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"_xkbextensiondevicenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"_xkbextensiondevicenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"_xkbextensiondevicenotifyevent"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"xkbevent"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"xkbevent"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"xkbevent"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"screen"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"screen"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"screenformat"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"screenformat"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"screenformat"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"visual"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"visual"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"visual"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"xarc"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"xarc"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"xarc"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"xchar2b"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"xchar2b"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"xchar2b"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"xcharstruct"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"xcharstruct"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"xcharstruct"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"xclasshint"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"xclasshint"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"xclasshint"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"xcolor"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"xcolor"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"xcolor"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"xcomposestatus"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"xcomposestatus"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"xcomposestatus"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"xextcodes"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"xextcodes"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"xextcodes"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"xfontprop"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"xfontprop"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"xfontprop"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"xfontsetextents"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"xfontsetextents"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"xfontsetextents"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"xfontstruct"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"xfontstruct"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"xfontstruct"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"xgcvalues"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"xgcvalues"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"xgcvalues"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"xgenericeventcookie"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"xgenericeventcookie"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"xgenericeventcookie"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"xhostaddress"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"xhostaddress"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"xhostaddress"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"xiconsize"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"xiconsize"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"xiconsize"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"ximage"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"ximage"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"ximage"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"xkeyboardcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"xkeyboardcontrol"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"xkeyboardcontrol"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"xkeyboardstate"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"xkeyboardstate"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"xkeyboardstate"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"xmbtextitem"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"xmbtextitem"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"xmbtextitem"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"xmodifierkeymap"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"xmodifierkeymap"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"xmodifierkeymap"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"xomcharsetlist"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"xomcharsetlist"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"xomcharsetlist"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"xpixmapformatvalues"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"xpixmapformatvalues"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"xpixmapformatvalues"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"xpoint"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"xpoint"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"xpoint"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"xrectangle"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"xrectangle"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"xrectangle"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"xrmoptiondescrec"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"xrmoptiondescrec"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"xrmoptiondescrec"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"xrmvalue"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"xrmvalue"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"xrmvalue"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"xsegment"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"xsegment"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"xsegment"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"xsetwindowattributes"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"xsetwindowattributes"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"xsetwindowattributes"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"xsizehints"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"xsizehints"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"xsizehints"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"xstandardcolormap"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"xstandardcolormap"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"xstandardcolormap"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"xtextitem"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"xtextitem"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"xtextitem"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"xtextitem16"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"xtextitem16"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"xtextitem16"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"xtextproperty"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"xtextproperty"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"xtextproperty"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"xtimecoord"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"xtimecoord"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"xtimecoord"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"xvisualinfo"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"xvisualinfo"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"xvisualinfo"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"xwctextitem"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"xwctextitem"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"xwctextitem"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"xwindowattributes"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"xwindowattributes"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"xwindowattributes"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"xwindowchanges"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"xwindowchanges"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"xwindowchanges"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"xwmhints"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"xwmhints"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"xwmhints"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"aspectratio"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"aspectratio"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"aspectratio"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"clientmessagedata"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"clientmessagedata"}],"output":{"name":"bool"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"clientmessagedata"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"clientmessagedata"}}],[11,"as_bytes","","",99,null],[11,"as_bytes_mut","","",99,null],[11,"as_longs","","",99,null],[11,"as_longs_mut","","",99,null],[11,"as_shorts","","",99,null],[11,"as_shorts_mut","","",99,null],[11,"get_byte","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_char"}}],[11,"get_long","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_long"}}],[11,"get_short","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_short"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"clientmessagedata"}}],[11,"set_byte","","",99,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"c_char"}],"output":null}],[11,"set_long","","",99,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"c_long"}],"output":null}],[11,"set_short","","",99,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"c_short"}],"output":null}],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"imagefns"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"imagefns"}],"output":{"name":"bool"}}],[0,"dpms","x11_dl","",null,null],[3,"Xext","x11_dl::dpms","",null,null],[12,"DPMSQueryExtension","","",100,null],[12,"DPMSGetVersion","","",100,null],[12,"DPMSCapable","","",100,null],[12,"DPMSSetTimeouts","","",100,null],[12,"DPMSGetTimeouts","","",100,null],[12,"DPMSEnable","","",100,null],[12,"DPMSDisable","","",100,null],[12,"DPMSForceLevel","","",100,null],[12,"DPMSInfo","","",100,null],[17,"DPMSMajorVersion","","",null,null],[17,"DPMSMinorVersion","","",null,null],[17,"DPMSExtensionName","","",null,null],[17,"DPMSModeOn","","",null,null],[17,"DPMSModeStandby","","",null,null],[17,"DPMSModeSuspend","","",null,null],[17,"DPMSModeOff","","",null,null],[11,"open","","",100,{"inputs":[],"output":{"name":"result"}}],[0,"glx","x11_dl","",null,null],[3,"Glx","x11_dl::glx","",null,null],[12,"glXChooseFBConfig","","",101,null],[12,"glXChooseVisual","","",101,null],[12,"glXCopyContext","","",101,null],[12,"glXCreateContext","","",101,null],[12,"glXCreateGLXPixmap","","",101,null],[12,"glXCreateNewContext","","",101,null],[12,"glXCreatePbuffer","","",101,null],[12,"glXCreatePixmap","","",101,null],[12,"glXCreateWindow","","",101,null],[12,"glXDestroyContext","","",101,null],[12,"glXDestroyGLXPixmap","","",101,null],[12,"glXDestroyPbuffer","","",101,null],[12,"glXDestroyPixmap","","",101,null],[12,"glXDestroyWindow","","",101,null],[12,"glXGetClientString","","",101,null],[12,"glXGetConfig","","",101,null],[12,"glXGetCurrentContext","","",101,null],[12,"glXGetCurrentDisplay","","",101,null],[12,"glXGetCurrentDrawable","","",101,null],[12,"glXGetCurrentReadDrawable","","",101,null],[12,"glXGetFBConfigAttrib","","",101,null],[12,"glXGetFBConfigs","","",101,null],[12,"glXGetProcAddress","","",101,null],[12,"glXGetSelectedEvent","","",101,null],[12,"glXGetVisualFromFBConfig","","",101,null],[12,"glXIsDirect","","",101,null],[12,"glXMakeContextCurrent","","",101,null],[12,"glXMakeCurrent","","",101,null],[12,"glXQueryContext","","",101,null],[12,"glXQueryDrawable","","",101,null],[12,"glXQueryExtension","","",101,null],[12,"glXQueryExtensionsString","","",101,null],[12,"glXQueryServerString","","",101,null],[12,"glXQueryVersion","","",101,null],[12,"glXSelectEvent","","",101,null],[12,"glXSwapBuffers","","",101,null],[12,"glXUseXFont","","",101,null],[12,"glXWaitGL","","",101,null],[12,"glXWaitX","","",101,null],[3,"__GLXcontextRec","","",null,null],[3,"__GLXFBConfigRec","","",null,null],[0,"arb","","",null,null],[17,"GLX_CONTEXT_MAJOR_VERSION_ARB","x11_dl::glx::arb","",null,null],[17,"GLX_CONTEXT_MINOR_VERSION_ARB","","",null,null],[17,"GLX_CONTEXT_FLAGS_ARB","","",null,null],[17,"GLX_CONTEXT_PROFILE_MASK_ARB","","",null,null],[17,"GLX_CONTEXT_DEBUG_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_CORE_PROFILE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB","","",null,null],[0,"ext","x11_dl::glx","",null,null],[17,"GLX_SWAP_INTERVAL_EXT","x11_dl::glx::ext","",null,null],[17,"GLX_MAX_SWAP_INTERVAL_EXT","","",null,null],[6,"GLXContext","x11_dl::glx","",null,null],[6,"GLXContextID","","",null,null],[6,"GLXDrawable","","",null,null],[6,"GLXFBConfig","","",null,null],[6,"GLXFBConfigID","","",null,null],[6,"GLXPbuffer","","",null,null],[6,"GLXPixmap","","",null,null],[6,"GLXWindow","","",null,null],[17,"GLX_SLOW_CONFIG","","",null,null],[17,"GLX_NON_CONFORMANT_CONFIG","","",null,null],[17,"GLX_WINDOW_BIT","","",null,null],[17,"GLX_PIXMAP_BIT","","",null,null],[17,"GLX_PBUFFER_BIT","","",null,null],[17,"GLX_USE_GL","","",null,null],[17,"GLX_BUFFER_SIZE","","",null,null],[17,"GLX_LEVEL","","",null,null],[17,"GLX_RGBA","","",null,null],[17,"GLX_DOUBLEBUFFER","","",null,null],[17,"GLX_STEREO","","",null,null],[17,"GLX_AUX_BUFFERS","","",null,null],[17,"GLX_RED_SIZE","","",null,null],[17,"GLX_GREEN_SIZE","","",null,null],[17,"GLX_BLUE_SIZE","","",null,null],[17,"GLX_ALPHA_SIZE","","",null,null],[17,"GLX_DEPTH_SIZE","","",null,null],[17,"GLX_STENCIL_SIZE","","",null,null],[17,"GLX_ACCUM_RED_SIZE","","",null,null],[17,"GLX_ACCUM_GREEN_SIZE","","",null,null],[17,"GLX_ACCUM_BLUE_SIZE","","",null,null],[17,"GLX_ACCUM_ALPHA_SIZE","","",null,null],[17,"GLX_CONFIG_CAVEAT","","",null,null],[17,"GLX_X_VISUAL_TYPE","","",null,null],[17,"GLX_TRANSPARENT_TYPE","","",null,null],[17,"GLX_TRANSPARENT_INDEX_VALUE","","",null,null],[17,"GLX_TRANSPARENT_RED_VALUE","","",null,null],[17,"GLX_TRANSPARENT_GREEN_VALUE","","",null,null],[17,"GLX_TRANSPARENT_BLUE_VALUE","","",null,null],[17,"GLX_TRANSPARENT_ALPHA_VALUE","","",null,null],[17,"GLX_DRAWABLE_TYPE","","",null,null],[17,"GLX_RENDER_TYPE","","",null,null],[17,"GLX_X_RENDERABLE","","",null,null],[17,"GLX_FBCONFIG_ID","","",null,null],[17,"GLX_DONT_CARE","","",null,null],[17,"GLX_NONE","","",null,null],[17,"GLX_RGBA_BIT","","",null,null],[17,"GLX_COLOR_INDEX_BIT","","",null,null],[17,"GLX_TRANSPARENT_RGB","","",null,null],[17,"GLX_TRANSPARENT_INDEX","","",null,null],[17,"GLX_TRUE_COLOR","","",null,null],[17,"GLX_DIRECT_COLOR","","",null,null],[17,"GLX_PSEUDO_COLOR","","",null,null],[17,"GLX_STATIC_COLOR","","",null,null],[17,"GLX_GRAY_SCALE","","",null,null],[17,"GLX_STATIC_GRAY","","",null,null],[11,"open","","",101,{"inputs":[],"output":{"name":"result"}}],[0,"keysym","x11_dl","",null,null],[17,"XK_BackSpace","x11_dl::keysym","",null,null],[17,"XK_Tab","","",null,null],[17,"XK_Linefeed","","",null,null],[17,"XK_Clear","","",null,null],[17,"XK_Return","","",null,null],[17,"XK_Pause","","",null,null],[17,"XK_Scroll_Lock","","",null,null],[17,"XK_Sys_Req","","",null,null],[17,"XK_Escape","","",null,null],[17,"XK_Delete","","",null,null],[17,"XK_Multi_key","","",null,null],[17,"XK_Kanji","","",null,null],[17,"XK_Muhenkan","","",null,null],[17,"XK_Henkan_Mode","","",null,null],[17,"XK_Henkan","","",null,null],[17,"XK_Romaji","","",null,null],[17,"XK_Hiragana","","",null,null],[17,"XK_Katakana","","",null,null],[17,"XK_Hiragana_Katakana","","",null,null],[17,"XK_Zenkaku","","",null,null],[17,"XK_Hankaku","","",null,null],[17,"XK_Zenkaku_Hankaku","","",null,null],[17,"XK_Touroku","","",null,null],[17,"XK_Massyo","","",null,null],[17,"XK_Kana_Lock","","",null,null],[17,"XK_Kana_Shift","","",null,null],[17,"XK_Eisu_Shift","","",null,null],[17,"XK_Eisu_toggle","","",null,null],[17,"XK_Home","","",null,null],[17,"XK_Left","","",null,null],[17,"XK_Up","","",null,null],[17,"XK_Right","","",null,null],[17,"XK_Down","","",null,null],[17,"XK_Prior","","",null,null],[17,"XK_Page_Up","","",null,null],[17,"XK_Next","","",null,null],[17,"XK_Page_Down","","",null,null],[17,"XK_End","","",null,null],[17,"XK_Begin","","",null,null],[17,"XK_Win_L","","",null,null],[17,"XK_Win_R","","",null,null],[17,"XK_App","","",null,null],[17,"XK_Select","","",null,null],[17,"XK_Print","","",null,null],[17,"XK_Execute","","",null,null],[17,"XK_Insert","","",null,null],[17,"XK_Undo","","",null,null],[17,"XK_Redo","","",null,null],[17,"XK_Menu","","",null,null],[17,"XK_Find","","",null,null],[17,"XK_Cancel","","",null,null],[17,"XK_Help","","",null,null],[17,"XK_Break","","",null,null],[17,"XK_Mode_switch","","",null,null],[17,"XK_script_switch","","",null,null],[17,"XK_Num_Lock","","",null,null],[17,"XK_KP_Space","","",null,null],[17,"XK_KP_Tab","","",null,null],[17,"XK_KP_Enter","","",null,null],[17,"XK_KP_F1","","",null,null],[17,"XK_KP_F2","","",null,null],[17,"XK_KP_F3","","",null,null],[17,"XK_KP_F4","","",null,null],[17,"XK_KP_Home","","",null,null],[17,"XK_KP_Left","","",null,null],[17,"XK_KP_Up","","",null,null],[17,"XK_KP_Right","","",null,null],[17,"XK_KP_Down","","",null,null],[17,"XK_KP_Prior","","",null,null],[17,"XK_KP_Page_Up","","",null,null],[17,"XK_KP_Next","","",null,null],[17,"XK_KP_Page_Down","","",null,null],[17,"XK_KP_End","","",null,null],[17,"XK_KP_Begin","","",null,null],[17,"XK_KP_Insert","","",null,null],[17,"XK_KP_Delete","","",null,null],[17,"XK_KP_Equal","","",null,null],[17,"XK_KP_Multiply","","",null,null],[17,"XK_KP_Add","","",null,null],[17,"XK_KP_Separator","","",null,null],[17,"XK_KP_Subtract","","",null,null],[17,"XK_KP_Decimal","","",null,null],[17,"XK_KP_Divide","","",null,null],[17,"XK_KP_0","","",null,null],[17,"XK_KP_1","","",null,null],[17,"XK_KP_2","","",null,null],[17,"XK_KP_3","","",null,null],[17,"XK_KP_4","","",null,null],[17,"XK_KP_5","","",null,null],[17,"XK_KP_6","","",null,null],[17,"XK_KP_7","","",null,null],[17,"XK_KP_8","","",null,null],[17,"XK_KP_9","","",null,null],[17,"XK_F1","","",null,null],[17,"XK_F2","","",null,null],[17,"XK_F3","","",null,null],[17,"XK_F4","","",null,null],[17,"XK_F5","","",null,null],[17,"XK_F6","","",null,null],[17,"XK_F7","","",null,null],[17,"XK_F8","","",null,null],[17,"XK_F9","","",null,null],[17,"XK_F10","","",null,null],[17,"XK_F11","","",null,null],[17,"XK_L1","","",null,null],[17,"XK_F12","","",null,null],[17,"XK_L2","","",null,null],[17,"XK_F13","","",null,null],[17,"XK_L3","","",null,null],[17,"XK_F14","","",null,null],[17,"XK_L4","","",null,null],[17,"XK_F15","","",null,null],[17,"XK_L5","","",null,null],[17,"XK_F16","","",null,null],[17,"XK_L6","","",null,null],[17,"XK_F17","","",null,null],[17,"XK_L7","","",null,null],[17,"XK_F18","","",null,null],[17,"XK_L8","","",null,null],[17,"XK_F19","","",null,null],[17,"XK_L9","","",null,null],[17,"XK_F20","","",null,null],[17,"XK_L10","","",null,null],[17,"XK_F21","","",null,null],[17,"XK_R1","","",null,null],[17,"XK_F22","","",null,null],[17,"XK_R2","","",null,null],[17,"XK_F23","","",null,null],[17,"XK_R3","","",null,null],[17,"XK_F24","","",null,null],[17,"XK_R4","","",null,null],[17,"XK_F25","","",null,null],[17,"XK_R5","","",null,null],[17,"XK_F26","","",null,null],[17,"XK_R6","","",null,null],[17,"XK_F27","","",null,null],[17,"XK_R7","","",null,null],[17,"XK_F28","","",null,null],[17,"XK_R8","","",null,null],[17,"XK_F29","","",null,null],[17,"XK_R9","","",null,null],[17,"XK_F30","","",null,null],[17,"XK_R10","","",null,null],[17,"XK_F31","","",null,null],[17,"XK_R11","","",null,null],[17,"XK_F32","","",null,null],[17,"XK_R12","","",null,null],[17,"XK_F33","","",null,null],[17,"XK_R13","","",null,null],[17,"XK_F34","","",null,null],[17,"XK_R14","","",null,null],[17,"XK_F35","","",null,null],[17,"XK_R15","","",null,null],[17,"XK_Shift_L","","",null,null],[17,"XK_Shift_R","","",null,null],[17,"XK_Control_L","","",null,null],[17,"XK_Control_R","","",null,null],[17,"XK_Caps_Lock","","",null,null],[17,"XK_Shift_Lock","","",null,null],[17,"XK_Meta_L","","",null,null],[17,"XK_Meta_R","","",null,null],[17,"XK_Alt_L","","",null,null],[17,"XK_Alt_R","","",null,null],[17,"XK_Super_L","","",null,null],[17,"XK_Super_R","","",null,null],[17,"XK_Hyper_L","","",null,null],[17,"XK_Hyper_R","","",null,null],[17,"XK_space","","",null,null],[17,"XK_exclam","","",null,null],[17,"XK_quotedbl","","",null,null],[17,"XK_numbersign","","",null,null],[17,"XK_dollar","","",null,null],[17,"XK_percent","","",null,null],[17,"XK_ampersand","","",null,null],[17,"XK_apostrophe","","",null,null],[17,"XK_quoteright","","",null,null],[17,"XK_parenleft","","",null,null],[17,"XK_parenright","","",null,null],[17,"XK_asterisk","","",null,null],[17,"XK_plus","","",null,null],[17,"XK_comma","","",null,null],[17,"XK_minus","","",null,null],[17,"XK_period","","",null,null],[17,"XK_slash","","",null,null],[17,"XK_0","","",null,null],[17,"XK_1","","",null,null],[17,"XK_2","","",null,null],[17,"XK_3","","",null,null],[17,"XK_4","","",null,null],[17,"XK_5","","",null,null],[17,"XK_6","","",null,null],[17,"XK_7","","",null,null],[17,"XK_8","","",null,null],[17,"XK_9","","",null,null],[17,"XK_colon","","",null,null],[17,"XK_semicolon","","",null,null],[17,"XK_less","","",null,null],[17,"XK_equal","","",null,null],[17,"XK_greater","","",null,null],[17,"XK_question","","",null,null],[17,"XK_at","","",null,null],[17,"XK_A","","",null,null],[17,"XK_B","","",null,null],[17,"XK_C","","",null,null],[17,"XK_D","","",null,null],[17,"XK_E","","",null,null],[17,"XK_F","","",null,null],[17,"XK_G","","",null,null],[17,"XK_H","","",null,null],[17,"XK_I","","",null,null],[17,"XK_J","","",null,null],[17,"XK_K","","",null,null],[17,"XK_L","","",null,null],[17,"XK_M","","",null,null],[17,"XK_N","","",null,null],[17,"XK_O","","",null,null],[17,"XK_P","","",null,null],[17,"XK_Q","","",null,null],[17,"XK_R","","",null,null],[17,"XK_S","","",null,null],[17,"XK_T","","",null,null],[17,"XK_U","","",null,null],[17,"XK_V","","",null,null],[17,"XK_W","","",null,null],[17,"XK_X","","",null,null],[17,"XK_Y","","",null,null],[17,"XK_Z","","",null,null],[17,"XK_bracketleft","","",null,null],[17,"XK_backslash","","",null,null],[17,"XK_bracketright","","",null,null],[17,"XK_asciicircum","","",null,null],[17,"XK_underscore","","",null,null],[17,"XK_grave","","",null,null],[17,"XK_quoteleft","","",null,null],[17,"XK_a","","",null,null],[17,"XK_b","","",null,null],[17,"XK_c","","",null,null],[17,"XK_d","","",null,null],[17,"XK_e","","",null,null],[17,"XK_f","","",null,null],[17,"XK_g","","",null,null],[17,"XK_h","","",null,null],[17,"XK_i","","",null,null],[17,"XK_j","","",null,null],[17,"XK_k","","",null,null],[17,"XK_l","","",null,null],[17,"XK_m","","",null,null],[17,"XK_n","","",null,null],[17,"XK_o","","",null,null],[17,"XK_p","","",null,null],[17,"XK_q","","",null,null],[17,"XK_r","","",null,null],[17,"XK_s","","",null,null],[17,"XK_t","","",null,null],[17,"XK_u","","",null,null],[17,"XK_v","","",null,null],[17,"XK_w","","",null,null],[17,"XK_x","","",null,null],[17,"XK_y","","",null,null],[17,"XK_z","","",null,null],[17,"XK_braceleft","","",null,null],[17,"XK_bar","","",null,null],[17,"XK_braceright","","",null,null],[17,"XK_asciitilde","","",null,null],[17,"XK_nobreakspace","","",null,null],[17,"XK_exclamdown","","",null,null],[17,"XK_cent","","",null,null],[17,"XK_sterling","","",null,null],[17,"XK_currency","","",null,null],[17,"XK_yen","","",null,null],[17,"XK_brokenbar","","",null,null],[17,"XK_section","","",null,null],[17,"XK_diaeresis","","",null,null],[17,"XK_copyright","","",null,null],[17,"XK_ordfeminine","","",null,null],[17,"XK_guillemotleft","","",null,null],[17,"XK_notsign","","",null,null],[17,"XK_hyphen","","",null,null],[17,"XK_registered","","",null,null],[17,"XK_macron","","",null,null],[17,"XK_degree","","",null,null],[17,"XK_plusminus","","",null,null],[17,"XK_twosuperior","","",null,null],[17,"XK_threesuperior","","",null,null],[17,"XK_acute","","",null,null],[17,"XK_mu","","",null,null],[17,"XK_paragraph","","",null,null],[17,"XK_periodcentered","","",null,null],[17,"XK_cedilla","","",null,null],[17,"XK_onesuperior","","",null,null],[17,"XK_masculine","","",null,null],[17,"XK_guillemotright","","",null,null],[17,"XK_onequarter","","",null,null],[17,"XK_onehalf","","",null,null],[17,"XK_threequarters","","",null,null],[17,"XK_questiondown","","",null,null],[17,"XK_Agrave","","",null,null],[17,"XK_Aacute","","",null,null],[17,"XK_Acircumflex","","",null,null],[17,"XK_Atilde","","",null,null],[17,"XK_Adiaeresis","","",null,null],[17,"XK_Aring","","",null,null],[17,"XK_AE","","",null,null],[17,"XK_Ccedilla","","",null,null],[17,"XK_Egrave","","",null,null],[17,"XK_Eacute","","",null,null],[17,"XK_Ecircumflex","","",null,null],[17,"XK_Ediaeresis","","",null,null],[17,"XK_Igrave","","",null,null],[17,"XK_Iacute","","",null,null],[17,"XK_Icircumflex","","",null,null],[17,"XK_Idiaeresis","","",null,null],[17,"XK_ETH","","",null,null],[17,"XK_Eth","","",null,null],[17,"XK_Ntilde","","",null,null],[17,"XK_Ograve","","",null,null],[17,"XK_Oacute","","",null,null],[17,"XK_Ocircumflex","","",null,null],[17,"XK_Otilde","","",null,null],[17,"XK_Odiaeresis","","",null,null],[17,"XK_multiply","","",null,null],[17,"XK_Ooblique","","",null,null],[17,"XK_Ugrave","","",null,null],[17,"XK_Uacute","","",null,null],[17,"XK_Ucircumflex","","",null,null],[17,"XK_Udiaeresis","","",null,null],[17,"XK_Yacute","","",null,null],[17,"XK_THORN","","",null,null],[17,"XK_Thorn","","",null,null],[17,"XK_ssharp","","",null,null],[17,"XK_agrave","","",null,null],[17,"XK_aacute","","",null,null],[17,"XK_acircumflex","","",null,null],[17,"XK_atilde","","",null,null],[17,"XK_adiaeresis","","",null,null],[17,"XK_aring","","",null,null],[17,"XK_ae","","",null,null],[17,"XK_ccedilla","","",null,null],[17,"XK_egrave","","",null,null],[17,"XK_eacute","","",null,null],[17,"XK_ecircumflex","","",null,null],[17,"XK_ediaeresis","","",null,null],[17,"XK_igrave","","",null,null],[17,"XK_iacute","","",null,null],[17,"XK_icircumflex","","",null,null],[17,"XK_idiaeresis","","",null,null],[17,"XK_eth","","",null,null],[17,"XK_ntilde","","",null,null],[17,"XK_ograve","","",null,null],[17,"XK_oacute","","",null,null],[17,"XK_ocircumflex","","",null,null],[17,"XK_otilde","","",null,null],[17,"XK_odiaeresis","","",null,null],[17,"XK_division","","",null,null],[17,"XK_oslash","","",null,null],[17,"XK_ugrave","","",null,null],[17,"XK_uacute","","",null,null],[17,"XK_ucircumflex","","",null,null],[17,"XK_udiaeresis","","",null,null],[17,"XK_yacute","","",null,null],[17,"XK_thorn","","",null,null],[17,"XK_ydiaeresis","","",null,null],[17,"XK_Aogonek","","",null,null],[17,"XK_breve","","",null,null],[17,"XK_Lstroke","","",null,null],[17,"XK_Lcaron","","",null,null],[17,"XK_Sacute","","",null,null],[17,"XK_Scaron","","",null,null],[17,"XK_Scedilla","","",null,null],[17,"XK_Tcaron","","",null,null],[17,"XK_Zacute","","",null,null],[17,"XK_Zcaron","","",null,null],[17,"XK_Zabovedot","","",null,null],[17,"XK_aogonek","","",null,null],[17,"XK_ogonek","","",null,null],[17,"XK_lstroke","","",null,null],[17,"XK_lcaron","","",null,null],[17,"XK_sacute","","",null,null],[17,"XK_caron","","",null,null],[17,"XK_scaron","","",null,null],[17,"XK_scedilla","","",null,null],[17,"XK_tcaron","","",null,null],[17,"XK_zacute","","",null,null],[17,"XK_doubleacute","","",null,null],[17,"XK_zcaron","","",null,null],[17,"XK_zabovedot","","",null,null],[17,"XK_Racute","","",null,null],[17,"XK_Abreve","","",null,null],[17,"XK_Lacute","","",null,null],[17,"XK_Cacute","","",null,null],[17,"XK_Ccaron","","",null,null],[17,"XK_Eogonek","","",null,null],[17,"XK_Ecaron","","",null,null],[17,"XK_Dcaron","","",null,null],[17,"XK_Dstroke","","",null,null],[17,"XK_Nacute","","",null,null],[17,"XK_Ncaron","","",null,null],[17,"XK_Odoubleacute","","",null,null],[17,"XK_Rcaron","","",null,null],[17,"XK_Uring","","",null,null],[17,"XK_Udoubleacute","","",null,null],[17,"XK_Tcedilla","","",null,null],[17,"XK_racute","","",null,null],[17,"XK_abreve","","",null,null],[17,"XK_lacute","","",null,null],[17,"XK_cacute","","",null,null],[17,"XK_ccaron","","",null,null],[17,"XK_eogonek","","",null,null],[17,"XK_ecaron","","",null,null],[17,"XK_dcaron","","",null,null],[17,"XK_dstroke","","",null,null],[17,"XK_nacute","","",null,null],[17,"XK_ncaron","","",null,null],[17,"XK_odoubleacute","","",null,null],[17,"XK_udoubleacute","","",null,null],[17,"XK_rcaron","","",null,null],[17,"XK_uring","","",null,null],[17,"XK_tcedilla","","",null,null],[17,"XK_abovedot","","",null,null],[17,"XK_Hstroke","","",null,null],[17,"XK_Hcircumflex","","",null,null],[17,"XK_Iabovedot","","",null,null],[17,"XK_Gbreve","","",null,null],[17,"XK_Jcircumflex","","",null,null],[17,"XK_hstroke","","",null,null],[17,"XK_hcircumflex","","",null,null],[17,"XK_idotless","","",null,null],[17,"XK_gbreve","","",null,null],[17,"XK_jcircumflex","","",null,null],[17,"XK_Cabovedot","","",null,null],[17,"XK_Ccircumflex","","",null,null],[17,"XK_Gabovedot","","",null,null],[17,"XK_Gcircumflex","","",null,null],[17,"XK_Ubreve","","",null,null],[17,"XK_Scircumflex","","",null,null],[17,"XK_cabovedot","","",null,null],[17,"XK_ccircumflex","","",null,null],[17,"XK_gabovedot","","",null,null],[17,"XK_gcircumflex","","",null,null],[17,"XK_ubreve","","",null,null],[17,"XK_scircumflex","","",null,null],[17,"XK_kra","","",null,null],[17,"XK_kappa","","",null,null],[17,"XK_Rcedilla","","",null,null],[17,"XK_Itilde","","",null,null],[17,"XK_Lcedilla","","",null,null],[17,"XK_Emacron","","",null,null],[17,"XK_Gcedilla","","",null,null],[17,"XK_Tslash","","",null,null],[17,"XK_rcedilla","","",null,null],[17,"XK_itilde","","",null,null],[17,"XK_lcedilla","","",null,null],[17,"XK_emacron","","",null,null],[17,"XK_gcedilla","","",null,null],[17,"XK_tslash","","",null,null],[17,"XK_ENG","","",null,null],[17,"XK_eng","","",null,null],[17,"XK_Amacron","","",null,null],[17,"XK_Iogonek","","",null,null],[17,"XK_Eabovedot","","",null,null],[17,"XK_Imacron","","",null,null],[17,"XK_Ncedilla","","",null,null],[17,"XK_Omacron","","",null,null],[17,"XK_Kcedilla","","",null,null],[17,"XK_Uogonek","","",null,null],[17,"XK_Utilde","","",null,null],[17,"XK_Umacron","","",null,null],[17,"XK_amacron","","",null,null],[17,"XK_iogonek","","",null,null],[17,"XK_eabovedot","","",null,null],[17,"XK_imacron","","",null,null],[17,"XK_ncedilla","","",null,null],[17,"XK_omacron","","",null,null],[17,"XK_kcedilla","","",null,null],[17,"XK_uogonek","","",null,null],[17,"XK_utilde","","",null,null],[17,"XK_umacron","","",null,null],[17,"XK_overline","","",null,null],[17,"XK_kana_fullstop","","",null,null],[17,"XK_kana_openingbracket","","",null,null],[17,"XK_kana_closingbracket","","",null,null],[17,"XK_kana_comma","","",null,null],[17,"XK_kana_conjunctive","","",null,null],[17,"XK_kana_middledot","","",null,null],[17,"XK_kana_WO","","",null,null],[17,"XK_kana_a","","",null,null],[17,"XK_kana_i","","",null,null],[17,"XK_kana_u","","",null,null],[17,"XK_kana_e","","",null,null],[17,"XK_kana_o","","",null,null],[17,"XK_kana_ya","","",null,null],[17,"XK_kana_yu","","",null,null],[17,"XK_kana_yo","","",null,null],[17,"XK_kana_tsu","","",null,null],[17,"XK_kana_tu","","",null,null],[17,"XK_prolongedsound","","",null,null],[17,"XK_kana_A","","",null,null],[17,"XK_kana_I","","",null,null],[17,"XK_kana_U","","",null,null],[17,"XK_kana_E","","",null,null],[17,"XK_kana_O","","",null,null],[17,"XK_kana_KA","","",null,null],[17,"XK_kana_KI","","",null,null],[17,"XK_kana_KU","","",null,null],[17,"XK_kana_KE","","",null,null],[17,"XK_kana_KO","","",null,null],[17,"XK_kana_SA","","",null,null],[17,"XK_kana_SHI","","",null,null],[17,"XK_kana_SU","","",null,null],[17,"XK_kana_SE","","",null,null],[17,"XK_kana_SO","","",null,null],[17,"XK_kana_TA","","",null,null],[17,"XK_kana_CHI","","",null,null],[17,"XK_kana_TI","","",null,null],[17,"XK_kana_TSU","","",null,null],[17,"XK_kana_TU","","",null,null],[17,"XK_kana_TE","","",null,null],[17,"XK_kana_TO","","",null,null],[17,"XK_kana_NA","","",null,null],[17,"XK_kana_NI","","",null,null],[17,"XK_kana_NU","","",null,null],[17,"XK_kana_NE","","",null,null],[17,"XK_kana_NO","","",null,null],[17,"XK_kana_HA","","",null,null],[17,"XK_kana_HI","","",null,null],[17,"XK_kana_FU","","",null,null],[17,"XK_kana_HU","","",null,null],[17,"XK_kana_HE","","",null,null],[17,"XK_kana_HO","","",null,null],[17,"XK_kana_MA","","",null,null],[17,"XK_kana_MI","","",null,null],[17,"XK_kana_MU","","",null,null],[17,"XK_kana_ME","","",null,null],[17,"XK_kana_MO","","",null,null],[17,"XK_kana_YA","","",null,null],[17,"XK_kana_YU","","",null,null],[17,"XK_kana_YO","","",null,null],[17,"XK_kana_RA","","",null,null],[17,"XK_kana_RI","","",null,null],[17,"XK_kana_RU","","",null,null],[17,"XK_kana_RE","","",null,null],[17,"XK_kana_RO","","",null,null],[17,"XK_kana_WA","","",null,null],[17,"XK_kana_N","","",null,null],[17,"XK_voicedsound","","",null,null],[17,"XK_semivoicedsound","","",null,null],[17,"XK_kana_switch","","",null,null],[17,"XK_Arabic_comma","","",null,null],[17,"XK_Arabic_semicolon","","",null,null],[17,"XK_Arabic_question_mark","","",null,null],[17,"XK_Arabic_hamza","","",null,null],[17,"XK_Arabic_maddaonalef","","",null,null],[17,"XK_Arabic_hamzaonalef","","",null,null],[17,"XK_Arabic_hamzaonwaw","","",null,null],[17,"XK_Arabic_hamzaunderalef","","",null,null],[17,"XK_Arabic_hamzaonyeh","","",null,null],[17,"XK_Arabic_alef","","",null,null],[17,"XK_Arabic_beh","","",null,null],[17,"XK_Arabic_tehmarbuta","","",null,null],[17,"XK_Arabic_teh","","",null,null],[17,"XK_Arabic_theh","","",null,null],[17,"XK_Arabic_jeem","","",null,null],[17,"XK_Arabic_hah","","",null,null],[17,"XK_Arabic_khah","","",null,null],[17,"XK_Arabic_dal","","",null,null],[17,"XK_Arabic_thal","","",null,null],[17,"XK_Arabic_ra","","",null,null],[17,"XK_Arabic_zain","","",null,null],[17,"XK_Arabic_seen","","",null,null],[17,"XK_Arabic_sheen","","",null,null],[17,"XK_Arabic_sad","","",null,null],[17,"XK_Arabic_dad","","",null,null],[17,"XK_Arabic_tah","","",null,null],[17,"XK_Arabic_zah","","",null,null],[17,"XK_Arabic_ain","","",null,null],[17,"XK_Arabic_ghain","","",null,null],[17,"XK_Arabic_tatweel","","",null,null],[17,"XK_Arabic_feh","","",null,null],[17,"XK_Arabic_qaf","","",null,null],[17,"XK_Arabic_kaf","","",null,null],[17,"XK_Arabic_lam","","",null,null],[17,"XK_Arabic_meem","","",null,null],[17,"XK_Arabic_noon","","",null,null],[17,"XK_Arabic_ha","","",null,null],[17,"XK_Arabic_heh","","",null,null],[17,"XK_Arabic_waw","","",null,null],[17,"XK_Arabic_alefmaksura","","",null,null],[17,"XK_Arabic_yeh","","",null,null],[17,"XK_Arabic_fathatan","","",null,null],[17,"XK_Arabic_dammatan","","",null,null],[17,"XK_Arabic_kasratan","","",null,null],[17,"XK_Arabic_fatha","","",null,null],[17,"XK_Arabic_damma","","",null,null],[17,"XK_Arabic_kasra","","",null,null],[17,"XK_Arabic_shadda","","",null,null],[17,"XK_Arabic_sukun","","",null,null],[17,"XK_Arabic_switch","","",null,null],[17,"XK_Serbian_dje","","",null,null],[17,"XK_Macedonia_gje","","",null,null],[17,"XK_Cyrillic_io","","",null,null],[17,"XK_Ukrainian_ie","","",null,null],[17,"XK_Ukranian_je","","",null,null],[17,"XK_Macedonia_dse","","",null,null],[17,"XK_Ukrainian_i","","",null,null],[17,"XK_Ukranian_i","","",null,null],[17,"XK_Ukrainian_yi","","",null,null],[17,"XK_Ukranian_yi","","",null,null],[17,"XK_Cyrillic_je","","",null,null],[17,"XK_Serbian_je","","",null,null],[17,"XK_Cyrillic_lje","","",null,null],[17,"XK_Serbian_lje","","",null,null],[17,"XK_Cyrillic_nje","","",null,null],[17,"XK_Serbian_nje","","",null,null],[17,"XK_Serbian_tshe","","",null,null],[17,"XK_Macedonia_kje","","",null,null],[17,"XK_Byelorussian_shortu","","",null,null],[17,"XK_Cyrillic_dzhe","","",null,null],[17,"XK_Serbian_dze","","",null,null],[17,"XK_numerosign","","",null,null],[17,"XK_Serbian_DJE","","",null,null],[17,"XK_Macedonia_GJE","","",null,null],[17,"XK_Cyrillic_IO","","",null,null],[17,"XK_Ukrainian_IE","","",null,null],[17,"XK_Ukranian_JE","","",null,null],[17,"XK_Macedonia_DSE","","",null,null],[17,"XK_Ukrainian_I","","",null,null],[17,"XK_Ukranian_I","","",null,null],[17,"XK_Ukrainian_YI","","",null,null],[17,"XK_Ukranian_YI","","",null,null],[17,"XK_Cyrillic_JE","","",null,null],[17,"XK_Serbian_JE","","",null,null],[17,"XK_Cyrillic_LJE","","",null,null],[17,"XK_Serbian_LJE","","",null,null],[17,"XK_Cyrillic_NJE","","",null,null],[17,"XK_Serbian_NJE","","",null,null],[17,"XK_Serbian_TSHE","","",null,null],[17,"XK_Macedonia_KJE","","",null,null],[17,"XK_Byelorussian_SHORTU","","",null,null],[17,"XK_Cyrillic_DZHE","","",null,null],[17,"XK_Serbian_DZE","","",null,null],[17,"XK_Cyrillic_yu","","",null,null],[17,"XK_Cyrillic_a","","",null,null],[17,"XK_Cyrillic_be","","",null,null],[17,"XK_Cyrillic_tse","","",null,null],[17,"XK_Cyrillic_de","","",null,null],[17,"XK_Cyrillic_ie","","",null,null],[17,"XK_Cyrillic_ef","","",null,null],[17,"XK_Cyrillic_ghe","","",null,null],[17,"XK_Cyrillic_ha","","",null,null],[17,"XK_Cyrillic_i","","",null,null],[17,"XK_Cyrillic_shorti","","",null,null],[17,"XK_Cyrillic_ka","","",null,null],[17,"XK_Cyrillic_el","","",null,null],[17,"XK_Cyrillic_em","","",null,null],[17,"XK_Cyrillic_en","","",null,null],[17,"XK_Cyrillic_o","","",null,null],[17,"XK_Cyrillic_pe","","",null,null],[17,"XK_Cyrillic_ya","","",null,null],[17,"XK_Cyrillic_er","","",null,null],[17,"XK_Cyrillic_es","","",null,null],[17,"XK_Cyrillic_te","","",null,null],[17,"XK_Cyrillic_u","","",null,null],[17,"XK_Cyrillic_zhe","","",null,null],[17,"XK_Cyrillic_ve","","",null,null],[17,"XK_Cyrillic_softsign","","",null,null],[17,"XK_Cyrillic_yeru","","",null,null],[17,"XK_Cyrillic_ze","","",null,null],[17,"XK_Cyrillic_sha","","",null,null],[17,"XK_Cyrillic_e","","",null,null],[17,"XK_Cyrillic_shcha","","",null,null],[17,"XK_Cyrillic_che","","",null,null],[17,"XK_Cyrillic_hardsign","","",null,null],[17,"XK_Cyrillic_YU","","",null,null],[17,"XK_Cyrillic_A","","",null,null],[17,"XK_Cyrillic_BE","","",null,null],[17,"XK_Cyrillic_TSE","","",null,null],[17,"XK_Cyrillic_DE","","",null,null],[17,"XK_Cyrillic_IE","","",null,null],[17,"XK_Cyrillic_EF","","",null,null],[17,"XK_Cyrillic_GHE","","",null,null],[17,"XK_Cyrillic_HA","","",null,null],[17,"XK_Cyrillic_I","","",null,null],[17,"XK_Cyrillic_SHORTI","","",null,null],[17,"XK_Cyrillic_KA","","",null,null],[17,"XK_Cyrillic_EL","","",null,null],[17,"XK_Cyrillic_EM","","",null,null],[17,"XK_Cyrillic_EN","","",null,null],[17,"XK_Cyrillic_O","","",null,null],[17,"XK_Cyrillic_PE","","",null,null],[17,"XK_Cyrillic_YA","","",null,null],[17,"XK_Cyrillic_ER","","",null,null],[17,"XK_Cyrillic_ES","","",null,null],[17,"XK_Cyrillic_TE","","",null,null],[17,"XK_Cyrillic_U","","",null,null],[17,"XK_Cyrillic_ZHE","","",null,null],[17,"XK_Cyrillic_VE","","",null,null],[17,"XK_Cyrillic_SOFTSIGN","","",null,null],[17,"XK_Cyrillic_YERU","","",null,null],[17,"XK_Cyrillic_ZE","","",null,null],[17,"XK_Cyrillic_SHA","","",null,null],[17,"XK_Cyrillic_E","","",null,null],[17,"XK_Cyrillic_SHCHA","","",null,null],[17,"XK_Cyrillic_CHE","","",null,null],[17,"XK_Cyrillic_HARDSIGN","","",null,null],[17,"XK_Greek_ALPHAaccent","","",null,null],[17,"XK_Greek_EPSILONaccent","","",null,null],[17,"XK_Greek_ETAaccent","","",null,null],[17,"XK_Greek_IOTAaccent","","",null,null],[17,"XK_Greek_IOTAdiaeresis","","",null,null],[17,"XK_Greek_OMICRONaccent","","",null,null],[17,"XK_Greek_UPSILONaccent","","",null,null],[17,"XK_Greek_UPSILONdieresis","","",null,null],[17,"XK_Greek_OMEGAaccent","","",null,null],[17,"XK_Greek_accentdieresis","","",null,null],[17,"XK_Greek_horizbar","","",null,null],[17,"XK_Greek_alphaaccent","","",null,null],[17,"XK_Greek_epsilonaccent","","",null,null],[17,"XK_Greek_etaaccent","","",null,null],[17,"XK_Greek_iotaaccent","","",null,null],[17,"XK_Greek_iotadieresis","","",null,null],[17,"XK_Greek_iotaaccentdieresis","","",null,null],[17,"XK_Greek_omicronaccent","","",null,null],[17,"XK_Greek_upsilonaccent","","",null,null],[17,"XK_Greek_upsilondieresis","","",null,null],[17,"XK_Greek_upsilonaccentdieresis","","",null,null],[17,"XK_Greek_omegaaccent","","",null,null],[17,"XK_Greek_ALPHA","","",null,null],[17,"XK_Greek_BETA","","",null,null],[17,"XK_Greek_GAMMA","","",null,null],[17,"XK_Greek_DELTA","","",null,null],[17,"XK_Greek_EPSILON","","",null,null],[17,"XK_Greek_ZETA","","",null,null],[17,"XK_Greek_ETA","","",null,null],[17,"XK_Greek_THETA","","",null,null],[17,"XK_Greek_IOTA","","",null,null],[17,"XK_Greek_KAPPA","","",null,null],[17,"XK_Greek_LAMDA","","",null,null],[17,"XK_Greek_LAMBDA","","",null,null],[17,"XK_Greek_MU","","",null,null],[17,"XK_Greek_NU","","",null,null],[17,"XK_Greek_XI","","",null,null],[17,"XK_Greek_OMICRON","","",null,null],[17,"XK_Greek_PI","","",null,null],[17,"XK_Greek_RHO","","",null,null],[17,"XK_Greek_SIGMA","","",null,null],[17,"XK_Greek_TAU","","",null,null],[17,"XK_Greek_UPSILON","","",null,null],[17,"XK_Greek_PHI","","",null,null],[17,"XK_Greek_CHI","","",null,null],[17,"XK_Greek_PSI","","",null,null],[17,"XK_Greek_OMEGA","","",null,null],[17,"XK_Greek_alpha","","",null,null],[17,"XK_Greek_beta","","",null,null],[17,"XK_Greek_gamma","","",null,null],[17,"XK_Greek_delta","","",null,null],[17,"XK_Greek_epsilon","","",null,null],[17,"XK_Greek_zeta","","",null,null],[17,"XK_Greek_eta","","",null,null],[17,"XK_Greek_theta","","",null,null],[17,"XK_Greek_iota","","",null,null],[17,"XK_Greek_kappa","","",null,null],[17,"XK_Greek_lamda","","",null,null],[17,"XK_Greek_lambda","","",null,null],[17,"XK_Greek_mu","","",null,null],[17,"XK_Greek_nu","","",null,null],[17,"XK_Greek_xi","","",null,null],[17,"XK_Greek_omicron","","",null,null],[17,"XK_Greek_pi","","",null,null],[17,"XK_Greek_rho","","",null,null],[17,"XK_Greek_sigma","","",null,null],[17,"XK_Greek_finalsmallsigma","","",null,null],[17,"XK_Greek_tau","","",null,null],[17,"XK_Greek_upsilon","","",null,null],[17,"XK_Greek_phi","","",null,null],[17,"XK_Greek_chi","","",null,null],[17,"XK_Greek_psi","","",null,null],[17,"XK_Greek_omega","","",null,null],[17,"XK_Greek_switch","","",null,null],[17,"XK_leftradical","","",null,null],[17,"XK_topleftradical","","",null,null],[17,"XK_horizconnector","","",null,null],[17,"XK_topintegral","","",null,null],[17,"XK_botintegral","","",null,null],[17,"XK_vertconnector","","",null,null],[17,"XK_topleftsqbracket","","",null,null],[17,"XK_botleftsqbracket","","",null,null],[17,"XK_toprightsqbracket","","",null,null],[17,"XK_botrightsqbracket","","",null,null],[17,"XK_topleftparens","","",null,null],[17,"XK_botleftparens","","",null,null],[17,"XK_toprightparens","","",null,null],[17,"XK_botrightparens","","",null,null],[17,"XK_leftmiddlecurlybrace","","",null,null],[17,"XK_rightmiddlecurlybrace","","",null,null],[17,"XK_topleftsummation","","",null,null],[17,"XK_botleftsummation","","",null,null],[17,"XK_topvertsummationconnector","","",null,null],[17,"XK_botvertsummationconnector","","",null,null],[17,"XK_toprightsummation","","",null,null],[17,"XK_botrightsummation","","",null,null],[17,"XK_rightmiddlesummation","","",null,null],[17,"XK_lessthanequal","","",null,null],[17,"XK_notequal","","",null,null],[17,"XK_greaterthanequal","","",null,null],[17,"XK_integral","","",null,null],[17,"XK_therefore","","",null,null],[17,"XK_variation","","",null,null],[17,"XK_infinity","","",null,null],[17,"XK_nabla","","",null,null],[17,"XK_approximate","","",null,null],[17,"XK_similarequal","","",null,null],[17,"XK_ifonlyif","","",null,null],[17,"XK_implies","","",null,null],[17,"XK_identical","","",null,null],[17,"XK_radical","","",null,null],[17,"XK_includedin","","",null,null],[17,"XK_includes","","",null,null],[17,"XK_intersection","","",null,null],[17,"XK_union","","",null,null],[17,"XK_logicaland","","",null,null],[17,"XK_logicalor","","",null,null],[17,"XK_partialderivative","","",null,null],[17,"XK_function","","",null,null],[17,"XK_leftarrow","","",null,null],[17,"XK_uparrow","","",null,null],[17,"XK_rightarrow","","",null,null],[17,"XK_downarrow","","",null,null],[17,"XK_blank","","",null,null],[17,"XK_soliddiamond","","",null,null],[17,"XK_checkerboard","","",null,null],[17,"XK_ht","","",null,null],[17,"XK_ff","","",null,null],[17,"XK_cr","","",null,null],[17,"XK_lf","","",null,null],[17,"XK_nl","","",null,null],[17,"XK_vt","","",null,null],[17,"XK_lowrightcorner","","",null,null],[17,"XK_uprightcorner","","",null,null],[17,"XK_upleftcorner","","",null,null],[17,"XK_lowleftcorner","","",null,null],[17,"XK_crossinglines","","",null,null],[17,"XK_horizlinescan1","","",null,null],[17,"XK_horizlinescan3","","",null,null],[17,"XK_horizlinescan5","","",null,null],[17,"XK_horizlinescan7","","",null,null],[17,"XK_horizlinescan9","","",null,null],[17,"XK_leftt","","",null,null],[17,"XK_rightt","","",null,null],[17,"XK_bott","","",null,null],[17,"XK_topt","","",null,null],[17,"XK_vertbar","","",null,null],[17,"XK_emspace","","",null,null],[17,"XK_enspace","","",null,null],[17,"XK_em3space","","",null,null],[17,"XK_em4space","","",null,null],[17,"XK_digitspace","","",null,null],[17,"XK_punctspace","","",null,null],[17,"XK_thinspace","","",null,null],[17,"XK_hairspace","","",null,null],[17,"XK_emdash","","",null,null],[17,"XK_endash","","",null,null],[17,"XK_signifblank","","",null,null],[17,"XK_ellipsis","","",null,null],[17,"XK_doubbaselinedot","","",null,null],[17,"XK_onethird","","",null,null],[17,"XK_twothirds","","",null,null],[17,"XK_onefifth","","",null,null],[17,"XK_twofifths","","",null,null],[17,"XK_threefifths","","",null,null],[17,"XK_fourfifths","","",null,null],[17,"XK_onesixth","","",null,null],[17,"XK_fivesixths","","",null,null],[17,"XK_careof","","",null,null],[17,"XK_figdash","","",null,null],[17,"XK_leftanglebracket","","",null,null],[17,"XK_decimalpoint","","",null,null],[17,"XK_rightanglebracket","","",null,null],[17,"XK_marker","","",null,null],[17,"XK_oneeighth","","",null,null],[17,"XK_threeeighths","","",null,null],[17,"XK_fiveeighths","","",null,null],[17,"XK_seveneighths","","",null,null],[17,"XK_trademark","","",null,null],[17,"XK_signaturemark","","",null,null],[17,"XK_trademarkincircle","","",null,null],[17,"XK_leftopentriangle","","",null,null],[17,"XK_rightopentriangle","","",null,null],[17,"XK_emopencircle","","",null,null],[17,"XK_emopenrectangle","","",null,null],[17,"XK_leftsinglequotemark","","",null,null],[17,"XK_rightsinglequotemark","","",null,null],[17,"XK_leftdoublequotemark","","",null,null],[17,"XK_rightdoublequotemark","","",null,null],[17,"XK_prescription","","",null,null],[17,"XK_minutes","","",null,null],[17,"XK_seconds","","",null,null],[17,"XK_latincross","","",null,null],[17,"XK_hexagram","","",null,null],[17,"XK_filledrectbullet","","",null,null],[17,"XK_filledlefttribullet","","",null,null],[17,"XK_filledrighttribullet","","",null,null],[17,"XK_emfilledcircle","","",null,null],[17,"XK_emfilledrect","","",null,null],[17,"XK_enopencircbullet","","",null,null],[17,"XK_enopensquarebullet","","",null,null],[17,"XK_openrectbullet","","",null,null],[17,"XK_opentribulletup","","",null,null],[17,"XK_opentribulletdown","","",null,null],[17,"XK_openstar","","",null,null],[17,"XK_enfilledcircbullet","","",null,null],[17,"XK_enfilledsqbullet","","",null,null],[17,"XK_filledtribulletup","","",null,null],[17,"XK_filledtribulletdown","","",null,null],[17,"XK_leftpointer","","",null,null],[17,"XK_rightpointer","","",null,null],[17,"XK_club","","",null,null],[17,"XK_diamond","","",null,null],[17,"XK_heart","","",null,null],[17,"XK_maltesecross","","",null,null],[17,"XK_dagger","","",null,null],[17,"XK_doubledagger","","",null,null],[17,"XK_checkmark","","",null,null],[17,"XK_ballotcross","","",null,null],[17,"XK_musicalsharp","","",null,null],[17,"XK_musicalflat","","",null,null],[17,"XK_malesymbol","","",null,null],[17,"XK_femalesymbol","","",null,null],[17,"XK_telephone","","",null,null],[17,"XK_telephonerecorder","","",null,null],[17,"XK_phonographcopyright","","",null,null],[17,"XK_caret","","",null,null],[17,"XK_singlelowquotemark","","",null,null],[17,"XK_doublelowquotemark","","",null,null],[17,"XK_cursor","","",null,null],[17,"XK_leftcaret","","",null,null],[17,"XK_rightcaret","","",null,null],[17,"XK_downcaret","","",null,null],[17,"XK_upcaret","","",null,null],[17,"XK_overbar","","",null,null],[17,"XK_downtack","","",null,null],[17,"XK_upshoe","","",null,null],[17,"XK_downstile","","",null,null],[17,"XK_underbar","","",null,null],[17,"XK_jot","","",null,null],[17,"XK_quad","","",null,null],[17,"XK_uptack","","",null,null],[17,"XK_circle","","",null,null],[17,"XK_upstile","","",null,null],[17,"XK_downshoe","","",null,null],[17,"XK_rightshoe","","",null,null],[17,"XK_leftshoe","","",null,null],[17,"XK_lefttack","","",null,null],[17,"XK_righttack","","",null,null],[17,"XK_hebrew_doublelowline","","",null,null],[17,"XK_hebrew_aleph","","",null,null],[17,"XK_hebrew_bet","","",null,null],[17,"XK_hebrew_beth","","",null,null],[17,"XK_hebrew_gimel","","",null,null],[17,"XK_hebrew_gimmel","","",null,null],[17,"XK_hebrew_dalet","","",null,null],[17,"XK_hebrew_daleth","","",null,null],[17,"XK_hebrew_he","","",null,null],[17,"XK_hebrew_waw","","",null,null],[17,"XK_hebrew_zain","","",null,null],[17,"XK_hebrew_zayin","","",null,null],[17,"XK_hebrew_chet","","",null,null],[17,"XK_hebrew_het","","",null,null],[17,"XK_hebrew_tet","","",null,null],[17,"XK_hebrew_teth","","",null,null],[17,"XK_hebrew_yod","","",null,null],[17,"XK_hebrew_finalkaph","","",null,null],[17,"XK_hebrew_kaph","","",null,null],[17,"XK_hebrew_lamed","","",null,null],[17,"XK_hebrew_finalmem","","",null,null],[17,"XK_hebrew_mem","","",null,null],[17,"XK_hebrew_finalnun","","",null,null],[17,"XK_hebrew_nun","","",null,null],[17,"XK_hebrew_samech","","",null,null],[17,"XK_hebrew_samekh","","",null,null],[17,"XK_hebrew_ayin","","",null,null],[17,"XK_hebrew_finalpe","","",null,null],[17,"XK_hebrew_pe","","",null,null],[17,"XK_hebrew_finalzade","","",null,null],[17,"XK_hebrew_finalzadi","","",null,null],[17,"XK_hebrew_zade","","",null,null],[17,"XK_hebrew_zadi","","",null,null],[17,"XK_hebrew_qoph","","",null,null],[17,"XK_hebrew_kuf","","",null,null],[17,"XK_hebrew_resh","","",null,null],[17,"XK_hebrew_shin","","",null,null],[17,"XK_hebrew_taw","","",null,null],[17,"XK_hebrew_taf","","",null,null],[17,"XK_Hebrew_switch","","",null,null],[17,"XF86XK_ModeLock","","",null,null],[17,"XF86XK_MonBrightnessUp","","",null,null],[17,"XF86XK_MonBrightnessDown","","",null,null],[17,"XF86XK_KbdLightOnOff","","",null,null],[17,"XF86XK_KbdBrightnessUp","","",null,null],[17,"XF86XK_KbdBrightnessDown","","",null,null],[17,"XF86XK_Standby","","",null,null],[17,"XF86XK_AudioLowerVolume","","",null,null],[17,"XF86XK_AudioMute","","",null,null],[17,"XF86XK_AudioRaiseVolume","","",null,null],[17,"XF86XK_AudioPlay","","",null,null],[17,"XF86XK_AudioStop","","",null,null],[17,"XF86XK_AudioPrev","","",null,null],[17,"XF86XK_AudioNext","","",null,null],[17,"XF86XK_HomePage","","",null,null],[17,"XF86XK_Mail","","",null,null],[17,"XF86XK_Start","","",null,null],[17,"XF86XK_Search","","",null,null],[17,"XF86XK_AudioRecord","","",null,null],[17,"XF86XK_Calculator","","",null,null],[17,"XF86XK_Memo","","",null,null],[17,"XF86XK_ToDoList","","",null,null],[17,"XF86XK_Calendar","","",null,null],[17,"XF86XK_PowerDown","","",null,null],[17,"XF86XK_ContrastAdjust","","",null,null],[17,"XF86XK_RockerUp","","",null,null],[17,"XF86XK_RockerDown","","",null,null],[17,"XF86XK_RockerEnter","","",null,null],[17,"XF86XK_Back","","",null,null],[17,"XF86XK_Forward","","",null,null],[17,"XF86XK_Stop","","",null,null],[17,"XF86XK_Refresh","","",null,null],[17,"XF86XK_PowerOff","","",null,null],[17,"XF86XK_WakeUp","","",null,null],[17,"XF86XK_Eject","","",null,null],[17,"XF86XK_ScreenSaver","","",null,null],[17,"XF86XK_WWW","","",null,null],[17,"XF86XK_Sleep","","",null,null],[17,"XF86XK_Favorites","","",null,null],[17,"XF86XK_AudioPause","","",null,null],[17,"XF86XK_AudioMedia","","",null,null],[17,"XF86XK_MyComputer","","",null,null],[17,"XF86XK_VendorHome","","",null,null],[17,"XF86XK_LightBulb","","",null,null],[17,"XF86XK_Shop","","",null,null],[17,"XF86XK_History","","",null,null],[17,"XF86XK_OpenURL","","",null,null],[17,"XF86XK_AddFavorite","","",null,null],[17,"XF86XK_HotLinks","","",null,null],[17,"XF86XK_BrightnessAdjust","","",null,null],[17,"XF86XK_Finance","","",null,null],[17,"XF86XK_Community","","",null,null],[17,"XF86XK_AudioRewind","","",null,null],[17,"XF86XK_BackForward","","",null,null],[17,"XF86XK_Launch0","","",null,null],[17,"XF86XK_Launch1","","",null,null],[17,"XF86XK_Launch2","","",null,null],[17,"XF86XK_Launch3","","",null,null],[17,"XF86XK_Launch4","","",null,null],[17,"XF86XK_Launch5","","",null,null],[17,"XF86XK_Launch6","","",null,null],[17,"XF86XK_Launch7","","",null,null],[17,"XF86XK_Launch8","","",null,null],[17,"XF86XK_Launch9","","",null,null],[17,"XF86XK_LaunchA","","",null,null],[17,"XF86XK_LaunchB","","",null,null],[17,"XF86XK_LaunchC","","",null,null],[17,"XF86XK_LaunchD","","",null,null],[17,"XF86XK_LaunchE","","",null,null],[17,"XF86XK_LaunchF","","",null,null],[17,"XF86XK_ApplicationLeft","","",null,null],[17,"XF86XK_ApplicationRight","","",null,null],[17,"XF86XK_Book","","",null,null],[17,"XF86XK_CD","","",null,null],[17,"XF86XK_Calculater","","",null,null],[17,"XF86XK_Clear","","",null,null],[17,"XF86XK_Close","","",null,null],[17,"XF86XK_Copy","","",null,null],[17,"XF86XK_Cut","","",null,null],[17,"XF86XK_Display","","",null,null],[17,"XF86XK_DOS","","",null,null],[17,"XF86XK_Documents","","",null,null],[17,"XF86XK_Excel","","",null,null],[17,"XF86XK_Explorer","","",null,null],[17,"XF86XK_Game","","",null,null],[17,"XF86XK_Go","","",null,null],[17,"XF86XK_iTouch","","",null,null],[17,"XF86XK_LogOff","","",null,null],[17,"XF86XK_Market","","",null,null],[17,"XF86XK_Meeting","","",null,null],[17,"XF86XK_MenuKB","","",null,null],[17,"XF86XK_MenuPB","","",null,null],[17,"XF86XK_MySites","","",null,null],[17,"XF86XK_New","","",null,null],[17,"XF86XK_News","","",null,null],[17,"XF86XK_OfficeHome","","",null,null],[17,"XF86XK_Open","","",null,null],[17,"XF86XK_Option","","",null,null],[17,"XF86XK_Paste","","",null,null],[17,"XF86XK_Phone","","",null,null],[17,"XF86XK_Q","","",null,null],[17,"XF86XK_Reply","","",null,null],[17,"XF86XK_Reload","","",null,null],[17,"XF86XK_RotateWindows","","",null,null],[17,"XF86XK_RotationPB","","",null,null],[17,"XF86XK_RotationKB","","",null,null],[17,"XF86XK_Save","","",null,null],[17,"XF86XK_ScrollUp","","",null,null],[17,"XF86XK_ScrollDown","","",null,null],[17,"XF86XK_ScrollClick","","",null,null],[17,"XF86XK_Send","","",null,null],[17,"XF86XK_Spell","","",null,null],[17,"XF86XK_SplitScreen","","",null,null],[17,"XF86XK_Support","","",null,null],[17,"XF86XK_TaskPane","","",null,null],[17,"XF86XK_Terminal","","",null,null],[17,"XF86XK_Tools","","",null,null],[17,"XF86XK_Travel","","",null,null],[17,"XF86XK_UserPB","","",null,null],[17,"XF86XK_User1KB","","",null,null],[17,"XF86XK_User2KB","","",null,null],[17,"XF86XK_Video","","",null,null],[17,"XF86XK_WheelButton","","",null,null],[17,"XF86XK_Word","","",null,null],[17,"XF86XK_Xfer","","",null,null],[17,"XF86XK_ZoomIn","","",null,null],[17,"XF86XK_ZoomOut","","",null,null],[17,"XF86XK_Away","","",null,null],[17,"XF86XK_Messenger","","",null,null],[17,"XF86XK_WebCam","","",null,null],[17,"XF86XK_MailForward","","",null,null],[17,"XF86XK_Pictures","","",null,null],[17,"XF86XK_Music","","",null,null],[17,"XF86XK_Battery","","",null,null],[17,"XF86XK_Bluetooth","","",null,null],[17,"XF86XK_WLAN","","",null,null],[17,"XF86XK_UWB","","",null,null],[17,"XF86XK_AudioForward","","",null,null],[17,"XF86XK_AudioRepeat","","",null,null],[17,"XF86XK_AudioRandomPlay","","",null,null],[17,"XF86XK_Subtitle","","",null,null],[17,"XF86XK_AudioCycleTrack","","",null,null],[17,"XF86XK_CycleAngle","","",null,null],[17,"XF86XK_FrameBack","","",null,null],[17,"XF86XK_FrameForward","","",null,null],[17,"XF86XK_Time","","",null,null],[17,"XF86XK_Select","","",null,null],[17,"XF86XK_View","","",null,null],[17,"XF86XK_TopMenu","","",null,null],[17,"XF86XK_Red","","",null,null],[17,"XF86XK_Green","","",null,null],[17,"XF86XK_Yellow","","",null,null],[17,"XF86XK_Blue","","",null,null],[17,"XF86XK_Suspend","","",null,null],[17,"XF86XK_Hibernate","","",null,null],[17,"XF86XK_TouchpadToggle","","",null,null],[17,"XF86XK_TouchpadOn","","",null,null],[17,"XF86XK_TouchpadOff","","",null,null],[17,"XF86XK_AudioMicMute","","",null,null],[17,"XF86XK_Switch_VT_1","","",null,null],[17,"XF86XK_Switch_VT_2","","",null,null],[17,"XF86XK_Switch_VT_3","","",null,null],[17,"XF86XK_Switch_VT_4","","",null,null],[17,"XF86XK_Switch_VT_5","","",null,null],[17,"XF86XK_Switch_VT_6","","",null,null],[17,"XF86XK_Switch_VT_7","","",null,null],[17,"XF86XK_Switch_VT_8","","",null,null],[17,"XF86XK_Switch_VT_9","","",null,null],[17,"XF86XK_Switch_VT_10","","",null,null],[17,"XF86XK_Switch_VT_11","","",null,null],[17,"XF86XK_Switch_VT_12","","",null,null],[17,"XF86XK_Ungrab","","",null,null],[17,"XF86XK_ClearGrab","","",null,null],[17,"XF86XK_Next_VMode","","",null,null],[17,"XF86XK_Prev_VMode","","",null,null],[17,"XF86XK_LogWindowTree","","",null,null],[17,"XF86XK_LogGrabInfo","","",null,null],[17,"XK_ISO_Lock","","",null,null],[17,"XK_ISO_Level2_Latch","","",null,null],[17,"XK_ISO_Level3_Shift","","",null,null],[17,"XK_ISO_Level3_Latch","","",null,null],[17,"XK_ISO_Level3_Lock","","",null,null],[17,"XK_ISO_Level5_Shift","","",null,null],[17,"XK_ISO_Level5_Latch","","",null,null],[17,"XK_ISO_Level5_Lock","","",null,null],[17,"XK_ISO_Group_Shift","","",null,null],[17,"XK_ISO_Group_Latch","","",null,null],[17,"XK_ISO_Group_Lock","","",null,null],[17,"XK_ISO_Next_Group","","",null,null],[17,"XK_ISO_Next_Group_Lock","","",null,null],[17,"XK_ISO_Prev_Group","","",null,null],[17,"XK_ISO_Prev_Group_Lock","","",null,null],[17,"XK_ISO_First_Group","","",null,null],[17,"XK_ISO_First_Group_Lock","","",null,null],[17,"XK_ISO_Last_Group","","",null,null],[17,"XK_ISO_Last_Group_Lock","","",null,null],[17,"XK_ISO_Left_Tab","","",null,null],[17,"XK_ISO_Move_Line_Up","","",null,null],[17,"XK_ISO_Move_Line_Down","","",null,null],[17,"XK_ISO_Partial_Line_Up","","",null,null],[17,"XK_ISO_Partial_Line_Down","","",null,null],[17,"XK_ISO_Partial_Space_Left","","",null,null],[17,"XK_ISO_Partial_Space_Right","","",null,null],[17,"XK_ISO_Set_Margin_Left","","",null,null],[17,"XK_ISO_Set_Margin_Right","","",null,null],[17,"XK_ISO_Release_Margin_Left","","",null,null],[17,"XK_ISO_Release_Margin_Right","","",null,null],[17,"XK_ISO_Release_Both_Margins","","",null,null],[17,"XK_ISO_Fast_Cursor_Left","","",null,null],[17,"XK_ISO_Fast_Cursor_Right","","",null,null],[17,"XK_ISO_Fast_Cursor_Up","","",null,null],[17,"XK_ISO_Fast_Cursor_Down","","",null,null],[17,"XK_ISO_Continuous_Underline","","",null,null],[17,"XK_ISO_Discontinuous_Underline","","",null,null],[17,"XK_ISO_Emphasize","","",null,null],[17,"XK_ISO_Center_Object","","",null,null],[17,"XK_ISO_Enter","","",null,null],[17,"XK_dead_grave","","",null,null],[17,"XK_dead_acute","","",null,null],[17,"XK_dead_circumflex","","",null,null],[17,"XK_dead_tilde","","",null,null],[17,"XK_dead_perispomeni","","",null,null],[17,"XK_dead_macron","","",null,null],[17,"XK_dead_breve","","",null,null],[17,"XK_dead_abovedot","","",null,null],[17,"XK_dead_diaeresis","","",null,null],[17,"XK_dead_abovering","","",null,null],[17,"XK_dead_doubleacute","","",null,null],[17,"XK_dead_caron","","",null,null],[17,"XK_dead_cedilla","","",null,null],[17,"XK_dead_ogonek","","",null,null],[17,"XK_dead_iota","","",null,null],[17,"XK_dead_voiced_sound","","",null,null],[17,"XK_dead_semivoiced_sound","","",null,null],[17,"XK_dead_belowdot","","",null,null],[17,"XK_dead_hook","","",null,null],[17,"XK_dead_horn","","",null,null],[17,"XK_dead_stroke","","",null,null],[17,"XK_dead_abovecomma","","",null,null],[17,"XK_dead_psili","","",null,null],[17,"XK_dead_abovereversedcomma","","",null,null],[17,"XK_dead_dasia","","",null,null],[17,"XK_dead_doublegrave","","",null,null],[17,"XK_dead_belowring","","",null,null],[17,"XK_dead_belowmacron","","",null,null],[17,"XK_dead_belowcircumflex","","",null,null],[17,"XK_dead_belowtilde","","",null,null],[17,"XK_dead_belowbreve","","",null,null],[17,"XK_dead_belowdiaeresis","","",null,null],[17,"XK_dead_invertedbreve","","",null,null],[17,"XK_dead_belowcomma","","",null,null],[17,"XK_dead_currency","","",null,null],[17,"XK_dead_lowline","","",null,null],[17,"XK_dead_aboveverticalline","","",null,null],[17,"XK_dead_belowverticalline","","",null,null],[17,"XK_dead_longsolidusoverlay","","",null,null],[17,"XK_dead_a","","",null,null],[17,"XK_dead_A","","",null,null],[17,"XK_dead_e","","",null,null],[17,"XK_dead_E","","",null,null],[17,"XK_dead_i","","",null,null],[17,"XK_dead_I","","",null,null],[17,"XK_dead_o","","",null,null],[17,"XK_dead_O","","",null,null],[17,"XK_dead_u","","",null,null],[17,"XK_dead_U","","",null,null],[17,"XK_dead_small_schwa","","",null,null],[17,"XK_dead_capital_schwa","","",null,null],[17,"XK_dead_greek","","",null,null],[17,"XK_First_Virtual_Screen","","",null,null],[17,"XK_Prev_Virtual_Screen","","",null,null],[17,"XK_Next_Virtual_Screen","","",null,null],[17,"XK_Last_Virtual_Screen","","",null,null],[17,"XK_Terminate_Server","","",null,null],[17,"XK_AccessX_Enable","","",null,null],[17,"XK_AccessX_Feedback_Enable","","",null,null],[17,"XK_RepeatKeys_Enable","","",null,null],[17,"XK_SlowKeys_Enable","","",null,null],[17,"XK_BounceKeys_Enable","","",null,null],[17,"XK_StickyKeys_Enable","","",null,null],[17,"XK_MouseKeys_Enable","","",null,null],[17,"XK_MouseKeys_Accel_Enable","","",null,null],[17,"XK_Overlay1_Enable","","",null,null],[17,"XK_Overlay2_Enable","","",null,null],[17,"XK_AudibleBell_Enable","","",null,null],[17,"XK_Pointer_Left","","",null,null],[17,"XK_Pointer_Right","","",null,null],[17,"XK_Pointer_Up","","",null,null],[17,"XK_Pointer_Down","","",null,null],[17,"XK_Pointer_UpLeft","","",null,null],[17,"XK_Pointer_UpRight","","",null,null],[17,"XK_Pointer_DownLeft","","",null,null],[17,"XK_Pointer_DownRight","","",null,null],[17,"XK_Pointer_Button_Dflt","","",null,null],[17,"XK_Pointer_Button1","","",null,null],[17,"XK_Pointer_Button2","","",null,null],[17,"XK_Pointer_Button3","","",null,null],[17,"XK_Pointer_Button4","","",null,null],[17,"XK_Pointer_Button5","","",null,null],[17,"XK_Pointer_DblClick_Dflt","","",null,null],[17,"XK_Pointer_DblClick1","","",null,null],[17,"XK_Pointer_DblClick2","","",null,null],[17,"XK_Pointer_DblClick3","","",null,null],[17,"XK_Pointer_DblClick4","","",null,null],[17,"XK_Pointer_DblClick5","","",null,null],[17,"XK_Pointer_Drag_Dflt","","",null,null],[17,"XK_Pointer_Drag1","","",null,null],[17,"XK_Pointer_Drag2","","",null,null],[17,"XK_Pointer_Drag3","","",null,null],[17,"XK_Pointer_Drag4","","",null,null],[17,"XK_Pointer_Drag5","","",null,null],[17,"XK_Pointer_EnableKeys","","",null,null],[17,"XK_Pointer_Accelerate","","",null,null],[17,"XK_Pointer_DfltBtnNext","","",null,null],[17,"XK_Pointer_DfltBtnPrev","","",null,null],[17,"XK_ch","","",null,null],[17,"XK_Ch","","",null,null],[17,"XK_CH","","",null,null],[17,"XK_c_h","","",null,null],[17,"XK_C_h","","",null,null],[17,"XK_C_H","","",null,null],[0,"xcursor","x11_dl","",null,null],[3,"Xcursor","x11_dl::xcursor","",null,null],[12,"XcursorAnimateCreate","","",102,null],[12,"XcursorAnimateDestroy","","",102,null],[12,"XcursorAnimateNext","","",102,null],[12,"XcursorCommentCreate","","",102,null],[12,"XcursorCommentDestroy","","",102,null],[12,"XcursorCommentsCreate","","",102,null],[12,"XcursorCommentsDestroy","","",102,null],[12,"XcursorCursorsCreate","","",102,null],[12,"XcursorCursorsDestroy","","",102,null],[12,"XcursorFileLoad","","",102,null],[12,"XcursorFileLoadAllImages","","",102,null],[12,"XcursorFileLoadImage","","",102,null],[12,"XcursorFileLoadImages","","",102,null],[12,"XcursorFilenameLoad","","",102,null],[12,"XcursorFilenameLoadAllImages","","",102,null],[12,"XcursorFilenameLoadCursor","","",102,null],[12,"XcursorFilenameLoadCursors","","",102,null],[12,"XcursorFilenameLoadImage","","",102,null],[12,"XcursorFilenameLoadImages","","",102,null],[12,"XcursorFilenameSave","","",102,null],[12,"XcursorFilenameSaveImages","","",102,null],[12,"XcursorFileSave","","",102,null],[12,"XcursorFileSaveImages","","",102,null],[12,"XcursorGetDefaultSize","","",102,null],[12,"XcursorGetTheme","","",102,null],[12,"XcursorGetThemeCore","","",102,null],[12,"XcursorImageCreate","","",102,null],[12,"XcursorImageDestroy","","",102,null],[12,"XcursorImageHash","","",102,null],[12,"XcursorImageLoadCursor","","",102,null],[12,"XcursorImagesCreate","","",102,null],[12,"XcursorImagesDestroy","","",102,null],[12,"XcursorImagesLoadCursor","","",102,null],[12,"XcursorImagesLoadCursors","","",102,null],[12,"XcursorImagesSetName","","",102,null],[12,"XcursorLibraryLoadCursor","","",102,null],[12,"XcursorLibraryLoadCursors","","",102,null],[12,"XcursorLibraryLoadImage","","",102,null],[12,"XcursorLibraryLoadImages","","",102,null],[12,"XcursorLibraryPath","","",102,null],[12,"XcursorLibraryShape","","",102,null],[12,"XcursorNoticeCreateBitmap","","",102,null],[12,"XcursorNoticePutBitmap","","",102,null],[12,"XcursorSetDefaultSize","","",102,null],[12,"XcursorSetTheme","","",102,null],[12,"XcursorSetThemeCore","","",102,null],[12,"XcursorShapeLoadCursor","","",102,null],[12,"XcursorShapeLoadCursors","","",102,null],[12,"XcursorShapeLoadImage","","",102,null],[12,"XcursorShapeLoadImages","","",102,null],[12,"XcursorSupportsAnim","","",102,null],[12,"XcursorSupportsARGB","","",102,null],[12,"XcursorTryShapeBitmapCursor","","",102,null],[12,"XcursorTryShapeCursor","","",102,null],[12,"XcursorXcFileLoad","","",102,null],[12,"XcursorXcFileLoadAllImages","","",102,null],[12,"XcursorXcFileLoadImage","","",102,null],[12,"XcursorXcFileLoadImages","","",102,null],[12,"XcursorXcFileSave","","",102,null],[3,"_XcursorAnimate","","",null,null],[12,"cursors","","",103,null],[12,"sequence","","",103,null],[3,"_XcursorChunkHeader","","",null,null],[12,"header","","",104,null],[12,"type_","","",104,null],[12,"subtype","","",104,null],[12,"version","","",104,null],[3,"_XcursorComment","","",null,null],[12,"version","","",105,null],[12,"comment_type","","",105,null],[12,"comment","","",105,null],[3,"_XcursorComments","","",null,null],[12,"ncomment","","",106,null],[12,"comments","","",106,null],[3,"_XcursorCursors","","",null,null],[12,"dpy","","",107,null],[12,"ref_","","",107,null],[12,"ncursor","","",107,null],[12,"cursors","","",107,null],[3,"_XcursorFile","","",null,null],[12,"closure","","",108,null],[12,"read","","",108,null],[12,"write","","",108,null],[12,"seek","","",108,null],[3,"_XcursorFileHeader","","",null,null],[12,"magic","","",109,null],[12,"header","","",109,null],[12,"version","","",109,null],[12,"ntoc","","",109,null],[12,"tocs","","",109,null],[3,"_XcursorFileToc","","",null,null],[12,"type_","","",110,null],[12,"subtype","","",110,null],[12,"position","","",110,null],[3,"_XcursorImage","","",null,null],[12,"version","","",111,null],[12,"size","","",111,null],[12,"width","","",111,null],[12,"height","","",111,null],[12,"xhot","","",111,null],[12,"yhot","","",111,null],[12,"delay","","",111,null],[12,"pixels","","",111,null],[3,"_XcursorImages","","",null,null],[12,"nimage","","",112,null],[12,"images","","",112,null],[12,"name","","",112,null],[6,"XcursorBool","","",null,null],[6,"XcursorDim","","",null,null],[6,"XcursorPixel","","",null,null],[6,"XcursorUInt","","",null,null],[6,"XcursorAnimate","","",null,null],[6,"XcursorChunkHeader","","",null,null],[6,"XcursorComment","","",null,null],[6,"XcursorComments","","",null,null],[6,"XcursorCursors","","",null,null],[6,"XcursorFile","","",null,null],[6,"XcursorFileHeader","","",null,null],[6,"XcursorFileToc","","",null,null],[6,"XcursorImage","","",null,null],[6,"XcursorImages","","",null,null],[11,"open","","",102,{"inputs":[],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"_xcursoranimate"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorchunkheader"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorcomment"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorcomments"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorcursors"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorfile"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorfileheader"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorfiletoc"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorimage"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorimages"}}],[0,"xf86vmode","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xf86vmode","",null,null],[12,"XF86VidModeAddModeLine","","",113,null],[12,"XF86VidModeDeleteModeLine","","",113,null],[12,"XF86VidModeGetAllModeLines","","",113,null],[12,"XF86VidModeGetDotClocks","","",113,null],[12,"XF86VidModeGetGamma","","",113,null],[12,"XF86VidModeGetGammaRamp","","",113,null],[12,"XF86VidModeGetGammaRampSize","","",113,null],[12,"XF86VidModeGetModeLine","","",113,null],[12,"XF86VidModeGetMonitor","","",113,null],[12,"XF86VidModeGetPermissions","","",113,null],[12,"XF86VidModeGetViewPort","","",113,null],[12,"XF86VidModeLockModeSwitch","","",113,null],[12,"XF86VidModeModModeLine","","",113,null],[12,"XF86VidModeQueryExtension","","",113,null],[12,"XF86VidModeQueryVersion","","",113,null],[12,"XF86VidModeSetClientVersion","","",113,null],[12,"XF86VidModeSetGamma","","",113,null],[12,"XF86VidModeSetGammaRamp","","",113,null],[12,"XF86VidModeSetViewPort","","",113,null],[12,"XF86VidModeSwitchMode","","",113,null],[12,"XF86VidModeSwitchToMode","","",113,null],[12,"XF86VidModeValidateModeLine","","",113,null],[3,"XF86VidModeGamma","","",null,null],[12,"red","","",114,null],[12,"green","","",114,null],[12,"blue","","",114,null],[3,"XF86VidModeModeInfo","","",null,null],[12,"dotclock","","",115,null],[12,"hdisplay","","",115,null],[12,"hsyncstart","","",115,null],[12,"hsyncend","","",115,null],[12,"htotal","","",115,null],[12,"hskew","","",115,null],[12,"vdisplay","","",115,null],[12,"vsyncstart","","",115,null],[12,"vsyncend","","",115,null],[12,"vtotal","","",115,null],[12,"flags","","",115,null],[12,"privsize","","",115,null],[12,"private","","",115,null],[3,"XF86VidModeModeLine","","",null,null],[12,"hdisplay","","",116,null],[12,"hsyncstart","","",116,null],[12,"hsyncend","","",116,null],[12,"htotal","","",116,null],[12,"hskew","","",116,null],[12,"vdisplay","","",116,null],[12,"vsyncstart","","",116,null],[12,"vsyncend","","",116,null],[12,"vtotal","","",116,null],[12,"flags","","",116,null],[12,"privsize","","",116,null],[12,"private","","",116,null],[3,"XF86VidModeMonitor","","",null,null],[12,"vendor","","",117,null],[12,"model","","",117,null],[12,"EMPTY","","",117,null],[12,"nhsync","","",117,null],[12,"hsync","","",117,null],[12,"nvsync","","",117,null],[12,"vsync","","",117,null],[3,"XF86VidModeSyncRange","","",null,null],[12,"hi","","",118,null],[12,"lo","","",118,null],[3,"XF86VidModeNotifyEvent","","",null,null],[12,"type_","","",119,null],[12,"serial","","",119,null],[12,"send_event","","",119,null],[12,"display","","",119,null],[12,"root","","",119,null],[12,"state","","",119,null],[12,"kind","","",119,null],[12,"forced","","",119,null],[12,"time","","",119,null],[11,"open","","",113,{"inputs":[],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodegamma"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"xf86vidmodemodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"xf86vidmodemodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodemodeinfo"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodemodeline"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodemonitor"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodesyncrange"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xf86vidmodenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xf86vidmodenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xf86vmode","",119,{"inputs":[{"name":"xevent"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"from","","",119,{"inputs":[{"name":"xevent"}],"output":{"name":"xf86vidmodenotifyevent"}}],[0,"xfixes","x11_dl","",null,null],[6,"PointerBarrier","x11_dl::xfixes","",null,null],[0,"xft","x11_dl","",null,null],[3,"Xft","x11_dl::xft","",null,null],[12,"XftCharExists","","",120,null],[12,"XftCharFontSpecRender","","",120,null],[12,"XftCharIndex","","",120,null],[12,"XftCharSpecRender","","",120,null],[12,"XftColorAllocName","","",120,null],[12,"XftColorAllocValue","","",120,null],[12,"XftColorFree","","",120,null],[12,"XftDefaultHasRender","","",120,null],[12,"XftDefaultSet","","",120,null],[12,"XftDefaultSubstitute","","",120,null],[12,"XftDrawChange","","",120,null],[12,"XftDrawCharFontSpec","","",120,null],[12,"XftDrawCharSpec","","",120,null],[12,"XftDrawColormap","","",120,null],[12,"XftDrawCreate","","",120,null],[12,"XftDrawCreateAlpha","","",120,null],[12,"XftDrawCreateBitmap","","",120,null],[12,"XftDrawDestroy","","",120,null],[12,"XftDrawDisplay","","",120,null],[12,"XftDrawDrawable","","",120,null],[12,"XftDrawGlyphFontSpec","","",120,null],[12,"XftDrawGlyphs","","",120,null],[12,"XftDrawGlyphSpec","","",120,null],[12,"XftDrawPicture","","",120,null],[12,"XftDrawRect","","",120,null],[12,"XftDrawSetClip","","",120,null],[12,"XftDrawSetClipRectangles","","",120,null],[12,"XftDrawSetSubwindowMode","","",120,null],[12,"XftDrawSrcPicture","","",120,null],[12,"XftDrawString16","","",120,null],[12,"XftDrawString32","","",120,null],[12,"XftDrawString8","","",120,null],[12,"XftDrawStringUtf16","","",120,null],[12,"XftDrawStringUtf8","","",120,null],[12,"XftDrawVisual","","",120,null],[12,"XftFontCheckGlyph","","",120,null],[12,"XftFontClose","","",120,null],[12,"XftFontCopy","","",120,null],[12,"XftFontInfoCreate","","",120,null],[12,"XftFontInfoDestroy","","",120,null],[12,"XftFontInfoEqual","","",120,null],[12,"XftFontInfoHash","","",120,null],[12,"XftFontLoadGlyphs","","",120,null],[12,"XftFontMatch","","",120,null],[12,"XftFontOpenInfo","","",120,null],[12,"XftFontOpenName","","",120,null],[12,"XftFontOpenPattern","","",120,null],[12,"XftFontOpenXlfd","","",120,null],[12,"XftFontUnloadGlyphs","","",120,null],[12,"XftGetVersion","","",120,null],[12,"XftGlyphExtents","","",120,null],[12,"XftGlyphFontSpecRender","","",120,null],[12,"XftGlyphRender","","",120,null],[12,"XftGlyphSpecRender","","",120,null],[12,"XftInit","","",120,null],[12,"XftInitFtLibrary","","",120,null],[12,"XftLockFace","","",120,null],[12,"XftNameParse","","",120,null],[12,"XftNameUnparse","","",120,null],[12,"XftTextExtents16","","",120,null],[12,"XftTextExtents32","","",120,null],[12,"XftTextExtents8","","",120,null],[12,"XftTextExtentsUtf16","","",120,null],[12,"XftTextExtentsUtf8","","",120,null],[12,"XftTextRender16","","",120,null],[12,"XftTextRender16BE","","",120,null],[12,"XftTextRender16LE","","",120,null],[12,"XftTextRender32","","",120,null],[12,"XftTextRender32BE","","",120,null],[12,"XftTextRender32LE","","",120,null],[12,"XftTextRender8","","",120,null],[12,"XftTextRenderUtf16","","",120,null],[12,"XftTextRenderUtf8","","",120,null],[12,"XftUnlockFace","","",120,null],[12,"XftXlfdParse","","",120,null],[12,"XftFontOpen","","",120,null],[12,"XftListFonts","","",120,null],[3,"XftFont","","",null,null],[12,"ascent","","",121,null],[12,"descent","","",121,null],[12,"height","","",121,null],[12,"max_advance_width","","",121,null],[12,"charset","","",121,null],[12,"pattern","","",121,null],[3,"XftColor","","",null,null],[12,"pixel","","",122,null],[12,"color","","",122,null],[3,"XftCharSpec","","",null,null],[12,"ucs4","","",123,null],[12,"x","","",123,null],[12,"y","","",123,null],[3,"XftCharFontSpec","","",null,null],[12,"font","","",124,null],[12,"ucs4","","",124,null],[12,"x","","",124,null],[12,"y","","",124,null],[3,"XftFontSet","","",null,null],[12,"nfont","","",125,null],[12,"sfont","","",125,null],[12,"fonts","","",125,null],[3,"XftGlyphSpec","","",null,null],[12,"glyph","","",126,null],[12,"x","","",126,null],[12,"y","","",126,null],[3,"XftGlyphFontSpec","","",null,null],[12,"font","","",127,null],[12,"glyph","","",127,null],[12,"x","","",127,null],[12,"y","","",127,null],[4,"FT_FaceRec","","",null,null],[4,"FcCharSet","","",null,null],[4,"FcPattern","","",null,null],[4,"FcEndian","","",null,null],[13,"Big","","",128,null],[13,"Little","","",128,null],[4,"FcResult","","",null,null],[13,"Match","","",129,null],[13,"NoMatch","","",129,null],[13,"TypeMismatch","","",129,null],[13,"NoId","","",129,null],[13,"OutOfMemory","","",129,null],[4,"XftFontInfo","","",null,null],[4,"XftDraw","","",null,null],[4,"XftPattern","","",null,null],[6,"FT_UInt","","",null,null],[6,"FcChar32","","",null,null],[17,"XFT_FAMILY","","",null,null],[17,"XFT_STYLE","","",null,null],[17,"XFT_SLANT","","",null,null],[17,"XFT_WEIGHT","","",null,null],[17,"XFT_SIZE","","",null,null],[17,"XFT_PIXEL_SIZE","","",null,null],[17,"XFT_SPACING","","",null,null],[17,"XFT_FOUNDRY","","",null,null],[17,"XFT_ANTIALIAS","","",null,null],[17,"XFT_SLANT_ROMAN","","",null,null],[17,"XFT_SLANT_ITALIC","","",null,null],[17,"XFT_SLANT_OBLIQUE","","",null,null],[17,"XftTypeVoid","","",null,null],[17,"XftTypeInteger","","",null,null],[17,"XftTypeDouble","","",null,null],[17,"XftTypeString","","",null,null],[17,"XftTypeBool","","",null,null],[17,"XftTypeMatrix","","",null,null],[11,"open","","",120,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"xftfont"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"xftfont"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"xftfont"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"xftcolor"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"xftcolor"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"xftcolor"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"xftcharspec"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"xftcharspec"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"xftcharspec"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"xftcharfontspec"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"xftcharfontspec"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"xftcharfontspec"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"xftfontset"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"xftfontset"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"xftfontset"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"xftglyphspec"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"xftglyphspec"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"xftglyphspec"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"xftglyphfontspec"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"xftglyphfontspec"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"xftglyphfontspec"}}],[0,"xinerama","x11_dl","",null,null],[3,"Xlib","x11_dl::xinerama","",null,null],[12,"XineramaIsActive","","",130,null],[12,"XineramaQueryExtension","","",130,null],[12,"XineramaQueryScreens","","",130,null],[12,"XineramaQueryVersion","","",130,null],[12,"XPanoramiXAllocInfo","","",130,null],[12,"XPanoramiXGetScreenCount","","",130,null],[12,"XPanoramiXGetScreenSize","","",130,null],[12,"XPanoramiXGetState","","",130,null],[12,"XPanoramiXQueryExtension","","",130,null],[12,"XPanoramiXQueryVersion","","",130,null],[3,"XineramaScreenInfo","","",null,null],[12,"screen_number","","",131,null],[12,"x_org","","",131,null],[12,"y_org","","",131,null],[12,"width","","",131,null],[12,"height","","",131,null],[3,"XPanoramiXInfo","","",null,null],[12,"window","","",132,null],[12,"screen","","",132,null],[12,"State","","",132,null],[12,"width","","",132,null],[12,"height","","",132,null],[12,"ScreenCount","","",132,null],[12,"eventMask","","",132,null],[11,"open","","",130,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"xineramascreeninfo"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"xineramascreeninfo"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"xineramascreeninfo"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"xpanoramixinfo"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"xpanoramixinfo"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"xpanoramixinfo"}}],[0,"xinput","x11_dl","",null,null],[3,"XInput","x11_dl::xinput","",null,null],[12,"XAllowDeviceEvents","","",133,null],[12,"XChangeDeviceControl","","",133,null],[12,"XChangeDeviceDontPropagateList","","",133,null],[12,"XChangeDeviceKeyMapping","","",133,null],[12,"XChangeDeviceProperty","","",133,null],[12,"XChangeFeedbackControl","","",133,null],[12,"XChangeKeyboardDevice","","",133,null],[12,"XChangePointerDevice","","",133,null],[12,"XCloseDevice","","",133,null],[12,"XDeleteDeviceProperty","","",133,null],[12,"XDeviceBell","","",133,null],[12,"XFreeDeviceControl","","",133,null],[12,"XFreeDeviceList","","",133,null],[12,"XFreeDeviceMotionEvents","","",133,null],[12,"XFreeDeviceState","","",133,null],[12,"XFreeFeedbackList","","",133,null],[12,"XGetDeviceButtonMapping","","",133,null],[12,"XGetDeviceControl","","",133,null],[12,"XGetDeviceDontPropagateList","","",133,null],[12,"XGetDeviceFocus","","",133,null],[12,"XGetDeviceKeyMapping","","",133,null],[12,"XGetDeviceModifierMapping","","",133,null],[12,"XGetDeviceMotionEvents","","",133,null],[12,"XGetDeviceProperty","","",133,null],[12,"XGetExtensionVersion","","",133,null],[12,"XGetFeedbackControl","","",133,null],[12,"XGetSelectedExtensionEvents","","",133,null],[12,"XGrabDevice","","",133,null],[12,"XGrabDeviceButton","","",133,null],[12,"XGrabDeviceKey","","",133,null],[12,"XListDeviceProperties","","",133,null],[12,"XListInputDevices","","",133,null],[12,"XOpenDevice","","",133,null],[12,"XQueryDeviceState","","",133,null],[12,"XSelectExtensionEvent","","",133,null],[12,"XSendExtensionEvent","","",133,null],[12,"XSetDeviceButtonMapping","","",133,null],[12,"XSetDeviceFocus","","",133,null],[12,"XSetDeviceMode","","",133,null],[12,"XSetDeviceModifierMapping","","",133,null],[12,"XSetDeviceValuators","","",133,null],[12,"XUngrabDevice","","",133,null],[12,"XUngrabDeviceButton","","",133,null],[12,"XUngrabDeviceKey","","",133,null],[3,"XDevice","","",null,null],[12,"device_id","","",134,null],[12,"num_classes","","",134,null],[12,"classes","","",134,null],[3,"XDeviceControl","","",null,null],[12,"control","","",135,null],[12,"length","","",135,null],[3,"XDeviceInfo","","",null,null],[12,"id","","",136,null],[12,"type_","","",136,null],[12,"name","","",136,null],[12,"num_classes","","",136,null],[12,"use_","","",136,null],[12,"inputclassinfo","","",136,null],[3,"XDeviceState","","",null,null],[12,"device_id","","",137,null],[12,"num_classes","","",137,null],[12,"data","","",137,null],[3,"XDeviceTimeCoord","","",null,null],[12,"time","","",138,null],[12,"data","","",138,null],[3,"XExtensionVersion","","",null,null],[12,"present","","",139,null],[12,"major_version","","",139,null],[12,"minor_version","","",139,null],[3,"XFeedbackControl","","",null,null],[12,"class","","",140,null],[12,"length","","",140,null],[12,"id","","",140,null],[3,"XFeedbackState","","",null,null],[12,"class","","",141,null],[12,"length","","",141,null],[12,"id","","",141,null],[3,"XInputClass","","",null,null],[12,"class","","",142,null],[12,"length","","",142,null],[3,"XInputClassInfo","","",null,null],[12,"input_class","","",143,null],[12,"event_type_base","","",143,null],[4,"_XAnyClassinfo","","",null,null],[6,"XAnyClassPtr","","",null,null],[11,"open","","",133,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"xdevice"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"xdevice"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"xdevice"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"xdevicecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"xdevicecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"xdevicecontrol"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"xdeviceinfo"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"xdeviceinfo"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"xdeviceinfo"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"xdevicestate"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"xdevicestate"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"xdevicestate"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"xdevicetimecoord"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"xdevicetimecoord"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"xdevicetimecoord"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"xextensionversion"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"xextensionversion"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"xextensionversion"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"xfeedbackcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"xfeedbackcontrol"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"xfeedbackcontrol"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"xfeedbackstate"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"xfeedbackstate"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"xfeedbackstate"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"xinputclass"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"xinputclass"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"xinputclass"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"xinputclassinfo"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"xinputclassinfo"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"xinputclassinfo"}}],[0,"xinput2","x11_dl","",null,null],[3,"XInput2","x11_dl::xinput2","",null,null],[12,"XIAllowEvents","","",144,null],[12,"XIAllowTouchEvents","","",144,null],[12,"XIBarrierReleasePointer","","",144,null],[12,"XIBarrierReleasePointers","","",144,null],[12,"XIChangeHierarchy","","",144,null],[12,"XIChangeProperty","","",144,null],[12,"XIDefineCursor","","",144,null],[12,"XIDeleteProperty","","",144,null],[12,"XIFreeDeviceInfo","","",144,null],[12,"XIGetClientPointer","","",144,null],[12,"XIGetFocus","","",144,null],[12,"XIGetProperty","","",144,null],[12,"XIGetSelectedEvents","","",144,null],[12,"XIGrabButton","","",144,null],[12,"XIGrabDevice","","",144,null],[12,"XIGrabEnter","","",144,null],[12,"XIGrabFocusIn","","",144,null],[12,"XIGrabKeycode","","",144,null],[12,"XIGrabTouchBegin","","",144,null],[12,"XIListProperties","","",144,null],[12,"XIQueryDevice","","",144,null],[12,"XIQueryPointer","","",144,null],[12,"XIQueryVersion","","",144,null],[12,"XISelectEvents","","",144,null],[12,"XISetClientPointer","","",144,null],[12,"XISetFocus","","",144,null],[12,"XIUndefineCursor","","",144,null],[12,"XIUngrabButton","","",144,null],[12,"XIUngrabDevice","","",144,null],[12,"XIUngrabEnter","","",144,null],[12,"XIUngrabFocusIn","","",144,null],[12,"XIUngrabKeycode","","",144,null],[12,"XIUngrabTouchBegin","","",144,null],[12,"XIWarpPointer","","",144,null],[3,"Struct_Unnamed1","","",null,null],[12,"_type","","",145,null],[12,"name","","",145,null],[12,"send_core","","",145,null],[12,"enable","","",145,null],[3,"Struct_Unnamed2","","",null,null],[12,"_type","","",146,null],[12,"deviceid","","",146,null],[12,"return_mode","","",146,null],[12,"return_pointer","","",146,null],[12,"return_keyboard","","",146,null],[3,"Struct_Unnamed3","","",null,null],[12,"_type","","",147,null],[12,"deviceid","","",147,null],[12,"new_master","","",147,null],[3,"Struct_Unnamed4","","",null,null],[12,"_type","","",148,null],[12,"deviceid","","",148,null],[3,"Union_Unnamed5","","",null,null],[12,"_bindgen_data_","","",149,null],[3,"Struct_Unnamed6","","",null,null],[12,"base","","",150,null],[12,"latched","","",150,null],[12,"locked","","",150,null],[12,"effective","","",150,null],[3,"Struct_Unnamed7","","",null,null],[12,"mask_len","","",151,null],[12,"mask","","",151,null],[3,"Struct_Unnamed8","","",null,null],[12,"mask_len","","",152,null],[12,"mask","","",152,null],[12,"values","","",152,null],[3,"Struct_Unnamed9","","",null,null],[12,"deviceid","","",153,null],[12,"mask_len","","",153,null],[12,"mask","","",153,null],[3,"Struct_Unnamed10","","",null,null],[12,"_type","","",154,null],[12,"sourceid","","",154,null],[3,"Struct_Unnamed11","","",null,null],[12,"_type","","",155,null],[12,"sourceid","","",155,null],[12,"num_buttons","","",155,null],[12,"labels","","",155,null],[12,"state","","",155,null],[3,"Struct_Unnamed12","","",null,null],[12,"_type","","",156,null],[12,"sourceid","","",156,null],[12,"num_keycodes","","",156,null],[12,"keycodes","","",156,null],[3,"Struct_Unnamed13","","",null,null],[12,"_type","","",157,null],[12,"sourceid","","",157,null],[12,"number","","",157,null],[12,"label","","",157,null],[12,"min","","",157,null],[12,"max","","",157,null],[12,"value","","",157,null],[12,"resolution","","",157,null],[12,"mode","","",157,null],[3,"Struct_Unnamed14","","",null,null],[12,"_type","","",158,null],[12,"sourceid","","",158,null],[12,"number","","",158,null],[12,"scroll_type","","",158,null],[12,"increment","","",158,null],[12,"flags","","",158,null],[3,"Struct_Unnamed15","","",null,null],[12,"_type","","",159,null],[12,"sourceid","","",159,null],[12,"mode","","",159,null],[12,"num_touches","","",159,null],[3,"Struct_Unnamed16","","",null,null],[12,"deviceid","","",160,null],[12,"name","","",160,null],[12,"_use","","",160,null],[12,"attachment","","",160,null],[12,"enabled","","",160,null],[12,"num_classes","","",160,null],[12,"classes","","",160,null],[3,"Struct_Unnamed17","","",null,null],[12,"modifiers","","",161,null],[12,"status","","",161,null],[3,"Struct_Unnamed18","","",null,null],[12,"deviceid","","",162,null],[12,"barrier","","",162,null],[12,"eventid","","",162,null],[3,"Struct_Unnamed19","","",null,null],[12,"_type","","",163,null],[12,"serial","","",163,null],[12,"send_event","","",163,null],[12,"display","","",163,null],[12,"extension","","",163,null],[12,"evtype","","",163,null],[12,"time","","",163,null],[3,"Struct_Unnamed20","","",null,null],[12,"deviceid","","",164,null],[12,"attachment","","",164,null],[12,"_use","","",164,null],[12,"enabled","","",164,null],[12,"flags","","",164,null],[3,"Struct_Unnamed21","","",null,null],[12,"_type","","",165,null],[12,"serial","","",165,null],[12,"send_event","","",165,null],[12,"display","","",165,null],[12,"extension","","",165,null],[12,"evtype","","",165,null],[12,"time","","",165,null],[12,"flags","","",165,null],[12,"num_info","","",165,null],[12,"info","","",165,null],[3,"Struct_Unnamed22","","",null,null],[12,"_type","","",166,null],[12,"serial","","",166,null],[12,"send_event","","",166,null],[12,"display","","",166,null],[12,"extension","","",166,null],[12,"evtype","","",166,null],[12,"time","","",166,null],[12,"deviceid","","",166,null],[12,"sourceid","","",166,null],[12,"reason","","",166,null],[12,"num_classes","","",166,null],[12,"classes","","",166,null],[3,"Struct_Unnamed23","","",null,null],[12,"_type","","",167,null],[12,"serial","","",167,null],[12,"send_event","","",167,null],[12,"display","","",167,null],[12,"extension","","",167,null],[12,"evtype","","",167,null],[12,"time","","",167,null],[12,"deviceid","","",167,null],[12,"sourceid","","",167,null],[12,"detail","","",167,null],[12,"root","","",167,null],[12,"event","","",167,null],[12,"child","","",167,null],[12,"root_x","","",167,null],[12,"root_y","","",167,null],[12,"event_x","","",167,null],[12,"event_y","","",167,null],[12,"flags","","",167,null],[12,"buttons","","",167,null],[12,"valuators","","",167,null],[12,"mods","","",167,null],[12,"group","","",167,null],[3,"Struct_Unnamed24","","",null,null],[12,"_type","","",168,null],[12,"serial","","",168,null],[12,"send_event","","",168,null],[12,"display","","",168,null],[12,"extension","","",168,null],[12,"evtype","","",168,null],[12,"time","","",168,null],[12,"deviceid","","",168,null],[12,"sourceid","","",168,null],[12,"detail","","",168,null],[12,"flags","","",168,null],[12,"valuators","","",168,null],[12,"raw_values","","",168,null],[3,"Struct_Unnamed25","","",null,null],[12,"_type","","",169,null],[12,"serial","","",169,null],[12,"send_event","","",169,null],[12,"display","","",169,null],[12,"extension","","",169,null],[12,"evtype","","",169,null],[12,"time","","",169,null],[12,"deviceid","","",169,null],[12,"sourceid","","",169,null],[12,"detail","","",169,null],[12,"root","","",169,null],[12,"event","","",169,null],[12,"child","","",169,null],[12,"root_x","","",169,null],[12,"root_y","","",169,null],[12,"event_x","","",169,null],[12,"event_y","","",169,null],[12,"mode","","",169,null],[12,"focus","","",169,null],[12,"same_screen","","",169,null],[12,"buttons","","",169,null],[12,"mods","","",169,null],[12,"group","","",169,null],[3,"Struct_Unnamed26","","",null,null],[12,"_type","","",170,null],[12,"serial","","",170,null],[12,"send_event","","",170,null],[12,"display","","",170,null],[12,"extension","","",170,null],[12,"evtype","","",170,null],[12,"time","","",170,null],[12,"deviceid","","",170,null],[12,"property","","",170,null],[12,"what","","",170,null],[3,"Struct_Unnamed27","","",null,null],[12,"_type","","",171,null],[12,"serial","","",171,null],[12,"send_event","","",171,null],[12,"display","","",171,null],[12,"extension","","",171,null],[12,"evtype","","",171,null],[12,"time","","",171,null],[12,"deviceid","","",171,null],[12,"sourceid","","",171,null],[12,"touchid","","",171,null],[12,"root","","",171,null],[12,"event","","",171,null],[12,"child","","",171,null],[12,"flags","","",171,null],[3,"Struct_Unnamed28","","",null,null],[12,"_type","","",172,null],[12,"serial","","",172,null],[12,"send_event","","",172,null],[12,"display","","",172,null],[12,"extension","","",172,null],[12,"evtype","","",172,null],[12,"time","","",172,null],[12,"deviceid","","",172,null],[12,"sourceid","","",172,null],[12,"event","","",172,null],[12,"root","","",172,null],[12,"root_x","","",172,null],[12,"root_y","","",172,null],[12,"dx","","",172,null],[12,"dy","","",172,null],[12,"dtime","","",172,null],[12,"flags","","",172,null],[12,"barrier","","",172,null],[12,"eventid","","",172,null],[5,"XISetMask","","",null,null],[5,"XIClearMask","","",null,null],[5,"XIMaskIsSet","","",null,null],[6,"XIAddMasterInfo","","",null,null],[6,"XIRemoveMasterInfo","","",null,null],[6,"XIAttachSlaveInfo","","",null,null],[6,"XIDetachSlaveInfo","","",null,null],[6,"XIAnyHierarchyChangeInfo","","",null,null],[6,"XIModifierState","","",null,null],[6,"XIGroupState","","",null,null],[6,"XIButtonState","","",null,null],[6,"XIValuatorState","","",null,null],[6,"XIEventMask","","",null,null],[6,"XIAnyClassInfo","","",null,null],[6,"XIButtonClassInfo","","",null,null],[6,"XIKeyClassInfo","","",null,null],[6,"XIValuatorClassInfo","","",null,null],[6,"XIScrollClassInfo","","",null,null],[6,"XITouchClassInfo","","",null,null],[6,"XIDeviceInfo","","",null,null],[6,"XIGrabModifiers","","",null,null],[6,"BarrierEventID","","",null,null],[6,"XIBarrierReleasePointerInfo","","",null,null],[6,"XIEvent","","",null,null],[6,"XIHierarchyInfo","","",null,null],[6,"XIHierarchyEvent","","",null,null],[6,"XIDeviceChangedEvent","","",null,null],[6,"XIDeviceEvent","","",null,null],[6,"XIRawEvent","","",null,null],[6,"XIEnterEvent","","",null,null],[6,"XILeaveEvent","","",null,null],[6,"XIFocusInEvent","","",null,null],[6,"XIFocusOutEvent","","",null,null],[6,"XIPropertyEvent","","",null,null],[6,"XITouchOwnershipEvent","","",null,null],[6,"XIBarrierEvent","","",null,null],[17,"XInput_2_0","","",null,null],[17,"XI_2_Major","","",null,null],[17,"XI_2_Minor","","",null,null],[17,"XIPropertyDeleted","","",null,null],[17,"XIPropertyCreated","","",null,null],[17,"XIPropertyModified","","",null,null],[17,"XIPropModeReplace","","",null,null],[17,"XIPropModePrepend","","",null,null],[17,"XIPropModeAppend","","",null,null],[17,"XINotifyNormal","","",null,null],[17,"XINotifyGrab","","",null,null],[17,"XINotifyUngrab","","",null,null],[17,"XINotifyWhileGrabbed","","",null,null],[17,"XINotifyPassiveGrab","","",null,null],[17,"XINotifyPassiveUngrab","","",null,null],[17,"XINotifyAncestor","","",null,null],[17,"XINotifyVirtual","","",null,null],[17,"XINotifyInferior","","",null,null],[17,"XINotifyNonlinear","","",null,null],[17,"XINotifyNonlinearVirtual","","",null,null],[17,"XINotifyPointer","","",null,null],[17,"XINotifyPointerRoot","","",null,null],[17,"XINotifyDetailNone","","",null,null],[17,"XIGrabModeSync","","",null,null],[17,"XIGrabModeAsync","","",null,null],[17,"XIGrabModeTouch","","",null,null],[17,"XIGrabSuccess","","",null,null],[17,"XIAlreadyGrabbed","","",null,null],[17,"XIGrabInvalidTime","","",null,null],[17,"XIGrabNotViewable","","",null,null],[17,"XIGrabFrozen","","",null,null],[17,"XIGrabtypeButton","","",null,null],[17,"XIGrabtypeKeycode","","",null,null],[17,"XIGrabtypeEnter","","",null,null],[17,"XIGrabtypeFocusIn","","",null,null],[17,"XIGrabtypeTouchBegin","","",null,null],[17,"XIAnyButton","","",null,null],[17,"XIAnyKeycode","","",null,null],[17,"XIAsyncDevice","","",null,null],[17,"XISyncDevice","","",null,null],[17,"XIReplayDevice","","",null,null],[17,"XIAsyncPairedDevice","","",null,null],[17,"XIAsyncPair","","",null,null],[17,"XISyncPair","","",null,null],[17,"XIAcceptTouch","","",null,null],[17,"XIRejectTouch","","",null,null],[17,"XISlaveSwitch","","",null,null],[17,"XIDeviceChange","","",null,null],[17,"XIMasterAdded","","",null,null],[17,"XIMasterRemoved","","",null,null],[17,"XISlaveAdded","","",null,null],[17,"XISlaveRemoved","","",null,null],[17,"XISlaveAttached","","",null,null],[17,"XISlaveDetached","","",null,null],[17,"XIDeviceEnabled","","",null,null],[17,"XIDeviceDisabled","","",null,null],[17,"XIAddMaster","","",null,null],[17,"XIRemoveMaster","","",null,null],[17,"XIAttachSlave","","",null,null],[17,"XIDetachSlave","","",null,null],[17,"XIAttachToMaster","","",null,null],[17,"XIFloating","","",null,null],[17,"XIModeRelative","","",null,null],[17,"XIModeAbsolute","","",null,null],[17,"XIMasterPointer","","",null,null],[17,"XIMasterKeyboard","","",null,null],[17,"XISlavePointer","","",null,null],[17,"XISlaveKeyboard","","",null,null],[17,"XIFloatingSlave","","",null,null],[17,"XIKeyClass","","",null,null],[17,"XIButtonClass","","",null,null],[17,"XIValuatorClass","","",null,null],[17,"XIScrollClass","","",null,null],[17,"XITouchClass","","",null,null],[17,"XIScrollTypeVertical","","",null,null],[17,"XIScrollTypeHorizontal","","",null,null],[17,"XIScrollFlagNoEmulation","","",null,null],[17,"XIScrollFlagPreferred","","",null,null],[17,"XIKeyRepeat","","",null,null],[17,"XIPointerEmulated","","",null,null],[17,"XITouchPendingEnd","","",null,null],[17,"XITouchEmulatingPointer","","",null,null],[17,"XIBarrierPointerReleased","","",null,null],[17,"XIBarrierDeviceIsGrabbed","","",null,null],[17,"XIDirectTouch","","",null,null],[17,"XIDependentTouch","","",null,null],[17,"XIAllDevices","","",null,null],[17,"XIAllMasterDevices","","",null,null],[17,"XI_DeviceChanged","","",null,null],[17,"XI_KeyPress","","",null,null],[17,"XI_KeyRelease","","",null,null],[17,"XI_ButtonPress","","",null,null],[17,"XI_ButtonRelease","","",null,null],[17,"XI_Motion","","",null,null],[17,"XI_Enter","","",null,null],[17,"XI_Leave","","",null,null],[17,"XI_FocusIn","","",null,null],[17,"XI_FocusOut","","",null,null],[17,"XI_HierarchyChanged","","",null,null],[17,"XI_PropertyEvent","","",null,null],[17,"XI_RawKeyPress","","",null,null],[17,"XI_RawKeyRelease","","",null,null],[17,"XI_RawButtonPress","","",null,null],[17,"XI_RawButtonRelease","","",null,null],[17,"XI_RawMotion","","",null,null],[17,"XI_TouchBegin","","",null,null],[17,"XI_TouchUpdate","","",null,null],[17,"XI_TouchEnd","","",null,null],[17,"XI_TouchOwnership","","",null,null],[17,"XI_RawTouchBegin","","",null,null],[17,"XI_RawTouchUpdate","","",null,null],[17,"XI_RawTouchEnd","","",null,null],[17,"XI_BarrierHit","","",null,null],[17,"XI_BarrierLeave","","",null,null],[17,"XI_LASTEVENT","","",null,null],[17,"XI_DeviceChangedMask","","",null,null],[17,"XI_KeyPressMask","","",null,null],[17,"XI_KeyReleaseMask","","",null,null],[17,"XI_ButtonPressMask","","",null,null],[17,"XI_ButtonReleaseMask","","",null,null],[17,"XI_MotionMask","","",null,null],[17,"XI_EnterMask","","",null,null],[17,"XI_LeaveMask","","",null,null],[17,"XI_FocusInMask","","",null,null],[17,"XI_FocusOutMask","","",null,null],[17,"XI_HierarchyChangedMask","","",null,null],[17,"XI_PropertyEventMask","","",null,null],[17,"XI_RawKeyPressMask","","",null,null],[17,"XI_RawKeyReleaseMask","","",null,null],[17,"XI_RawButtonPressMask","","",null,null],[17,"XI_RawButtonReleaseMask","","",null,null],[17,"XI_RawMotionMask","","",null,null],[17,"XI_TouchBeginMask","","",null,null],[17,"XI_TouchEndMask","","",null,null],[17,"XI_TouchOwnershipChangedMask","","",null,null],[17,"XI_TouchUpdateMask","","",null,null],[17,"XI_RawTouchBeginMask","","",null,null],[17,"XI_RawTouchEndMask","","",null,null],[17,"XI_RawTouchUpdateMask","","",null,null],[17,"XI_BarrierHitMask","","",null,null],[17,"XI_BarrierLeaveMask","","",null,null],[11,"open","","",144,{"inputs":[],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"_type","","",149,null],[11,"add","","",149,null],[11,"remove","","",149,null],[11,"attach","","",149,null],[11,"detach","","",149,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"self"}}],[0,"xmd","x11_dl","",null,null],[6,"INT8","x11_dl::xmd","",null,null],[6,"INT16","","",null,null],[6,"INT32","","",null,null],[6,"INT64","","",null,null],[6,"CARD8","","",null,null],[6,"CARD16","","",null,null],[6,"CARD32","","",null,null],[6,"CARD64","","",null,null],[6,"BYTE","","",null,null],[6,"BOOL","","",null,null],[0,"xmu","x11_dl","",null,null],[3,"Xmu","x11_dl::xmu","",null,null],[12,"XmuAddCloseDisplayHook","","",173,null],[12,"XmuAddInitializer","","",173,null],[12,"XmuAllStandardColormaps","","",173,null],[12,"XmuAppendSegment","","",173,null],[12,"XmuAreaAnd","","",173,null],[12,"XmuAreaCopy","","",173,null],[12,"XmuAreaDup","","",173,null],[12,"XmuAreaNot","","",173,null],[12,"XmuAreaOrXor","","",173,null],[12,"XmuCallInitializers","","",173,null],[12,"XmuClientWindow","","",173,null],[12,"XmuCompareISOLatin1","","",173,null],[12,"XmuConvertStandardSelection","","",173,null],[12,"XmuCopyISOLatin1Lowered","","",173,null],[12,"XmuCopyISOLatin1Uppered","","",173,null],[12,"XmuCreateColormap","","",173,null],[12,"XmuCreatePixmapFromBitmap","","",173,null],[12,"XmuCreateStippledPixmap","","",173,null],[12,"XmuCursorNameToIndex","","",173,null],[12,"XmuCvtBackingStoreToString","","",173,null],[12,"XmuCvtFunctionToCallback","","",173,null],[12,"XmuCvtGravityToString","","",173,null],[12,"XmuCvtJustifyToString","","",173,null],[12,"XmuCvtLongToString","","",173,null],[12,"XmuCvtOrientationToString","","",173,null],[12,"XmuCvtShapeStyleToString","","",173,null],[12,"XmuCvtStringToBackingStore","","",173,null],[12,"XmuCvtStringToBitmap","","",173,null],[12,"XmuCvtStringToColorCursor","","",173,null],[12,"XmuCvtStringToCursor","","",173,null],[12,"XmuCvtStringToGravity","","",173,null],[12,"XmuCvtStringToJustify","","",173,null],[12,"XmuCvtStringToLong","","",173,null],[12,"XmuCvtStringToOrientation","","",173,null],[12,"XmuCvtStringToShapeStyle","","",173,null],[12,"XmuCvtStringToWidget","","",173,null],[12,"XmuCvtWidgetToString","","",173,null],[12,"XmuDeleteStandardColormap","","",173,null],[12,"XmuDestroyScanlineList","","",173,null],[12,"XmuDestroySegmentList","","",173,null],[12,"XmuDistinguishableColors","","",173,null],[12,"XmuDistinguishablePixels","","",173,null],[12,"XmuDQAddDisplay","","",173,null],[12,"XmuDQCreate","","",173,null],[12,"XmuDQDestroy","","",173,null],[12,"XmuDQLookupDisplay","","",173,null],[12,"XmuDQRemoveDisplay","","",173,null],[12,"XmuDrawLogo","","",173,null],[12,"XmuDrawRoundedRectangle","","",173,null],[12,"XmuFillRoundedRectangle","","",173,null],[12,"XmuGetAtomName","","",173,null],[12,"XmuGetColormapAllocation","","",173,null],[12,"XmuGetHostname","","",173,null],[12,"XmuInternAtom","","",173,null],[12,"XmuInternStrings","","",173,null],[12,"XmuLocateBitmapFile","","",173,null],[12,"XmuLocatePixmapFile","","",173,null],[12,"XmuLookupAPL","","",173,null],[12,"XmuLookupArabic","","",173,null],[12,"XmuLookupCloseDisplayHook","","",173,null],[12,"XmuLookupCyrillic","","",173,null],[12,"XmuLookupGreek","","",173,null],[12,"XmuLookupHebrew","","",173,null],[12,"XmuLookupJISX0201","","",173,null],[12,"XmuLookupKana","","",173,null],[12,"XmuLookupLatin1","","",173,null],[12,"XmuLookupLatin2","","",173,null],[12,"XmuLookupLatin3","","",173,null],[12,"XmuLookupLatin4","","",173,null],[12,"XmuLookupStandardColormap","","",173,null],[12,"XmuLookupString","","",173,null],[12,"XmuMakeAtom","","",173,null],[12,"XmuNameOfAtom","","",173,null],[12,"XmuNCopyISOLatin1Lowered","","",173,null],[12,"XmuNCopyISOLatin1Uppered","","",173,null],[12,"XmuNewArea","","",173,null],[12,"XmuNewCvtStringToWidget","","",173,null],[12,"XmuNewScanline","","",173,null],[12,"XmuNewSegment","","",173,null],[12,"XmuOptimizeArea","","",173,null],[12,"XmuOptimizeScanline","","",173,null],[12,"XmuPrintDefaultErrorMessage","","",173,null],[12,"XmuReadBitmapData","","",173,null],[12,"XmuReadBitmapDataFromFile","","",173,null],[12,"XmuRegisterExternalAgent","","",173,null],[12,"XmuReleaseStippledPixmap","","",173,null],[12,"XmuRemoveCloseDisplayHook","","",173,null],[12,"XmuReshapeWidget","","",173,null],[12,"XmuScanlineAnd","","",173,null],[12,"XmuScanlineAndSegment","","",173,null],[12,"XmuScanlineCopy","","",173,null],[12,"XmuScanlineEqu","","",173,null],[12,"XmuScanlineNot","","",173,null],[12,"XmuScanlineOr","","",173,null],[12,"XmuScanlineOrSegment","","",173,null],[12,"XmuScanlineXor","","",173,null],[12,"XmuScanlineXorSegment","","",173,null],[12,"XmuScreenOfWindow","","",173,null],[12,"XmuSimpleErrorHandler","","",173,null],[12,"XmuStandardColormap","","",173,null],[12,"XmuUpdateMapHints","","",173,null],[12,"XmuValidArea","","",173,null],[12,"XmuValidScanline","","",173,null],[12,"XmuVisualStandardColormaps","","",173,null],[12,"XmuWnCountOwnedResources","","",173,null],[12,"XmuWnFetchResources","","",173,null],[12,"XmuWnInitializeNodes","","",173,null],[12,"XmuWnNameToNode","","",173,null],[12,"XmuSnprintf","","",173,null],[12,"_XA_ATOM_PAIR","","",173,null],[12,"_XA_CHARACTER_POSITION","","",173,null],[12,"_XA_CLASS","","",173,null],[12,"_XA_CLIENT_WINDOW","","",173,null],[12,"_XA_CLIPBOARD","","",173,null],[12,"_XA_COMPOUND_TEXT","","",173,null],[12,"_XA_DECNET_ADDRESS","","",173,null],[12,"_XA_DELETE","","",173,null],[12,"_XA_FILENAME","","",173,null],[12,"_XA_HOSTNAME","","",173,null],[12,"_XA_IP_ADDRESS","","",173,null],[12,"_XA_LENGTH","","",173,null],[12,"_XA_LIST_LENGTH","","",173,null],[12,"_XA_NAME","","",173,null],[12,"_XA_NET_ADDRESS","","",173,null],[12,"_XA_NULL","","",173,null],[12,"_XA_OWNER_OS","","",173,null],[12,"_XA_SPAN","","",173,null],[12,"_XA_TARGETS","","",173,null],[12,"_XA_TEXT","","",173,null],[12,"_XA_TIMESTAMP","","",173,null],[12,"_XA_USER","","",173,null],[12,"_XA_UTF8_STRING","","",173,null],[3,"_AtomRec","","",null,null],[3,"_XmuArea","","",null,null],[3,"_XmuDisplayQueue","","",null,null],[3,"_XmuDisplayQueueEntry","","",null,null],[3,"_XmuScanline","","",null,null],[3,"_XmuSegment","","",null,null],[3,"_XmuWidgetNode","","",null,null],[6,"AtomPtr","","",null,null],[6,"XmuArea","","",null,null],[6,"XmuDisplayQueue","","",null,null],[6,"XmuDisplayQueueEntry","","",null,null],[6,"XmuScanline","","",null,null],[6,"XmuSegment","","",null,null],[6,"XmuWidgetNode","","",null,null],[11,"open","","",173,{"inputs":[],"output":{"name":"result"}}],[0,"xrecord","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xrecord","",null,null],[12,"XRecordAllocRange","","",174,null],[12,"XRecordCreateContext","","",174,null],[12,"XRecordDisableContext","","",174,null],[12,"XRecordEnableContext","","",174,null],[12,"XRecordEnableContextAsync","","",174,null],[12,"XRecordFreeContext","","",174,null],[12,"XRecordFreeData","","",174,null],[12,"XRecordFreeState","","",174,null],[12,"XRecordGetContext","","",174,null],[12,"XRecordIdBaseMask","","",174,null],[12,"XRecordProcessReplies","","",174,null],[12,"XRecordQueryVersion","","",174,null],[12,"XRecordRegisterClients","","",174,null],[12,"XRecordUnregisterClients","","",174,null],[3,"XRecordClientInfo","","",null,null],[12,"client","","",175,null],[12,"nranges","","",175,null],[12,"ranges","","",175,null],[3,"XRecordExtRange","","",null,null],[12,"ext_major","","",176,null],[12,"ext_minor","","",176,null],[3,"XRecordInterceptData","","",null,null],[12,"id_base","","",177,null],[12,"server_time","","",177,null],[12,"client_seq","","",177,null],[12,"category","","",177,null],[12,"client_swapped","","",177,null],[12,"data","","",177,null],[12,"data_len","","",177,null],[3,"XRecordRange","","",null,null],[12,"core_requests","","",178,null],[12,"core_replies","","",178,null],[12,"ext_requests","","",178,null],[12,"ext_replies","","",178,null],[12,"delivered_events","","",178,null],[12,"device_events","","",178,null],[12,"errors","","",178,null],[12,"client_started","","",178,null],[12,"client_died","","",178,null],[3,"XRecordRange8","","",null,null],[12,"first","","",179,null],[12,"last","","",179,null],[3,"XRecordRange16","","",null,null],[12,"first","","",180,null],[12,"last","","",180,null],[3,"XRecordState","","",null,null],[12,"enabled","","",181,null],[12,"datum_flags","","",181,null],[12,"nclients","","",181,null],[12,"client_info","","",181,null],[6,"XRecordClientSpec","","",null,null],[6,"XRecordContext","","",null,null],[17,"XRecordFromServerTime","","",null,null],[17,"XRecordFromClientTime","","",null,null],[17,"XRecordFromClientSequence","","",null,null],[17,"XRecordCurrentClients","","",null,null],[17,"XRecordFutureClients","","",null,null],[17,"XRecordAllClients","","",null,null],[17,"XRecordFromServer","","",null,null],[17,"XRecordFromClient","","",null,null],[17,"XRecordClientStarted","","",null,null],[17,"XRecordClientDied","","",null,null],[17,"XRecordStartOfData","","",null,null],[17,"XRecordEndOfData","","",null,null],[11,"open","","",174,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"xrecordclientinfo"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"xrecordclientinfo"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"xrecordclientinfo"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"xrecordextrange"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"xrecordextrange"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"xrecordextrange"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"xrecordinterceptdata"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"xrecordinterceptdata"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"xrecordinterceptdata"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"xrecordrange"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"xrecordrange"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"xrecordrange"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"xrecordrange8"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"xrecordrange8"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"xrecordrange8"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"xrecordrange16"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"xrecordrange16"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"xrecordrange16"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"xrecordstate"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"xrecordstate"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"xrecordstate"}}],[0,"xrender","x11_dl","",null,null],[3,"Xrender","x11_dl::xrender","",null,null],[12,"XRenderAddGlyphs","","",182,null],[12,"XRenderAddTraps","","",182,null],[12,"XRenderChangePicture","","",182,null],[12,"XRenderComposite","","",182,null],[12,"XRenderCompositeDoublePoly","","",182,null],[12,"XRenderCompositeString16","","",182,null],[12,"XRenderCompositeString32","","",182,null],[12,"XRenderCompositeString8","","",182,null],[12,"XRenderCompositeText16","","",182,null],[12,"XRenderCompositeText32","","",182,null],[12,"XRenderCompositeText8","","",182,null],[12,"XRenderCompositeTrapezoids","","",182,null],[12,"XRenderCompositeTriangles","","",182,null],[12,"XRenderCompositeTriFan","","",182,null],[12,"XRenderCompositeTriStrip","","",182,null],[12,"XRenderCreateAnimCursor","","",182,null],[12,"XRenderCreateConicalGradient","","",182,null],[12,"XRenderCreateCursor","","",182,null],[12,"XRenderCreateGlyphSet","","",182,null],[12,"XRenderCreateLinearGradient","","",182,null],[12,"XRenderCreatePicture","","",182,null],[12,"XRenderCreateRadialGradient","","",182,null],[12,"XRenderCreateSolidFill","","",182,null],[12,"XRenderFillRectangle","","",182,null],[12,"XRenderFillRectangles","","",182,null],[12,"XRenderFindFormat","","",182,null],[12,"XRenderFindStandardFormat","","",182,null],[12,"XRenderFindVisualFormat","","",182,null],[12,"XRenderFreeGlyphs","","",182,null],[12,"XRenderFreeGlyphSet","","",182,null],[12,"XRenderFreePicture","","",182,null],[12,"XRenderParseColor","","",182,null],[12,"XRenderQueryExtension","","",182,null],[12,"XRenderQueryFilters","","",182,null],[12,"XRenderQueryFormats","","",182,null],[12,"XRenderQueryPictIndexValues","","",182,null],[12,"XRenderQuerySubpixelOrder","","",182,null],[12,"XRenderQueryVersion","","",182,null],[12,"XRenderReferenceGlyphSet","","",182,null],[12,"XRenderSetPictureClipRectangles","","",182,null],[12,"XRenderSetPictureClipRegion","","",182,null],[12,"XRenderSetPictureFilter","","",182,null],[12,"XRenderSetPictureTransform","","",182,null],[12,"XRenderSetSubpixelOrder","","",182,null],[3,"_XAnimCursor","","",null,null],[12,"cursor","","",183,null],[12,"delay","","",183,null],[3,"_XCircle","","",null,null],[12,"x","","",184,null],[12,"y","","",184,null],[12,"radius","","",184,null],[3,"_XConicalGradient","","",null,null],[12,"center","","",185,null],[12,"angle","","",185,null],[3,"_XFilters","","",null,null],[12,"nfilter","","",186,null],[12,"filter","","",186,null],[12,"nalias","","",186,null],[12,"alias","","",186,null],[3,"_XGlyphElt8","","",null,null],[12,"glyphset","","",187,null],[12,"chars","","",187,null],[12,"nchars","","",187,null],[12,"xOff","","",187,null],[12,"yOff","","",187,null],[3,"_XGlyphElt16","","",null,null],[12,"glyphset","","",188,null],[12,"chars","","",188,null],[12,"nchars","","",188,null],[12,"xOff","","",188,null],[12,"yOff","","",188,null],[3,"_XGlyphElt32","","",null,null],[12,"glyphset","","",189,null],[12,"chars","","",189,null],[12,"nchars","","",189,null],[12,"xOff","","",189,null],[12,"yOff","","",189,null],[3,"_XGlyphInfo","","",null,null],[12,"width","","",190,null],[12,"height","","",190,null],[12,"x","","",190,null],[12,"y","","",190,null],[12,"xOff","","",190,null],[12,"yOff","","",190,null],[3,"_XIndexValue","","",null,null],[12,"pixel","","",191,null],[12,"red","","",191,null],[12,"green","","",191,null],[12,"blue","","",191,null],[12,"alpha","","",191,null],[3,"_XLinearGradient","","",null,null],[12,"p1","","",192,null],[12,"p2","","",192,null],[3,"_XLineFixed","","",null,null],[12,"p1","","",193,null],[12,"p2","","",193,null],[3,"_XPointDouble","","",null,null],[12,"x","","",194,null],[12,"y","","",194,null],[3,"_XPointFixed","","",null,null],[12,"x","","",195,null],[12,"y","","",195,null],[3,"_XRadialGradient","","",null,null],[12,"inner","","",196,null],[12,"outer","","",196,null],[3,"XRenderColor","","",null,null],[12,"red","","",197,null],[12,"green","","",197,null],[12,"blue","","",197,null],[12,"alpha","","",197,null],[3,"XRenderDirectFormat","","",null,null],[12,"red","","",198,null],[12,"redMask","","",198,null],[12,"green","","",198,null],[12,"greenMask","","",198,null],[12,"blue","","",198,null],[12,"blueMask","","",198,null],[12,"alpha","","",198,null],[12,"alphaMask","","",198,null],[3,"XRenderPictFormat","","",null,null],[12,"id","","",199,null],[12,"type_","","",199,null],[12,"depth","","",199,null],[12,"direct","","",199,null],[12,"colormap","","",199,null],[3,"_XRenderPictureAttributes","","",null,null],[12,"repeat","","",200,null],[12,"alpha_map","","",200,null],[12,"alpha_x_origin","","",200,null],[12,"alpha_y_origin","","",200,null],[12,"clip_x_origin","","",200,null],[12,"clip_y_origin","","",200,null],[12,"clip_mask","","",200,null],[12,"graphics_exposures","","",200,null],[12,"subwindow_mode","","",200,null],[12,"poly_edge","","",200,null],[12,"poly_mode","","",200,null],[12,"dither","","",200,null],[12,"component_alpha","","",200,null],[3,"_XSpanFix","","",null,null],[12,"left","","",201,null],[12,"right","","",201,null],[12,"y","","",201,null],[3,"_XTrap","","",null,null],[12,"top","","",202,null],[12,"bottom","","",202,null],[3,"_XTrapezoid","","",null,null],[12,"top","","",203,null],[12,"bottom","","",203,null],[12,"left","","",203,null],[12,"right","","",203,null],[3,"_XTriangle","","",null,null],[12,"p1","","",204,null],[12,"p2","","",204,null],[12,"p3","","",204,null],[3,"_XTransform","","",null,null],[12,"matrix","","",205,null],[6,"Glyph","","",null,null],[6,"GlyphSet","","",null,null],[6,"PictFormat","","",null,null],[6,"Picture","","",null,null],[6,"XDouble","","",null,null],[6,"XFixed","","",null,null],[6,"XAnimCursor","","",null,null],[6,"XCircle","","",null,null],[6,"XConicalGradient","","",null,null],[6,"XFilters","","",null,null],[6,"XGlyphElt8","","",null,null],[6,"XGlyphElt16","","",null,null],[6,"XGlyphElt32","","",null,null],[6,"XGlyphInfo","","",null,null],[6,"XIndexValue","","",null,null],[6,"XLinearGradient","","",null,null],[6,"XLineFixed","","",null,null],[6,"XPointDouble","","",null,null],[6,"XPointFixed","","",null,null],[6,"XRadialGradient","","",null,null],[6,"XRenderPictureAttributes","","",null,null],[6,"XSpanFix","","",null,null],[6,"XTrap","","",null,null],[6,"XTrapezoid","","",null,null],[6,"XTriangle","","",null,null],[6,"XTransform","","",null,null],[17,"PictFormatID","","",null,null],[17,"PictFormatType","","",null,null],[17,"PictFormatDepth","","",null,null],[17,"PictFormatRed","","",null,null],[17,"PictFormatRedMask","","",null,null],[17,"PictFormatGreen","","",null,null],[17,"PictFormatGreenMask","","",null,null],[17,"PictFormatBlue","","",null,null],[17,"PictFormatBlueMask","","",null,null],[17,"PictFormatAlpha","","",null,null],[17,"PictFormatAlphaMask","","",null,null],[17,"PictFormatColormap","","",null,null],[17,"BadPictFormat","","",null,null],[17,"BadPicture","","",null,null],[17,"BadPictOp","","",null,null],[17,"BadGlyphSet","","",null,null],[17,"BadGlyph","","",null,null],[17,"RenderNumberErrors","","",null,null],[17,"PictTypeIndexed","","",null,null],[17,"PictTypeDirect","","",null,null],[17,"PictOpMinimum","","",null,null],[17,"PictOpClear","","",null,null],[17,"PictOpSrc","","",null,null],[17,"PictOpDst","","",null,null],[17,"PictOpOver","","",null,null],[17,"PictOpOverReverse","","",null,null],[17,"PictOpIn","","",null,null],[17,"PictOpInReverse","","",null,null],[17,"PictOpOut","","",null,null],[17,"PictOpOutReverse","","",null,null],[17,"PictOpAtop","","",null,null],[17,"PictOpAtopReverse","","",null,null],[17,"PictOpXor","","",null,null],[17,"PictOpAdd","","",null,null],[17,"PictOpSaturate","","",null,null],[17,"PictOpMaximum","","",null,null],[17,"PictOpDisjointMinimum","","",null,null],[17,"PictOpDisjointClear","","",null,null],[17,"PictOpDisjointSrc","","",null,null],[17,"PictOpDisjointDst","","",null,null],[17,"PictOpDisjointOver","","",null,null],[17,"PictOpDisjointOverReverse","","",null,null],[17,"PictOpDisjointIn","","",null,null],[17,"PictOpDisjointInReverse","","",null,null],[17,"PictOpDisjointOut","","",null,null],[17,"PictOpDisjointOutReverse","","",null,null],[17,"PictOpDisjointAtop","","",null,null],[17,"PictOpDisjointAtopReverse","","",null,null],[17,"PictOpDisjointXor","","",null,null],[17,"PictOpDisjointMaximum","","",null,null],[17,"PictOpConjointMinimum","","",null,null],[17,"PictOpConjointClear","","",null,null],[17,"PictOpConjointSrc","","",null,null],[17,"PictOpConjointDst","","",null,null],[17,"PictOpConjointOver","","",null,null],[17,"PictOpConjointOverReverse","","",null,null],[17,"PictOpConjointIn","","",null,null],[17,"PictOpConjointInReverse","","",null,null],[17,"PictOpConjointOut","","",null,null],[17,"PictOpConjointOutReverse","","",null,null],[17,"PictOpConjointAtop","","",null,null],[17,"PictOpConjointAtopReverse","","",null,null],[17,"PictOpConjointXor","","",null,null],[17,"PictOpConjointMaximum","","",null,null],[17,"PictOpBlendMinimum","","",null,null],[17,"PictOpMultiply","","",null,null],[17,"PictOpScreen","","",null,null],[17,"PictOpOverlay","","",null,null],[17,"PictOpDarken","","",null,null],[17,"PictOpLighten","","",null,null],[17,"PictOpColorDodge","","",null,null],[17,"PictOpColorBurn","","",null,null],[17,"PictOpHardLight","","",null,null],[17,"PictOpSoftLight","","",null,null],[17,"PictOpDifference","","",null,null],[17,"PictOpExclusion","","",null,null],[17,"PictOpHSLHue","","",null,null],[17,"PictOpHSLSaturation","","",null,null],[17,"PictOpHSLColor","","",null,null],[17,"PictOpHSLLuminosity","","",null,null],[17,"PictOpBlendMaximum","","",null,null],[17,"PolyEdgeSharp","","",null,null],[17,"PolyEdgeSmooth","","",null,null],[17,"PolyModePrecise","","",null,null],[17,"PolyModeImprecise","","",null,null],[17,"CPRepeat","","",null,null],[17,"CPAlphaMap","","",null,null],[17,"CPAlphaXOrigin","","",null,null],[17,"CPAlphaYOrigin","","",null,null],[17,"CPClipXOrigin","","",null,null],[17,"CPClipYOrigin","","",null,null],[17,"CPClipMask","","",null,null],[17,"CPGraphicsExposure","","",null,null],[17,"CPSubwindowMode","","",null,null],[17,"CPPolyEdge","","",null,null],[17,"CPPolyMode","","",null,null],[17,"CPDither","","",null,null],[17,"CPComponentAlpha","","",null,null],[17,"CPLastBit","","",null,null],[17,"FilterNearest","","",null,null],[17,"FilterBilinear","","",null,null],[17,"FilterConvolution","","",null,null],[17,"FilterFast","","",null,null],[17,"FilterGood","","",null,null],[17,"FilterBest","","",null,null],[17,"SubPixelUnknown","","",null,null],[17,"SubPixelHorizontalRGB","","",null,null],[17,"SubPixelHorizontalBGR","","",null,null],[17,"SubPixelVerticalRGB","","",null,null],[17,"SubPixelVerticalBGR","","",null,null],[17,"SubPixelNone","","",null,null],[17,"RepeatNone","","",null,null],[17,"RepeatNormal","","",null,null],[17,"RepeatPad","","",null,null],[17,"RepeatReflect","","",null,null],[11,"open","","",182,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"_xanimcursor"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"_xanimcursor"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"_xanimcursor"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"_xcircle"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"_xcircle"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"_xcircle"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"_xconicalgradient"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"_xconicalgradient"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"_xconicalgradient"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"_xfilters"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"self"},{"name":"_xfilters"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"_xfilters"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"_xglyphelt8"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"self"},{"name":"_xglyphelt8"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphelt8"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"_xglyphelt16"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"_xglyphelt16"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphelt16"}}],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"_xglyphelt32"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"_xglyphelt32"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphelt32"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"_xglyphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"_xglyphinfo"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphinfo"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"_xindexvalue"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"_xindexvalue"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"_xindexvalue"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"_xlineargradient"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"_xlineargradient"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"_xlineargradient"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"_xlinefixed"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"_xlinefixed"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"_xlinefixed"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"_xpointdouble"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"_xpointdouble"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"_xpointdouble"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"_xpointfixed"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"_xpointfixed"}],"output":{"name":"bool"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"_xpointfixed"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"_xradialgradient"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"_xradialgradient"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"_xradialgradient"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"xrendercolor"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"self"},{"name":"xrendercolor"}],"output":{"name":"bool"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"xrendercolor"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"xrenderdirectformat"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"self"},{"name":"xrenderdirectformat"}],"output":{"name":"bool"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"xrenderdirectformat"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"xrenderpictformat"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"self"},{"name":"xrenderpictformat"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"xrenderpictformat"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"_xrenderpictureattributes"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"self"},{"name":"_xrenderpictureattributes"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"_xrenderpictureattributes"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"_xspanfix"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"self"},{"name":"_xspanfix"}],"output":{"name":"bool"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"_xspanfix"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"_xtrap"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"_xtrap"}],"output":{"name":"bool"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"_xtrap"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"_xtrapezoid"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"_xtrapezoid"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"_xtrapezoid"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"_xtriangle"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"self"},{"name":"_xtriangle"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"_xtriangle"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"_xtransform"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"_xtransform"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"_xtransform"}}],[0,"xss","x11_dl","",null,null],[3,"Xss","x11_dl::xss","",null,null],[12,"XScreenSaverQueryExtension","","",206,null],[12,"XScreenSaverQueryVersion","","",206,null],[12,"XScreenSaverAllocInfo","","",206,null],[12,"XScreenSaverQueryInfo","","",206,null],[12,"XScreenSaverSelectInput","","",206,null],[12,"XScreenSaverSetAttributes","","",206,null],[12,"XScreenSaverUnsetAttributes","","",206,null],[12,"XScreenSaverRegister","","",206,null],[12,"XScreenSaverUnregister","","",206,null],[12,"XScreenSaverGetRegistered","","",206,null],[12,"XScreenSaverSuspend","","",206,null],[3,"XScreenSaverInfo","","",null,null],[12,"window","","",207,null],[12,"state","","",207,null],[12,"kind","","",207,null],[12,"til_or_since","","",207,null],[12,"idle","","",207,null],[12,"eventMask","","",207,null],[3,"XScreenSaverNotifyEvent","","",null,null],[12,"type_","","",208,null],[12,"serial","","",208,null],[12,"send_event","","",208,null],[12,"display","","",208,null],[12,"window","","",208,null],[12,"root","","",208,null],[12,"state","","",208,null],[12,"kind","","",208,null],[12,"forced","","",208,null],[12,"time","","",208,null],[17,"ScreenSaverName","","",null,null],[17,"ScreenSaverPropertyName","","",null,null],[17,"ScreenSaverNotifyMask","","",null,null],[17,"ScreenSaverCycleMask","","",null,null],[17,"ScreenSaverMajorVersion","","",null,null],[17,"ScreenSaverMinorVersion","","",null,null],[17,"ScreenSaverOff","","",null,null],[17,"ScreenSaverOn","","",null,null],[17,"ScreenSaverCycle","","",null,null],[17,"ScreenSaverDisabled","","",null,null],[17,"ScreenSaverBlanked","","",null,null],[17,"ScreenSaverInternal","","",null,null],[17,"ScreenSaverExternal","","",null,null],[17,"ScreenSaverNotify","","",null,null],[17,"ScreenSaverNumberEvents","","",null,null],[11,"open","","",206,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"xscreensaverinfo"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"xscreensaverinfo"}],"output":{"name":"bool"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"xscreensaverinfo"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"xscreensavernotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"xscreensavernotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xscreensavernotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xscreensavernotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xss","",208,{"inputs":[{"name":"xevent"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"from","","",208,{"inputs":[{"name":"xevent"}],"output":{"name":"xscreensavernotifyevent"}}],[0,"xt","x11_dl","",null,null],[3,"Xt","x11_dl::xt","",null,null],[12,"XtAddActions","","",209,null],[12,"XtAddCallback","","",209,null],[12,"XtAddCallbacks","","",209,null],[12,"XtAddConverter","","",209,null],[12,"XtAddEventHandler","","",209,null],[12,"XtAddExposureToRegion","","",209,null],[12,"XtAddGrab","","",209,null],[12,"XtAddInput","","",209,null],[12,"XtAddRawEventHandler","","",209,null],[12,"XtAddSignal","","",209,null],[12,"XtAddTimeOut","","",209,null],[12,"XtAddWorkProc","","",209,null],[12,"XtAllocateGC","","",209,null],[12,"XtAppAddActionHook","","",209,null],[12,"XtAppAddActions","","",209,null],[12,"XtAppAddBlockHook","","",209,null],[12,"XtAppAddConverter","","",209,null],[12,"XtAppAddInput","","",209,null],[12,"XtAppAddSignal","","",209,null],[12,"XtAppAddTimeOut","","",209,null],[12,"XtAppAddWorkProc","","",209,null],[12,"XtAppCreateShell","","",209,null],[12,"XtAppError","","",209,null],[12,"XtAppErrorMsg","","",209,null],[12,"XtAppGetErrorDatabase","","",209,null],[12,"XtAppGetErrorDatabaseText","","",209,null],[12,"XtAppGetExitFlag","","",209,null],[12,"XtAppGetSelectionTimeout","","",209,null],[12,"XtAppInitialize","","",209,null],[12,"XtAppLock","","",209,null],[12,"XtAppMainLoop","","",209,null],[12,"XtAppNextEvent","","",209,null],[12,"XtAppPeekEvent","","",209,null],[12,"XtAppPending","","",209,null],[12,"XtAppProcessEvent","","",209,null],[12,"XtAppReleaseCacheRefs","","",209,null],[12,"XtAppSetErrorHandler","","",209,null],[12,"XtAppSetErrorMsgHandler","","",209,null],[12,"XtAppSetExitFlag","","",209,null],[12,"XtAppSetFallbackResources","","",209,null],[12,"XtAppSetSelectionTimeout","","",209,null],[12,"XtAppSetTypeConverter","","",209,null],[12,"XtAppSetWarningHandler","","",209,null],[12,"XtAppSetWarningMsgHandler","","",209,null],[12,"XtAppUnlock","","",209,null],[12,"XtAppWarning","","",209,null],[12,"XtAppWarningMsg","","",209,null],[12,"XtAugmentTranslations","","",209,null],[12,"XtBuildEventMask","","",209,null],[12,"XtCallAcceptFocus","","",209,null],[12,"XtCallActionProc","","",209,null],[12,"XtCallbackExclusive","","",209,null],[12,"XtCallbackNone","","",209,null],[12,"XtCallbackNonexclusive","","",209,null],[12,"XtCallbackPopdown","","",209,null],[12,"XtCallbackReleaseCacheRef","","",209,null],[12,"XtCallbackReleaseCacheRefList","","",209,null],[12,"XtCallCallbackList","","",209,null],[12,"XtCallCallbacks","","",209,null],[12,"XtCallConverter","","",209,null],[12,"XtCalloc","","",209,null],[12,"XtCancelSelectionRequest","","",209,null],[12,"XtChangeManagedSet","","",209,null],[12,"XtClass","","",209,null],[12,"XtCloseDisplay","","",209,null],[12,"XtConfigureWidget","","",209,null],[12,"XtConvert","","",209,null],[12,"XtConvertAndStore","","",209,null],[12,"XtConvertCase","","",209,null],[12,"XtCreateApplicationContext","","",209,null],[12,"XtCreateApplicationShell","","",209,null],[12,"XtCreateManagedWidget","","",209,null],[12,"XtCreatePopupShell","","",209,null],[12,"XtCreateSelectionRequest","","",209,null],[12,"XtCreateWidget","","",209,null],[12,"XtCreateWindow","","",209,null],[12,"XtCvtColorToPixel","","",209,null],[12,"XtCvtIntToBool","","",209,null],[12,"XtCvtIntToBoolean","","",209,null],[12,"XtCvtIntToColor","","",209,null],[12,"XtCvtIntToFloat","","",209,null],[12,"XtCvtIntToFont","","",209,null],[12,"XtCvtIntToPixel","","",209,null],[12,"XtCvtIntToPixmap","","",209,null],[12,"XtCvtIntToShort","","",209,null],[12,"XtCvtIntToUnsignedChar","","",209,null],[12,"XtCvtStringToAcceleratorTable","","",209,null],[12,"XtCvtStringToAtom","","",209,null],[12,"XtCvtStringToBool","","",209,null],[12,"XtCvtStringToBoolean","","",209,null],[12,"XtCvtStringToCommandArgArray","","",209,null],[12,"XtCvtStringToCursor","","",209,null],[12,"XtCvtStringToDimension","","",209,null],[12,"XtCvtStringToDirectoryString","","",209,null],[12,"XtCvtStringToDisplay","","",209,null],[12,"XtCvtStringToFile","","",209,null],[12,"XtCvtStringToFloat","","",209,null],[12,"XtCvtStringToFont","","",209,null],[12,"XtCvtStringToFontSet","","",209,null],[12,"XtCvtStringToFontStruct","","",209,null],[12,"XtCvtStringToGravity","","",209,null],[12,"XtCvtStringToInitialState","","",209,null],[12,"XtCvtStringToInt","","",209,null],[12,"XtCvtStringToPixel","","",209,null],[12,"XtCvtStringToRestartStyle","","",209,null],[12,"XtCvtStringToShort","","",209,null],[12,"XtCvtStringToTranslationTable","","",209,null],[12,"XtCvtStringToUnsignedChar","","",209,null],[12,"XtCvtStringToVisual","","",209,null],[12,"XtDatabase","","",209,null],[12,"XtDestroyApplicationContext","","",209,null],[12,"XtDestroyGC","","",209,null],[12,"XtDestroyWidget","","",209,null],[12,"XtDirectConvert","","",209,null],[12,"XtDisownSelection","","",209,null],[12,"XtDispatchEvent","","",209,null],[12,"XtDispatchEventToWidget","","",209,null],[12,"XtDisplay","","",209,null],[12,"XtDisplayInitialize","","",209,null],[12,"XtDisplayOfObject","","",209,null],[12,"XtDisplayStringConversionWarning","","",209,null],[12,"XtDisplayToApplicationContext","","",209,null],[12,"XtError","","",209,null],[12,"XtErrorMsg","","",209,null],[12,"XtFindFile","","",209,null],[12,"XtFree","","",209,null],[12,"XtGetActionKeysym","","",209,null],[12,"XtGetActionList","","",209,null],[12,"XtGetApplicationNameAndClass","","",209,null],[12,"XtGetApplicationResources","","",209,null],[12,"XtGetClassExtension","","",209,null],[12,"XtGetConstraintResourceList","","",209,null],[12,"XtGetDisplays","","",209,null],[12,"XtGetErrorDatabase","","",209,null],[12,"XtGetErrorDatabaseText","","",209,null],[12,"XtGetGC","","",209,null],[12,"XtGetKeyboardFocusWidget","","",209,null],[12,"XtGetKeysymTable","","",209,null],[12,"XtGetMultiClickTime","","",209,null],[12,"XtGetResourceList","","",209,null],[12,"XtGetSelectionParameters","","",209,null],[12,"XtGetSelectionRequest","","",209,null],[12,"XtGetSelectionTimeout","","",209,null],[12,"XtGetSelectionValue","","",209,null],[12,"XtGetSelectionValueIncremental","","",209,null],[12,"XtGetSelectionValues","","",209,null],[12,"XtGetSelectionValuesIncremental","","",209,null],[12,"XtGetSubresources","","",209,null],[12,"XtGetSubvalues","","",209,null],[12,"XtGetValues","","",209,null],[12,"XtGrabButton","","",209,null],[12,"XtGrabKey","","",209,null],[12,"XtGrabKeyboard","","",209,null],[12,"XtGrabPointer","","",209,null],[12,"XtHasCallbacks","","",209,null],[12,"XtHooksOfDisplay","","",209,null],[12,"XtInitialize","","",209,null],[12,"XtInitializeWidgetClass","","",209,null],[12,"XtInsertEventHandler","","",209,null],[12,"XtInsertEventTypeHandler","","",209,null],[12,"XtInsertRawEventHandler","","",209,null],[12,"XtInstallAccelerators","","",209,null],[12,"XtInstallAllAccelerators","","",209,null],[12,"XtIsApplicationShell","","",209,null],[12,"XtIsComposite","","",209,null],[12,"XtIsConstraint","","",209,null],[12,"XtIsManaged","","",209,null],[12,"XtIsObject","","",209,null],[12,"XtIsOverrideShell","","",209,null],[12,"XtIsRealized","","",209,null],[12,"XtIsRectObj","","",209,null],[12,"XtIsSensitive","","",209,null],[12,"XtIsSessionShell","","",209,null],[12,"XtIsShell","","",209,null],[12,"XtIsSubclass","","",209,null],[12,"XtIsTopLevelShell","","",209,null],[12,"XtIsTransientShell","","",209,null],[12,"XtIsVendorShell","","",209,null],[12,"XtIsWidget","","",209,null],[12,"XtIsWMShell","","",209,null],[12,"XtKeysymToKeycodeList","","",209,null],[12,"XtLastEventProcessed","","",209,null],[12,"XtLastTimestampProcessed","","",209,null],[12,"XtMainLoop","","",209,null],[12,"XtMakeGeometryRequest","","",209,null],[12,"XtMakeResizeRequest","","",209,null],[12,"XtMalloc","","",209,null],[12,"XtManageChild","","",209,null],[12,"XtManageChildren","","",209,null],[12,"XtMapWidget","","",209,null],[12,"XtMenuPopupAction","","",209,null],[12,"XtMergeArgLists","","",209,null],[12,"XtMoveWidget","","",209,null],[12,"XtName","","",209,null],[12,"XtNameToWidget","","",209,null],[12,"XtNewString","","",209,null],[12,"XtNextEvent","","",209,null],[12,"XtNoticeSignal","","",209,null],[12,"XtOpenApplication","","",209,null],[12,"XtOpenDisplay","","",209,null],[12,"XtOverrideTranslations","","",209,null],[12,"XtOwnSelection","","",209,null],[12,"XtOwnSelectionIncremental","","",209,null],[12,"XtParent","","",209,null],[12,"XtParseAcceleratorTable","","",209,null],[12,"XtParseTranslationTable","","",209,null],[12,"XtPeekEvent","","",209,null],[12,"XtPending","","",209,null],[12,"XtPopdown","","",209,null],[12,"XtPopup","","",209,null],[12,"XtPopupSpringLoaded","","",209,null],[12,"XtProcessEvent","","",209,null],[12,"XtProcessLock","","",209,null],[12,"XtProcessUnlock","","",209,null],[12,"XtQueryGeometry","","",209,null],[12,"XtRealizeWidget","","",209,null],[12,"XtRealloc","","",209,null],[12,"XtRegisterCaseConverter","","",209,null],[12,"XtRegisterDrawable","","",209,null],[12,"XtRegisterExtensionSelector","","",209,null],[12,"XtRegisterGrabAction","","",209,null],[12,"XtReleaseGC","","",209,null],[12,"XtReleasePropertyAtom","","",209,null],[12,"XtRemoveActionHook","","",209,null],[12,"XtRemoveAllCallbacks","","",209,null],[12,"XtRemoveBlockHook","","",209,null],[12,"XtRemoveCallback","","",209,null],[12,"XtRemoveCallbacks","","",209,null],[12,"XtRemoveEventHandler","","",209,null],[12,"XtRemoveEventTypeHandler","","",209,null],[12,"XtRemoveGrab","","",209,null],[12,"XtRemoveInput","","",209,null],[12,"XtRemoveRawEventHandler","","",209,null],[12,"XtRemoveSignal","","",209,null],[12,"XtRemoveTimeOut","","",209,null],[12,"XtRemoveWorkProc","","",209,null],[12,"XtReservePropertyAtom","","",209,null],[12,"XtResizeWidget","","",209,null],[12,"XtResizeWindow","","",209,null],[12,"XtResolvePathname","","",209,null],[12,"XtScreen","","",209,null],[12,"XtScreenDatabase","","",209,null],[12,"XtScreenOfObject","","",209,null],[12,"XtSendSelectionRequest","","",209,null],[12,"XtSessionGetToken","","",209,null],[12,"XtSessionReturnToken","","",209,null],[12,"XtSetErrorHandler","","",209,null],[12,"XtSetErrorMsgHandler","","",209,null],[12,"XtSetEventDispatcher","","",209,null],[12,"XtSetKeyboardFocus","","",209,null],[12,"XtSetKeyTranslator","","",209,null],[12,"XtSetLanguageProc","","",209,null],[12,"XtSetMappedWhenManaged","","",209,null],[12,"XtSetMultiClickTime","","",209,null],[12,"XtSetSelectionParameters","","",209,null],[12,"XtSetSelectionTimeout","","",209,null],[12,"XtSetSensitive","","",209,null],[12,"XtSetSubvalues","","",209,null],[12,"XtSetTypeConverter","","",209,null],[12,"XtSetValues","","",209,null],[12,"XtSetWarningHandler","","",209,null],[12,"XtSetWarningMsgHandler","","",209,null],[12,"XtSetWMColormapWindows","","",209,null],[12,"XtStringConversionWarning","","",209,null],[12,"XtSuperclass","","",209,null],[12,"XtToolkitInitialize","","",209,null],[12,"XtToolkitThreadInitialize","","",209,null],[12,"XtTranslateCoords","","",209,null],[12,"XtTranslateKey","","",209,null],[12,"XtTranslateKeycode","","",209,null],[12,"XtUngrabButton","","",209,null],[12,"XtUngrabKey","","",209,null],[12,"XtUngrabKeyboard","","",209,null],[12,"XtUngrabPointer","","",209,null],[12,"XtUninstallTranslations","","",209,null],[12,"XtUnmanageChild","","",209,null],[12,"XtUnmanageChildren","","",209,null],[12,"XtUnmapWidget","","",209,null],[12,"XtUnrealizeWidget","","",209,null],[12,"XtUnregisterDrawable","","",209,null],[12,"XtWarning","","",209,null],[12,"XtWarningMsg","","",209,null],[12,"XtWidgetToApplicationContext","","",209,null],[12,"XtWindow","","",209,null],[12,"XtWindowOfObject","","",209,null],[12,"XtWindowToWidget","","",209,null],[12,"XtAsprintf","","",209,null],[12,"XtVaAppCreateShell","","",209,null],[12,"XtVaAppInitialize","","",209,null],[12,"XtVaCreateArgsList","","",209,null],[12,"XtVaCreateManagedWidget","","",209,null],[12,"XtVaCreatePopupShell","","",209,null],[12,"XtVaCreateWidget","","",209,null],[12,"XtVaGetApplicationResources","","",209,null],[12,"XtVaGetSubresources","","",209,null],[12,"XtVaGetSubvalues","","",209,null],[12,"XtVaGetValues","","",209,null],[12,"XtVaOpenApplication","","",209,null],[12,"XtVaSetSubvalues","","",209,null],[12,"XtVaSetValues","","",209,null],[3,"Arg","","",null,null],[3,"SubstitutionRec","","",null,null],[3,"_TranslationData","","",null,null],[3,"_WidgetClassRec","","",null,null],[3,"_WidgetRec","","",null,null],[3,"_XtActionsRec","","",null,null],[3,"_XtAppStruct","","",null,null],[3,"_XtCallbackRec","","",null,null],[3,"_XtCheckpointTokenRec","","",null,null],[3,"XtConvertArgRec","","",null,null],[3,"_XtResource","","",null,null],[3,"XtWidgetGeometry","","",null,null],[6,"XtCallbackStatus","","",null,null],[6,"XtGeometryResult","","",null,null],[6,"XtGrabKind","","",null,null],[6,"XtListPosition","","",null,null],[6,"ArgList","","",null,null],[6,"Substitution","","",null,null],[6,"Widget","","",null,null],[6,"WidgetClass","","",null,null],[6,"XtAccelerators","","",null,null],[6,"XtActionList","","",null,null],[6,"XtActionsRec","","",null,null],[6,"XtAppContext","","",null,null],[6,"XtCallbackList","","",null,null],[6,"XtCallbackRec","","",null,null],[6,"XtCheckpointToken","","",null,null],[6,"XtCheckpointTokenRec","","",null,null],[6,"XtConvertArgList","","",null,null],[6,"XtResource","","",null,null],[6,"XtResourceList","","",null,null],[6,"XtTranslations","","",null,null],[11,"open","","",209,{"inputs":[],"output":{"name":"result"}}],[0,"xtest","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xtest","",null,null],[12,"XTestCompareCurrentCursorWithWindow","","",210,null],[12,"XTestCompareCursorWithWindow","","",210,null],[12,"XTestDiscard","","",210,null],[12,"XTestFakeButtonEvent","","",210,null],[12,"XTestFakeDeviceButtonEvent","","",210,null],[12,"XTestFakeDeviceKeyEvent","","",210,null],[12,"XTestFakeDeviceMotionEvent","","",210,null],[12,"XTestFakeKeyEvent","","",210,null],[12,"XTestFakeMotionEvent","","",210,null],[12,"XTestFakeProximityEvent","","",210,null],[12,"XTestFakeRelativeMotionEvent","","",210,null],[12,"XTestGrabControl","","",210,null],[12,"XTestQueryExtension","","",210,null],[12,"XTestSetGContextOfGC","","",210,null],[12,"XTestSetVisualIDOfVisual","","",210,null],[11,"open","","",210,{"inputs":[],"output":{"name":"result"}}],[0,"xlib_xcb","x11_dl","",null,null],[3,"Xlib_xcb","x11_dl::xlib_xcb","",null,null],[12,"XGetXCBConnection","","",211,null],[6,"xcb_connection_t","","",null,null],[11,"open","","",211,{"inputs":[],"output":{"name":"result"}}],[0,"xrandr","x11_dl","",null,null],[3,"Xrandr","x11_dl::xrandr","",null,null],[12,"XRRAddOutputMode","","",212,null],[12,"XRRAllocGamma","","",212,null],[12,"XRRAllocModeInfo","","",212,null],[12,"XRRAllocateMonitor","","",212,null],[12,"XRRChangeOutputProperty","","",212,null],[12,"XRRChangeProviderProperty","","",212,null],[12,"XRRConfigCurrentConfiguration","","",212,null],[12,"XRRConfigCurrentRate","","",212,null],[12,"XRRConfigRates","","",212,null],[12,"XRRConfigRotations","","",212,null],[12,"XRRConfigSizes","","",212,null],[12,"XRRConfigTimes","","",212,null],[12,"XRRConfigureOutputProperty","","",212,null],[12,"XRRConfigureProviderProperty","","",212,null],[12,"XRRCreateMode","","",212,null],[12,"XRRDeleteMonitor","","",212,null],[12,"XRRDeleteOutputMode","","",212,null],[12,"XRRDeleteOutputProperty","","",212,null],[12,"XRRDeleteProviderProperty","","",212,null],[12,"XRRDestroyMode","","",212,null],[12,"XRRFreeCrtcInfo","","",212,null],[12,"XRRFreeGamma","","",212,null],[12,"XRRFreeModeInfo","","",212,null],[12,"XRRFreeMonitors","","",212,null],[12,"XRRFreeOutputInfo","","",212,null],[12,"XRRFreePanning","","",212,null],[12,"XRRFreeProviderInfo","","",212,null],[12,"XRRFreeProviderResources","","",212,null],[12,"XRRFreeScreenConfigInfo","","",212,null],[12,"XRRFreeScreenResources","","",212,null],[12,"XRRGetCrtcGamma","","",212,null],[12,"XRRGetCrtcGammaSize","","",212,null],[12,"XRRGetCrtcInfo","","",212,null],[12,"XRRGetCrtcTransform","","",212,null],[12,"XRRGetMonitors","","",212,null],[12,"XRRGetOutputInfo","","",212,null],[12,"XRRGetOutputPrimary","","",212,null],[12,"XRRGetOutputProperty","","",212,null],[12,"XRRGetPanning","","",212,null],[12,"XRRGetProviderInfo","","",212,null],[12,"XRRGetProviderProperty","","",212,null],[12,"XRRGetProviderResources","","",212,null],[12,"XRRGetScreenInfo","","",212,null],[12,"XRRGetScreenResources","","",212,null],[12,"XRRGetScreenResourcesCurrent","","",212,null],[12,"XRRGetScreenSizeRange","","",212,null],[12,"XRRListOutputProperties","","",212,null],[12,"XRRListProviderProperties","","",212,null],[12,"XRRQueryExtension","","",212,null],[12,"XRRQueryOutputProperty","","",212,null],[12,"XRRQueryProviderProperty","","",212,null],[12,"XRRQueryVersion","","",212,null],[12,"XRRRates","","",212,null],[12,"XRRRootToScreen","","",212,null],[12,"XRRRotations","","",212,null],[12,"XRRSelectInput","","",212,null],[12,"XRRSetCrtcConfig","","",212,null],[12,"XRRSetCrtcGamma","","",212,null],[12,"XRRSetCrtcTransform","","",212,null],[12,"XRRSetMonitor","","",212,null],[12,"XRRSetOutputPrimary","","",212,null],[12,"XRRSetPanning","","",212,null],[12,"XRRSetProviderOffloadSink","","",212,null],[12,"XRRSetProviderOutputSource","","",212,null],[12,"XRRSetScreenConfig","","",212,null],[12,"XRRSetScreenConfigAndRate","","",212,null],[12,"XRRSetScreenSize","","",212,null],[12,"XRRSizes","","",212,null],[12,"XRRTimes","","",212,null],[12,"XRRUpdateConfiguration","","",212,null],[3,"XRRScreenSize","","",null,null],[12,"width","","",213,null],[12,"height","","",213,null],[12,"mwidth","","",213,null],[12,"mheight","","",213,null],[3,"XRRScreenConfiguration","","",null,null],[3,"XRRModeInfo","","",null,null],[12,"id","","",214,null],[12,"width","","",214,null],[12,"height","","",214,null],[12,"dotClock","","",214,null],[12,"hSyncStart","","",214,null],[12,"hSyncEnd","","",214,null],[12,"hTotal","","",214,null],[12,"hSkew","","",214,null],[12,"vSyncStart","","",214,null],[12,"vSyncEnd","","",214,null],[12,"vTotal","","",214,null],[12,"name","","",214,null],[12,"nameLength","","",214,null],[12,"modeFlags","","",214,null],[3,"XRRScreenResources","","",null,null],[12,"timestamp","","",215,null],[12,"configTimestamp","","",215,null],[12,"ncrtc","","",215,null],[12,"crtcs","","",215,null],[12,"noutput","","",215,null],[12,"outputs","","",215,null],[12,"nmode","","",215,null],[12,"modes","","",215,null],[3,"XRROutputInfo","","",null,null],[12,"timestamp","","",216,null],[12,"crtc","","",216,null],[12,"name","","",216,null],[12,"nameLen","","",216,null],[12,"mm_width","","",216,null],[12,"mm_height","","",216,null],[12,"connection","","",216,null],[12,"subpixel_order","","",216,null],[12,"ncrtc","","",216,null],[12,"crtcs","","",216,null],[12,"nclone","","",216,null],[12,"clones","","",216,null],[12,"nmode","","",216,null],[12,"npreferred","","",216,null],[12,"modes","","",216,null],[3,"XRRPropertyInfo","","",null,null],[12,"pending","","",217,null],[12,"range","","",217,null],[12,"immutable","","",217,null],[12,"num_values","","",217,null],[12,"values","","",217,null],[3,"XRRCrtcInfo","","",null,null],[12,"timestamp","","",218,null],[12,"x","","",218,null],[12,"y","","",218,null],[12,"width","","",218,null],[12,"height","","",218,null],[12,"mode","","",218,null],[12,"rotation","","",218,null],[12,"noutput","","",218,null],[12,"outputs","","",218,null],[12,"rotations","","",218,null],[12,"npossible","","",218,null],[12,"possible","","",218,null],[3,"XRRCrtcGamma","","",null,null],[12,"size","","",219,null],[12,"red","","",219,null],[12,"green","","",219,null],[12,"blue","","",219,null],[3,"XRRCrtcTransformAttributes","","",null,null],[12,"pendingTransform","","",220,null],[12,"pendingFilter","","",220,null],[12,"pendingNparams","","",220,null],[12,"pendingParams","","",220,null],[12,"currentTransform","","",220,null],[12,"currentFilter","","",220,null],[12,"currentNparams","","",220,null],[12,"currentParams","","",220,null],[3,"XRRPanning","","",null,null],[12,"timestamp","","",221,null],[12,"left","","",221,null],[12,"top","","",221,null],[12,"width","","",221,null],[12,"height","","",221,null],[12,"track_left","","",221,null],[12,"track_top","","",221,null],[12,"track_width","","",221,null],[12,"track_height","","",221,null],[12,"border_left","","",221,null],[12,"border_top","","",221,null],[12,"border_right","","",221,null],[12,"border_bottom","","",221,null],[3,"XRRProviderResources","","",null,null],[12,"timestamp","","",222,null],[12,"nproviders","","",222,null],[12,"providers","","",222,null],[3,"XRRProviderInfo","","",null,null],[12,"capabilities","","",223,null],[12,"ncrtcs","","",223,null],[12,"crtcs","","",223,null],[12,"noutputs","","",223,null],[12,"outputs","","",223,null],[12,"name","","",223,null],[12,"nassociatedproviders","","",223,null],[12,"associated_providers","","",223,null],[12,"associated_capability","","",223,null],[12,"nameLen","","",223,null],[3,"XRRMonitorInfo","","",null,null],[12,"name","","",224,null],[12,"primary","","",224,null],[12,"automatic","","",224,null],[12,"noutput","","",224,null],[12,"x","","",224,null],[12,"y","","",224,null],[12,"width","","",224,null],[12,"height","","",224,null],[12,"mwidth","","",224,null],[12,"mheight","","",224,null],[12,"outputs","","",224,null],[3,"XRRScreenChangeNotifyEvent","","",null,null],[12,"type_","","",225,null],[12,"serial","","",225,null],[12,"send_event","","",225,null],[12,"display","","",225,null],[12,"window","","",225,null],[12,"root","","",225,null],[12,"timestamp","","",225,null],[12,"config_timestamp","","",225,null],[12,"size_index","","",225,null],[12,"subpixel_order","","",225,null],[12,"rotation","","",225,null],[12,"width","","",225,null],[12,"height","","",225,null],[12,"mwidth","","",225,null],[12,"mheight","","",225,null],[3,"XRRNotifyEvent","","",null,null],[12,"type_","","",226,null],[12,"serial","","",226,null],[12,"send_event","","",226,null],[12,"display","","",226,null],[12,"window","","",226,null],[12,"subtype","","",226,null],[3,"XRROutputChangeNotifyEvent","","",null,null],[12,"type_","","",227,null],[12,"serial","","",227,null],[12,"send_event","","",227,null],[12,"display","","",227,null],[12,"window","","",227,null],[12,"subtype","","",227,null],[12,"output","","",227,null],[12,"crtc","","",227,null],[12,"mode","","",227,null],[12,"rotation","","",227,null],[12,"connection","","",227,null],[12,"subpixel_order","","",227,null],[3,"XRRCrtcChangeNotifyEvent","","",null,null],[12,"type_","","",228,null],[12,"serial","","",228,null],[12,"send_event","","",228,null],[12,"display","","",228,null],[12,"window","","",228,null],[12,"subtype","","",228,null],[12,"crtc","","",228,null],[12,"mode","","",228,null],[12,"rotation","","",228,null],[12,"x","","",228,null],[12,"y","","",228,null],[12,"width","","",228,null],[12,"height","","",228,null],[3,"XRROutputPropertyNotifyEvent","","",null,null],[12,"type_","","",229,null],[12,"serial","","",229,null],[12,"send_event","","",229,null],[12,"display","","",229,null],[12,"window","","",229,null],[12,"subtype","","",229,null],[12,"output","","",229,null],[12,"property","","",229,null],[12,"timestamp","","",229,null],[12,"state","","",229,null],[3,"XRRProviderChangeNotifyEvent","","",null,null],[12,"type_","","",230,null],[12,"serial","","",230,null],[12,"send_event","","",230,null],[12,"display","","",230,null],[12,"window","","",230,null],[12,"subtype","","",230,null],[12,"provider","","",230,null],[12,"timestamp","","",230,null],[12,"current_role","","",230,null],[3,"XRRProviderPropertyNotifyEvent","","",null,null],[12,"type_","","",231,null],[12,"serial","","",231,null],[12,"send_event","","",231,null],[12,"display","","",231,null],[12,"window","","",231,null],[12,"subtype","","",231,null],[12,"provider","","",231,null],[12,"property","","",231,null],[12,"timestamp","","",231,null],[12,"state","","",231,null],[3,"XRRResourceChangeNotifyEvent","","",null,null],[12,"type_","","",232,null],[12,"serial","","",232,null],[12,"send_event","","",232,null],[12,"display","","",232,null],[12,"window","","",232,null],[12,"subtype","","",232,null],[12,"timestamp","","",232,null],[3,"Xrandr_2_2_0","","",null,null],[12,"XRRAddOutputMode","","",233,null],[12,"XRRAllocGamma","","",233,null],[12,"XRRAllocModeInfo","","",233,null],[12,"XRRChangeOutputProperty","","",233,null],[12,"XRRChangeProviderProperty","","",233,null],[12,"XRRConfigCurrentConfiguration","","",233,null],[12,"XRRConfigCurrentRate","","",233,null],[12,"XRRConfigRates","","",233,null],[12,"XRRConfigRotations","","",233,null],[12,"XRRConfigSizes","","",233,null],[12,"XRRConfigTimes","","",233,null],[12,"XRRConfigureOutputProperty","","",233,null],[12,"XRRConfigureProviderProperty","","",233,null],[12,"XRRCreateMode","","",233,null],[12,"XRRDeleteOutputMode","","",233,null],[12,"XRRDeleteOutputProperty","","",233,null],[12,"XRRDeleteProviderProperty","","",233,null],[12,"XRRDestroyMode","","",233,null],[12,"XRRFreeCrtcInfo","","",233,null],[12,"XRRFreeGamma","","",233,null],[12,"XRRFreeModeInfo","","",233,null],[12,"XRRFreeOutputInfo","","",233,null],[12,"XRRFreePanning","","",233,null],[12,"XRRFreeProviderInfo","","",233,null],[12,"XRRFreeProviderResources","","",233,null],[12,"XRRFreeScreenConfigInfo","","",233,null],[12,"XRRFreeScreenResources","","",233,null],[12,"XRRGetCrtcGamma","","",233,null],[12,"XRRGetCrtcGammaSize","","",233,null],[12,"XRRGetCrtcInfo","","",233,null],[12,"XRRGetCrtcTransform","","",233,null],[12,"XRRGetOutputInfo","","",233,null],[12,"XRRGetOutputPrimary","","",233,null],[12,"XRRGetOutputProperty","","",233,null],[12,"XRRGetPanning","","",233,null],[12,"XRRGetProviderInfo","","",233,null],[12,"XRRGetProviderProperty","","",233,null],[12,"XRRGetProviderResources","","",233,null],[12,"XRRGetScreenInfo","","",233,null],[12,"XRRGetScreenResources","","",233,null],[12,"XRRGetScreenResourcesCurrent","","",233,null],[12,"XRRGetScreenSizeRange","","",233,null],[12,"XRRListOutputProperties","","",233,null],[12,"XRRListProviderProperties","","",233,null],[12,"XRRQueryExtension","","",233,null],[12,"XRRQueryOutputProperty","","",233,null],[12,"XRRQueryProviderProperty","","",233,null],[12,"XRRQueryVersion","","",233,null],[12,"XRRRates","","",233,null],[12,"XRRRootToScreen","","",233,null],[12,"XRRRotations","","",233,null],[12,"XRRSelectInput","","",233,null],[12,"XRRSetCrtcConfig","","",233,null],[12,"XRRSetCrtcGamma","","",233,null],[12,"XRRSetCrtcTransform","","",233,null],[12,"XRRSetOutputPrimary","","",233,null],[12,"XRRSetPanning","","",233,null],[12,"XRRSetProviderOffloadSink","","",233,null],[12,"XRRSetProviderOutputSource","","",233,null],[12,"XRRSetScreenConfig","","",233,null],[12,"XRRSetScreenConfigAndRate","","",233,null],[12,"XRRSetScreenSize","","",233,null],[12,"XRRSizes","","",233,null],[12,"XRRTimes","","",233,null],[12,"XRRUpdateConfiguration","","",233,null],[6,"Connection","","",null,null],[6,"Rotation","","",null,null],[6,"SizeID","","",null,null],[6,"SubpixelOrder","","",null,null],[6,"RROutput","","",null,null],[6,"RRCrtc","","",null,null],[6,"RRMode","","",null,null],[6,"RRProvider","","",null,null],[6,"XRRModeFlags","","",null,null],[17,"RANDR_NAME","","",null,null],[17,"RANDR_MAJOR","","",null,null],[17,"RANDR_MINOR","","",null,null],[17,"RRNumberErrors","","",null,null],[17,"RRNumberEvents","","",null,null],[17,"RRNumberRequests","","",null,null],[17,"X_RRQueryVersion","","",null,null],[17,"X_RROldGetScreenInfo","","",null,null],[17,"X_RRSetScreenConfig","","",null,null],[17,"X_RROldScreenChangeSelectInput","","",null,null],[17,"X_RRSelectInput","","",null,null],[17,"X_RRGetScreenInfo","","",null,null],[17,"X_RRGetScreenSizeRange","","",null,null],[17,"X_RRSetScreenSize","","",null,null],[17,"X_RRGetScreenResources","","",null,null],[17,"X_RRGetOutputInfo","","",null,null],[17,"X_RRListOutputProperties","","",null,null],[17,"X_RRQueryOutputProperty","","",null,null],[17,"X_RRConfigureOutputProperty","","",null,null],[17,"X_RRChangeOutputProperty","","",null,null],[17,"X_RRDeleteOutputProperty","","",null,null],[17,"X_RRGetOutputProperty","","",null,null],[17,"X_RRCreateMode","","",null,null],[17,"X_RRDestroyMode","","",null,null],[17,"X_RRAddOutputMode","","",null,null],[17,"X_RRDeleteOutputMode","","",null,null],[17,"X_RRGetCrtcInfo","","",null,null],[17,"X_RRSetCrtcConfig","","",null,null],[17,"X_RRGetCrtcGammaSize","","",null,null],[17,"X_RRGetCrtcGamma","","",null,null],[17,"X_RRSetCrtcGamma","","",null,null],[17,"X_RRGetScreenResourcesCurrent","","",null,null],[17,"X_RRSetCrtcTransform","","",null,null],[17,"X_RRGetCrtcTransform","","",null,null],[17,"X_RRGetPanning","","",null,null],[17,"X_RRSetPanning","","",null,null],[17,"X_RRSetOutputPrimary","","",null,null],[17,"X_RRGetOutputPrimary","","",null,null],[17,"X_RRGetProviders","","",null,null],[17,"X_RRGetProviderInfo","","",null,null],[17,"X_RRSetProviderOffloadSink","","",null,null],[17,"X_RRSetProviderOutputSource","","",null,null],[17,"X_RRListProviderProperties","","",null,null],[17,"X_RRQueryProviderProperty","","",null,null],[17,"X_RRConfigureProviderProperty","","",null,null],[17,"X_RRChangeProviderProperty","","",null,null],[17,"X_RRDeleteProviderProperty","","",null,null],[17,"X_RRGetProviderProperty","","",null,null],[17,"X_RRGetMonitors","","",null,null],[17,"X_RRSetMonitor","","",null,null],[17,"X_RRDeleteMonitor","","",null,null],[17,"RRTransformUnit","","",null,null],[17,"RRTransformScaleUp","","",null,null],[17,"RRTransformScaleDown","","",null,null],[17,"RRTransformProjective","","",null,null],[17,"RRScreenChangeNotifyMask","","",null,null],[17,"RRCrtcChangeNotifyMask","","",null,null],[17,"RROutputChangeNotifyMask","","",null,null],[17,"RROutputPropertyNotifyMask","","",null,null],[17,"RRProviderChangeNotifyMask","","",null,null],[17,"RRProviderPropertyNotifyMask","","",null,null],[17,"RRResourceChangeNotifyMask","","",null,null],[17,"RRScreenChangeNotify","","",null,null],[17,"RRNotify","","",null,null],[17,"RRNotify_CrtcChange","","",null,null],[17,"RRNotify_OutputChange","","",null,null],[17,"RRNotify_OutputProperty","","",null,null],[17,"RRNotify_ProviderChange","","",null,null],[17,"RRNotify_ProviderProperty","","",null,null],[17,"RRNotify_ResourceChange","","",null,null],[17,"RR_Rotate_0","","",null,null],[17,"RR_Rotate_90","","",null,null],[17,"RR_Rotate_180","","",null,null],[17,"RR_Rotate_270","","",null,null],[17,"RR_Reflect_X","","",null,null],[17,"RR_Reflect_Y","","",null,null],[17,"RRSetConfigSuccess","","",null,null],[17,"RRSetConfigInvalidConfigTime","","",null,null],[17,"RRSetConfigInvalidTime","","",null,null],[17,"RRSetConfigFailed","","",null,null],[17,"RR_HSyncPositive","","",null,null],[17,"RR_HSyncNegative","","",null,null],[17,"RR_VSyncPositive","","",null,null],[17,"RR_VSyncNegative","","",null,null],[17,"RR_Interlace","","",null,null],[17,"RR_DoubleScan","","",null,null],[17,"RR_CSync","","",null,null],[17,"RR_CSyncPositive","","",null,null],[17,"RR_CSyncNegative","","",null,null],[17,"RR_HSkewPresent","","",null,null],[17,"RR_BCast","","",null,null],[17,"RR_PixelMultiplex","","",null,null],[17,"RR_DoubleClock","","",null,null],[17,"RR_ClockDivideBy2","","",null,null],[17,"RR_Connected","","",null,null],[17,"RR_Disconnected","","",null,null],[17,"RR_UnknownConnection","","",null,null],[17,"BadRROutput","","",null,null],[17,"BadRRCrtc","","",null,null],[17,"BadRRMode","","",null,null],[17,"BadRRProvider","","",null,null],[17,"RR_PROPERTY_BACKLIGHT","","",null,null],[17,"RR_PROPERTY_RANDR_EDID","","",null,null],[17,"RR_PROPERTY_SIGNAL_FORMAT","","",null,null],[17,"RR_PROPERTY_SIGNAL_PROPERTIES","","",null,null],[17,"RR_PROPERTY_CONNECTOR_TYPE","","",null,null],[17,"RR_PROPERTY_CONNECTOR_NUMBER","","",null,null],[17,"RR_PROPERTY_COMPATIBILITY_LIST","","",null,null],[17,"RR_PROPERTY_CLONE_LIST","","",null,null],[17,"RR_PROPERTY_BORDER","","",null,null],[17,"RR_PROPERTY_BORDER_DIMENSIONS","","",null,null],[17,"RR_PROPERTY_GUID","","",null,null],[17,"RR_PROPERTY_RANDR_TILE","","",null,null],[17,"RR_Capability_None","","",null,null],[17,"RR_Capability_SourceOutput","","",null,null],[17,"RR_Capability_SinkOutput","","",null,null],[17,"RR_Capability_SourceOffload","","",null,null],[17,"RR_Capability_SinkOffload","","",null,null],[11,"open","","",212,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"xrrscreensize"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"xrrscreensize"}],"output":{"name":"bool"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreensize"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"xrrmodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"self"},{"name":"xrrmodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"xrrmodeinfo"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"xrrscreenresources"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"xrrscreenresources"}],"output":{"name":"bool"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenresources"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"xrroutputinfo"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"self"},{"name":"xrroutputinfo"}],"output":{"name":"bool"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputinfo"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"xrrpropertyinfo"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"self"},{"name":"xrrpropertyinfo"}],"output":{"name":"bool"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"xrrpropertyinfo"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"xrrcrtcinfo"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"xrrcrtcinfo"}],"output":{"name":"bool"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcinfo"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"xrrcrtcgamma"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"xrrcrtcgamma"}],"output":{"name":"bool"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcgamma"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"xrrcrtctransformattributes"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"xrrcrtctransformattributes"}],"output":{"name":"bool"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtctransformattributes"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"xrrpanning"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"xrrpanning"}],"output":{"name":"bool"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"xrrpanning"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"xrrproviderresources"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"xrrproviderresources"}],"output":{"name":"bool"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderresources"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"xrrproviderinfo"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"xrrproviderinfo"}],"output":{"name":"bool"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderinfo"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"xrrmonitorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"self"},{"name":"xrrmonitorinfo"}],"output":{"name":"bool"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"xrrmonitorinfo"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"xrrnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"xrrnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"xrrnotifyevent"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"xrroutputchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"xrroutputchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"self"},{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"self"},{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"self"},{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",225,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"from","","",225,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrnotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrnotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrnotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrnotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",226,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrnotifyevent"}}],[11,"from","","",226,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrnotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrroutputchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrroutputchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",227,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"from","","",227,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",228,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"from","","",228,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",229,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"from","","",229,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",230,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"from","","",230,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",231,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"from","","",231,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"as_mut","x11_dl::xlib","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",232,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"from","","",232,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"open","","",233,{"inputs":[],"output":{"name":"result"}}]],"paths":[[4,"OpenErrorKind"],[3,"OpenError"],[3,"Xlib"],[3,"XEvent"],[3,"XAnyEvent"],[3,"XButtonEvent"],[3,"XCirculateEvent"],[3,"XCirculateRequestEvent"],[3,"XClientMessageEvent"],[3,"XColormapEvent"],[3,"XConfigureEvent"],[3,"XConfigureRequestEvent"],[3,"XCreateWindowEvent"],[3,"XCrossingEvent"],[3,"XDestroyWindowEvent"],[3,"XErrorEvent"],[3,"XExposeEvent"],[3,"XFocusChangeEvent"],[3,"XGraphicsExposeEvent"],[3,"XGravityEvent"],[3,"XKeyEvent"],[3,"XKeymapEvent"],[3,"XMapEvent"],[3,"XMappingEvent"],[3,"XMapRequestEvent"],[3,"XMotionEvent"],[3,"XNoExposeEvent"],[3,"XPropertyEvent"],[3,"XReparentEvent"],[3,"XResizeRequestEvent"],[3,"XSelectionClearEvent"],[3,"XSelectionEvent"],[3,"XSelectionRequestEvent"],[3,"XUnmapEvent"],[3,"XVisibilityEvent"],[3,"_XkbCompatMapRec"],[3,"_XkbDesc"],[3,"_XkbIndicatorRec"],[3,"_XkbKeyAliasRec"],[3,"_XkbKeyNameRec"],[3,"_XkbNamesRec"],[3,"XkbAnyEvent"],[3,"XkbNewKeyboardNotifyEvent"],[3,"_XkbMapNotifyEvent"],[3,"XkbStateNotifyEvent"],[3,"_XkbControlsNotifyEvent"],[3,"XkbIndicatorNotifyEvent"],[3,"_XkbNamesNotifyEvent"],[3,"XkbCompatMapNotifyEvent"],[3,"XkbBellNotifyEvent"],[3,"XkbActionMessageEvent"],[3,"XkbAccessXNotifyEvent"],[3,"_XkbExtensionDeviceNotifyEvent"],[3,"Depth"],[3,"Screen"],[3,"ScreenFormat"],[3,"Visual"],[3,"XArc"],[3,"XChar2b"],[3,"XCharStruct"],[3,"XClassHint"],[3,"XColor"],[3,"XComposeStatus"],[3,"XExtCodes"],[3,"XExtData"],[3,"XFontProp"],[3,"XFontSetExtents"],[3,"XFontStruct"],[3,"XGCValues"],[3,"XGenericEventCookie"],[3,"XHostAddress"],[3,"XIconSize"],[3,"XImage"],[3,"XKeyboardControl"],[3,"XKeyboardState"],[3,"XmbTextItem"],[3,"XModifierKeymap"],[3,"XOMCharSetList"],[3,"XPixmapFormatValues"],[3,"XPoint"],[3,"XRectangle"],[3,"XrmOptionDescRec"],[3,"XrmValue"],[3,"XSegment"],[3,"XSetWindowAttributes"],[3,"XSizeHints"],[3,"XStandardColormap"],[3,"XTextItem"],[3,"XTextItem16"],[3,"XTextProperty"],[3,"XTimeCoord"],[3,"XVisualInfo"],[3,"XwcTextItem"],[3,"XWindowAttributes"],[3,"XWindowChanges"],[3,"XWMHints"],[3,"AspectRatio"],[3,"ImageFns"],[3,"XkbEvent"],[3,"ClientMessageData"],[3,"Xext"],[3,"Glx"],[3,"Xcursor"],[3,"_XcursorAnimate"],[3,"_XcursorChunkHeader"],[3,"_XcursorComment"],[3,"_XcursorComments"],[3,"_XcursorCursors"],[3,"_XcursorFile"],[3,"_XcursorFileHeader"],[3,"_XcursorFileToc"],[3,"_XcursorImage"],[3,"_XcursorImages"],[3,"Xf86vmode"],[3,"XF86VidModeGamma"],[3,"XF86VidModeModeInfo"],[3,"XF86VidModeModeLine"],[3,"XF86VidModeMonitor"],[3,"XF86VidModeSyncRange"],[3,"XF86VidModeNotifyEvent"],[3,"Xft"],[3,"XftFont"],[3,"XftColor"],[3,"XftCharSpec"],[3,"XftCharFontSpec"],[3,"XftFontSet"],[3,"XftGlyphSpec"],[3,"XftGlyphFontSpec"],[4,"FcEndian"],[4,"FcResult"],[3,"Xlib"],[3,"XineramaScreenInfo"],[3,"XPanoramiXInfo"],[3,"XInput"],[3,"XDevice"],[3,"XDeviceControl"],[3,"XDeviceInfo"],[3,"XDeviceState"],[3,"XDeviceTimeCoord"],[3,"XExtensionVersion"],[3,"XFeedbackControl"],[3,"XFeedbackState"],[3,"XInputClass"],[3,"XInputClassInfo"],[3,"XInput2"],[3,"Struct_Unnamed1"],[3,"Struct_Unnamed2"],[3,"Struct_Unnamed3"],[3,"Struct_Unnamed4"],[3,"Union_Unnamed5"],[3,"Struct_Unnamed6"],[3,"Struct_Unnamed7"],[3,"Struct_Unnamed8"],[3,"Struct_Unnamed9"],[3,"Struct_Unnamed10"],[3,"Struct_Unnamed11"],[3,"Struct_Unnamed12"],[3,"Struct_Unnamed13"],[3,"Struct_Unnamed14"],[3,"Struct_Unnamed15"],[3,"Struct_Unnamed16"],[3,"Struct_Unnamed17"],[3,"Struct_Unnamed18"],[3,"Struct_Unnamed19"],[3,"Struct_Unnamed20"],[3,"Struct_Unnamed21"],[3,"Struct_Unnamed22"],[3,"Struct_Unnamed23"],[3,"Struct_Unnamed24"],[3,"Struct_Unnamed25"],[3,"Struct_Unnamed26"],[3,"Struct_Unnamed27"],[3,"Struct_Unnamed28"],[3,"Xmu"],[3,"Xf86vmode"],[3,"XRecordClientInfo"],[3,"XRecordExtRange"],[3,"XRecordInterceptData"],[3,"XRecordRange"],[3,"XRecordRange8"],[3,"XRecordRange16"],[3,"XRecordState"],[3,"Xrender"],[3,"_XAnimCursor"],[3,"_XCircle"],[3,"_XConicalGradient"],[3,"_XFilters"],[3,"_XGlyphElt8"],[3,"_XGlyphElt16"],[3,"_XGlyphElt32"],[3,"_XGlyphInfo"],[3,"_XIndexValue"],[3,"_XLinearGradient"],[3,"_XLineFixed"],[3,"_XPointDouble"],[3,"_XPointFixed"],[3,"_XRadialGradient"],[3,"XRenderColor"],[3,"XRenderDirectFormat"],[3,"XRenderPictFormat"],[3,"_XRenderPictureAttributes"],[3,"_XSpanFix"],[3,"_XTrap"],[3,"_XTrapezoid"],[3,"_XTriangle"],[3,"_XTransform"],[3,"Xss"],[3,"XScreenSaverInfo"],[3,"XScreenSaverNotifyEvent"],[3,"Xt"],[3,"Xf86vmode"],[3,"Xlib_xcb"],[3,"Xrandr"],[3,"XRRScreenSize"],[3,"XRRModeInfo"],[3,"XRRScreenResources"],[3,"XRROutputInfo"],[3,"XRRPropertyInfo"],[3,"XRRCrtcInfo"],[3,"XRRCrtcGamma"],[3,"XRRCrtcTransformAttributes"],[3,"XRRPanning"],[3,"XRRProviderResources"],[3,"XRRProviderInfo"],[3,"XRRMonitorInfo"],[3,"XRRScreenChangeNotifyEvent"],[3,"XRRNotifyEvent"],[3,"XRROutputChangeNotifyEvent"],[3,"XRRCrtcChangeNotifyEvent"],[3,"XRROutputPropertyNotifyEvent"],[3,"XRRProviderChangeNotifyEvent"],[3,"XRRProviderPropertyNotifyEvent"],[3,"XRRResourceChangeNotifyEvent"],[3,"Xrandr_2_2_0"]]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[3,"YamlIter","","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"on_event","","",1,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"into_iter","","",0,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tencoding"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tscalarstyle"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"scanerror"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",null,null],[13,"Nothing","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"MarkedEventReceiver","","",null,null],[10,"on_event","","",12,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"bool"}],"output":{"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",14,null],[13,"BadHashmapKey","","",14,null],[6,"EmitResult","","",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"emiterror"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",15,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
initSearch(searchIndex);
